<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.0">
  <compounddef id="interpreter_8h" kind="file">
    <compoundname>interpreter.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="tools_2lci_2lciframework_2parser_8h" local="yes">parser.h</includes>
    <includes refid="unicode_8h" local="yes">unicode.h</includes>
    <includedby refid="interpreter_8c" local="yes">tools/lci/lciframework/interpreter.c</includedby>
    <includedby refid="main_8c" local="yes">tools/lci/lciframework/main.c</includedby>
    <incdepgraph>
      <node id="739">
        <label>stdlib.h</label>
      </node>
      <node id="742">
        <label>lexer.h</label>
        <link refid="lexer_8h"/>
        <childnode refid="739" relation="include">
        </childnode>
        <childnode refid="735" relation="include">
        </childnode>
        <childnode refid="740" relation="include">
        </childnode>
        <childnode refid="736" relation="include">
        </childnode>
      </node>
      <node id="743">
        <label>unicode.h</label>
        <link refid="unicode_8h"/>
        <childnode refid="735" relation="include">
        </childnode>
        <childnode refid="740" relation="include">
        </childnode>
      </node>
      <node id="734">
        <label>tools/lci/lciframework/interpreter.h</label>
        <link refid="interpreter.h"/>
        <childnode refid="735" relation="include">
        </childnode>
        <childnode refid="736" relation="include">
        </childnode>
        <childnode refid="737" relation="include">
        </childnode>
        <childnode refid="738" relation="include">
        </childnode>
        <childnode refid="743" relation="include">
        </childnode>
      </node>
      <node id="741">
        <label>tokenizer.h</label>
        <link refid="tokenizer_8h"/>
        <childnode refid="739" relation="include">
        </childnode>
        <childnode refid="735" relation="include">
        </childnode>
        <childnode refid="740" relation="include">
        </childnode>
        <childnode refid="742" relation="include">
        </childnode>
      </node>
      <node id="740">
        <label>string.h</label>
      </node>
      <node id="737">
        <label>math.h</label>
      </node>
      <node id="736">
        <label>ctype.h</label>
      </node>
      <node id="738">
        <label>parser.h</label>
        <link refid="tools_2lci_2lciframework_2parser_8h_source"/>
        <childnode refid="739" relation="include">
        </childnode>
        <childnode refid="735" relation="include">
        </childnode>
        <childnode refid="740" relation="include">
        </childnode>
        <childnode refid="741" relation="include">
        </childnode>
      </node>
      <node id="735">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="745">
        <label>tools/lci/lciframework/interpreter.c</label>
        <link refid="interpreter_8c_source"/>
      </node>
      <node id="744">
        <label>tools/lci/lciframework/interpreter.h</label>
        <link refid="interpreter.h"/>
        <childnode refid="745" relation="include">
        </childnode>
        <childnode refid="746" relation="include">
        </childnode>
      </node>
      <node id="746">
        <label>tools/lci/lciframework/main.c</label>
        <link refid="main_8c_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="union_value_data" prot="public">ValueData</innerclass>
    <innerclass refid="struct_value_object" prot="public">ValueObject</innerclass>
    <innerclass refid="struct_return_object" prot="public">ReturnObject</innerclass>
    <innerclass refid="structscopeobject" prot="public">scopeobject</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" prot="public" static="no">
        <name>getInteger</name>
        <param><defname>value</defname></param>
        <initializer>(value-&gt;data.i)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the integer data associated with a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="23" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" bodystart="23" bodyend="-1"/>
        <referencedby refid="interpreter_8h_1a9da4535836163318aac4d7d2eb03a2d2" compoundref="interpreter_8c" startline="600" endline="628">castBooleanExplicit</referencedby>
        <referencedby refid="interpreter_8h_1aa211d313e27c2f081edc2309a4acb020" compoundref="interpreter_8c" startline="648" endline="689">castIntegerExplicit</referencedby>
        <referencedby refid="interpreter_8h_1ab8aff5e3c1456ad85bf55cc816a84a87" compoundref="interpreter_8c" startline="709" endline="750">castFloatExplicit</referencedby>
        <referencedby refid="interpreter_8h_1a392cb43c47522cc46d70df0f673b73f6" compoundref="interpreter_8c" startline="774" endline="971">castStringExplicit</referencedby>
        <referencedby refid="interpreter_8h_1a7795828f9fd573ff3670ade6f6955b07" compoundref="interpreter_8c" startline="1230" endline="1250">interpretNotOpExprNode</referencedby>
        <referencedby refid="interpreter_8h_1a60442c44a3ac32b0a98e89294e785c7a" compoundref="interpreter_8c" startline="1265" endline="1269">opAddIntegerInteger</referencedby>
        <referencedby refid="interpreter_8h_1a40c15754c7035023570c2f6706aa1bce" compoundref="interpreter_8c" startline="1284" endline="1288">opSubIntegerInteger</referencedby>
        <referencedby refid="interpreter_8h_1a49439f8122d53198698d46dc8e355dec" compoundref="interpreter_8c" startline="1303" endline="1307">opMultIntegerInteger</referencedby>
        <referencedby refid="interpreter_8h_1a1c2bad8d59cc55d1de2e90818552b727" compoundref="interpreter_8c" startline="1324" endline="1332">opDivIntegerInteger</referencedby>
        <referencedby refid="interpreter_8h_1a60d738376880221327c82bb0bf2de141" compoundref="interpreter_8c" startline="1347" endline="1351">opMaxIntegerInteger</referencedby>
        <referencedby refid="interpreter_8h_1af3f2a6f50fdd068834ab1b58d4928ec8" compoundref="interpreter_8c" startline="1366" endline="1370">opMinIntegerInteger</referencedby>
        <referencedby refid="interpreter_8h_1a87b62a374250d0fbe4e9e95497c10b15" compoundref="interpreter_8c" startline="1385" endline="1393">opModIntegerInteger</referencedby>
        <referencedby refid="interpreter_8h_1afd694eb2626213010cbc38830a462fde" compoundref="interpreter_8c" startline="1409" endline="1413">opAddIntegerFloat</referencedby>
        <referencedby refid="interpreter_8h_1a305d078f6079ca2938e21409816000be" compoundref="interpreter_8c" startline="1429" endline="1433">opSubIntegerFloat</referencedby>
        <referencedby refid="interpreter_8h_1a5393045000bf05070b764eebe2012627" compoundref="interpreter_8c" startline="1449" endline="1453">opMultIntegerFloat</referencedby>
        <referencedby refid="interpreter_8h_1a0df5be521bfc67b35aca6ab1e30c2a32" compoundref="interpreter_8c" startline="1471" endline="1479">opDivIntegerFloat</referencedby>
        <referencedby refid="interpreter_8h_1a5d68c3dc91195706810b6db725e62eaa" compoundref="interpreter_8c" startline="1495" endline="1499">opMaxIntegerFloat</referencedby>
        <referencedby refid="interpreter_8h_1a5693ec134e9b9090f8cfe51d9906e38e" compoundref="interpreter_8c" startline="1515" endline="1519">opMinIntegerFloat</referencedby>
        <referencedby refid="interpreter_8h_1a6fa3fda306a1df48dfe9fbc2cff75d74" compoundref="interpreter_8c" startline="1535" endline="1543">opModIntegerFloat</referencedby>
        <referencedby refid="interpreter_8h_1a7c2619ce0699c09c53ab2aaf2c0977f7" compoundref="interpreter_8c" startline="1559" endline="1563">opAddFloatInteger</referencedby>
        <referencedby refid="interpreter_8h_1a499e486ea1a832b7105d3d8da3b76e91" compoundref="interpreter_8c" startline="1579" endline="1583">opSubFloatInteger</referencedby>
        <referencedby refid="interpreter_8h_1a89ec3da04bba6b628f84b131e804e3aa" compoundref="interpreter_8c" startline="1620" endline="1628">opDivFloatInteger</referencedby>
        <referencedby refid="interpreter_8h_1ae290f0012a6e7ac888f6e42e162db0d1" compoundref="interpreter_8c" startline="1644" endline="1648">opMaxFloatInteger</referencedby>
        <referencedby refid="interpreter_8h_1aeba04e12530543d1ecc8a70669fac094" compoundref="interpreter_8c" startline="1664" endline="1668">opMinFloatInteger</referencedby>
        <referencedby refid="interpreter_8h_1a6d90cdaea27748de7784f43f82c31c8a" compoundref="interpreter_8c" startline="1684" endline="1692">opModFloatInteger</referencedby>
        <referencedby refid="interpreter_8h_1ad0dc393a1a5f2ef0eb59742fe70f07d1" compoundref="interpreter_8c" startline="1996" endline="2043">interpretBoolOpExprNode</referencedby>
        <referencedby refid="interpreter_8h_1af02dbffb1883def8d565b324d3b08fa4" compoundref="interpreter_8c" startline="2053" endline="2057">opEqIntegerInteger</referencedby>
        <referencedby refid="interpreter_8h_1a737fac56d37cbf193f78775774cfdeeb" compoundref="interpreter_8c" startline="2067" endline="2071">opNeqIntegerInteger</referencedby>
        <referencedby refid="interpreter_8h_1a918c1fe2753f0fa6a7f0abbb0f26790f" compoundref="interpreter_8c" startline="2082" endline="2086">opEqIntegerFloat</referencedby>
        <referencedby refid="interpreter_8h_1a689189c68d9b98c49d296cd9f04363e9" compoundref="interpreter_8c" startline="2097" endline="2101">opNeqIntegerFloat</referencedby>
        <referencedby refid="interpreter_8h_1a5b824e009801b5ca65d51abe36aecf97" compoundref="interpreter_8c" startline="2112" endline="2116">opEqFloatInteger</referencedby>
        <referencedby refid="interpreter_8h_1a48ab7e79793cd6462d041d6288b770d9" compoundref="interpreter_8c" startline="2127" endline="2131">opNeqFloatInteger</referencedby>
        <referencedby refid="interpreter_8h_1a49a410f97c8559f2ba41ca94b7aceb21" compoundref="interpreter_8c" startline="2169" endline="2173">opEqBooleanBoolean</referencedby>
        <referencedby refid="interpreter_8h_1adf2234eccc6099f2f1829a7ee948e045" compoundref="interpreter_8c" startline="2183" endline="2187">opNeqBooleanBoolean</referencedby>
        <referencedby refid="interpreter_8h_1a0214f5c76bcb63a1fbb9a242f9341763" compoundref="interpreter_8c" startline="2762" endline="2820">interpretIfThenElseStmtNode</referencedby>
        <referencedby refid="interpreter_8h_1acbbc71ff8da84a69bea6a533c73c02ff" compoundref="interpreter_8c" startline="2853" endline="2922">interpretSwitchStmtNode</referencedby>
        <referencedby refid="interpreter_8h_1a3907f4b04d219b06c4967b92af485ff8" compoundref="interpreter_8c" startline="3017" endline="3100">interpretLoopStmtNode</referencedby>
      </memberdef>
      <memberdef kind="define" id="interpreter_8h_1a476129305e12675fd848537c7a23be7e" prot="public" static="no">
        <name>getFloat</name>
        <param><defname>value</defname></param>
        <initializer>(value-&gt;data.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the floating point data associated with a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="25" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" bodystart="25" bodyend="-1"/>
        <referencedby refid="interpreter_8h_1a9da4535836163318aac4d7d2eb03a2d2" compoundref="interpreter_8c" startline="600" endline="628">castBooleanExplicit</referencedby>
        <referencedby refid="interpreter_8h_1aa211d313e27c2f081edc2309a4acb020" compoundref="interpreter_8c" startline="648" endline="689">castIntegerExplicit</referencedby>
        <referencedby refid="interpreter_8h_1ab8aff5e3c1456ad85bf55cc816a84a87" compoundref="interpreter_8c" startline="709" endline="750">castFloatExplicit</referencedby>
        <referencedby refid="interpreter_8h_1a392cb43c47522cc46d70df0f673b73f6" compoundref="interpreter_8c" startline="774" endline="971">castStringExplicit</referencedby>
        <referencedby refid="interpreter_8h_1afd694eb2626213010cbc38830a462fde" compoundref="interpreter_8c" startline="1409" endline="1413">opAddIntegerFloat</referencedby>
        <referencedby refid="interpreter_8h_1a305d078f6079ca2938e21409816000be" compoundref="interpreter_8c" startline="1429" endline="1433">opSubIntegerFloat</referencedby>
        <referencedby refid="interpreter_8h_1a5393045000bf05070b764eebe2012627" compoundref="interpreter_8c" startline="1449" endline="1453">opMultIntegerFloat</referencedby>
        <referencedby refid="interpreter_8h_1a0df5be521bfc67b35aca6ab1e30c2a32" compoundref="interpreter_8c" startline="1471" endline="1479">opDivIntegerFloat</referencedby>
        <referencedby refid="interpreter_8h_1a5d68c3dc91195706810b6db725e62eaa" compoundref="interpreter_8c" startline="1495" endline="1499">opMaxIntegerFloat</referencedby>
        <referencedby refid="interpreter_8h_1a5693ec134e9b9090f8cfe51d9906e38e" compoundref="interpreter_8c" startline="1515" endline="1519">opMinIntegerFloat</referencedby>
        <referencedby refid="interpreter_8h_1a6fa3fda306a1df48dfe9fbc2cff75d74" compoundref="interpreter_8c" startline="1535" endline="1543">opModIntegerFloat</referencedby>
        <referencedby refid="interpreter_8h_1a7c2619ce0699c09c53ab2aaf2c0977f7" compoundref="interpreter_8c" startline="1559" endline="1563">opAddFloatInteger</referencedby>
        <referencedby refid="interpreter_8h_1a499e486ea1a832b7105d3d8da3b76e91" compoundref="interpreter_8c" startline="1579" endline="1583">opSubFloatInteger</referencedby>
        <referencedby refid="interpreter_8h_1a89ec3da04bba6b628f84b131e804e3aa" compoundref="interpreter_8c" startline="1620" endline="1628">opDivFloatInteger</referencedby>
        <referencedby refid="interpreter_8h_1ae290f0012a6e7ac888f6e42e162db0d1" compoundref="interpreter_8c" startline="1644" endline="1648">opMaxFloatInteger</referencedby>
        <referencedby refid="interpreter_8h_1aeba04e12530543d1ecc8a70669fac094" compoundref="interpreter_8c" startline="1664" endline="1668">opMinFloatInteger</referencedby>
        <referencedby refid="interpreter_8h_1a6d90cdaea27748de7784f43f82c31c8a" compoundref="interpreter_8c" startline="1684" endline="1692">opModFloatInteger</referencedby>
        <referencedby refid="interpreter_8h_1ad07ed5a492963cbbfbaf26f10178a0da" compoundref="interpreter_8c" startline="1707" endline="1711">opAddFloatFloat</referencedby>
        <referencedby refid="interpreter_8h_1a6fe0baa044b43505a5013455ce7f3ef4" compoundref="interpreter_8c" startline="1726" endline="1730">opSubFloatFloat</referencedby>
        <referencedby refid="interpreter_8h_1ab28d564ef0da5903a3a2ed6c18dcad11" compoundref="interpreter_8c" startline="1745" endline="1749">opMultFloatFloat</referencedby>
        <referencedby refid="interpreter_8h_1a907454143b8856fe616d3b595cb917d1" compoundref="interpreter_8c" startline="1766" endline="1774">opDivFloatFloat</referencedby>
        <referencedby refid="interpreter_8h_1a744d79a234d2a4f6490ef91624071c32" compoundref="interpreter_8c" startline="1789" endline="1793">opMaxFloatFloat</referencedby>
        <referencedby refid="interpreter_8h_1a901fca3f0217cce10f23a893372680a8" compoundref="interpreter_8c" startline="1808" endline="1812">opMinFloatFloat</referencedby>
        <referencedby refid="interpreter_8h_1ae7fd86387767d294c071b020ea5e9ccc" compoundref="interpreter_8c" startline="1827" endline="1835">opModFloatFloat</referencedby>
        <referencedby refid="interpreter_8h_1a918c1fe2753f0fa6a7f0abbb0f26790f" compoundref="interpreter_8c" startline="2082" endline="2086">opEqIntegerFloat</referencedby>
        <referencedby refid="interpreter_8h_1a689189c68d9b98c49d296cd9f04363e9" compoundref="interpreter_8c" startline="2097" endline="2101">opNeqIntegerFloat</referencedby>
        <referencedby refid="interpreter_8h_1a5b824e009801b5ca65d51abe36aecf97" compoundref="interpreter_8c" startline="2112" endline="2116">opEqFloatInteger</referencedby>
        <referencedby refid="interpreter_8h_1a48ab7e79793cd6462d041d6288b770d9" compoundref="interpreter_8c" startline="2127" endline="2131">opNeqFloatInteger</referencedby>
        <referencedby refid="interpreter_8h_1ab721f724a3fac4900c4a8886d57c41d2" compoundref="interpreter_8c" startline="2141" endline="2145">opEqFloatFloat</referencedby>
        <referencedby refid="interpreter_8h_1ac2f5e5a62a09a571b8be1ab942fa29cd" compoundref="interpreter_8c" startline="2155" endline="2159">opNeqFloatFloat</referencedby>
        <referencedby refid="interpreter_8h_1acbbc71ff8da84a69bea6a533c73c02ff" compoundref="interpreter_8c" startline="2853" endline="2922">interpretSwitchStmtNode</referencedby>
      </memberdef>
      <memberdef kind="define" id="interpreter_8h_1a2267d4f53f5d3d35446667cc2b26f392" prot="public" static="no">
        <name>getString</name>
        <param><defname>value</defname></param>
        <initializer>(value-&gt;data.s)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the string data associated with a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="27" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" bodystart="27" bodyend="-1"/>
        <referencedby refid="interpreter_8h_1a9da4535836163318aac4d7d2eb03a2d2" compoundref="interpreter_8c" startline="600" endline="628">castBooleanExplicit</referencedby>
        <referencedby refid="interpreter_8h_1aa211d313e27c2f081edc2309a4acb020" compoundref="interpreter_8c" startline="648" endline="689">castIntegerExplicit</referencedby>
        <referencedby refid="interpreter_8h_1ab8aff5e3c1456ad85bf55cc816a84a87" compoundref="interpreter_8c" startline="709" endline="750">castFloatExplicit</referencedby>
        <referencedby refid="interpreter_8h_1a392cb43c47522cc46d70df0f673b73f6" compoundref="interpreter_8c" startline="774" endline="971">castStringExplicit</referencedby>
        <referencedby refid="interpreter_8h_1ac43fd9e88414ff9960db8a442ae9a0e8" compoundref="interpreter_8c" startline="1872" endline="1975">interpretArithOpExprNode</referencedby>
        <referencedby refid="interpreter_8h_1a990ba01ec898389b6bde8471e2ad0f9d" compoundref="interpreter_8c" startline="2197" endline="2201">opEqStringString</referencedby>
        <referencedby refid="interpreter_8h_1a207c76cef3c01faa73750bd60e9b0037" compoundref="interpreter_8c" startline="2211" endline="2215">opNeqStringString</referencedby>
        <referencedby refid="interpreter_8h_1a4f45d788f390ee7a01a9f7a13f512d03" compoundref="interpreter_8c" startline="2357" endline="2410">interpretConcatOpExprNode</referencedby>
        <referencedby refid="interpreter_8h_1a3099ebd9282870922a92b1b59f675458" compoundref="interpreter_8c" startline="2567" endline="2587">interpretPrintStmtNode</referencedby>
        <referencedby refid="interpreter_8h_1acbbc71ff8da84a69bea6a533c73c02ff" compoundref="interpreter_8c" startline="2853" endline="2922">interpretSwitchStmtNode</referencedby>
      </memberdef>
      <memberdef kind="define" id="interpreter_8h_1acdac0b055f8acfc246c8d1f6cc249012" prot="public" static="no">
        <name>V</name>
        <param><defname>value</defname></param>
        <initializer>(value-&gt;semaphore++)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Increments the semaphore of a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="46" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" bodystart="46" bodyend="-1"/>
        <referencedby refid="interpreter_8h_1a030b889cd6487c903b7e12e69268cdc4" compoundref="interpreter_8c" startline="136" endline="140">copyValueObject</referencedby>
      </memberdef>
      <memberdef kind="define" id="interpreter_8h_1add157945a6056e97010b859dd7b32c2c" prot="public" static="no">
        <name>P</name>
        <param><defname>value</defname></param>
        <initializer>(value-&gt;semaphore--)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decrements the semaphore of a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="49" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" bodystart="49" bodyend="-1"/>
        <referencedby refid="interpreter_8h_1a47864225786b36609969a3fea1658a98" compoundref="interpreter_8c" startline="164" endline="172">deleteValueObject</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1" prot="public" static="no">
        <name>ValueType</name>
        <enumvalue id="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a656b93fb21c4267dae17573f6129fe93" prot="public">
          <name>VT_INTEGER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An integer value. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a361c0d0ff5ba71f4ddd9633d3f79635f" prot="public">
          <name>VT_FLOAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A floating point decimal value. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1aa7db6a14e86242b201db0d4993d61862" prot="public">
          <name>VT_BOOLEAN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A true/false value. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a7d0ada66d85d8eb695f3bdd2e48b5976" prot="public">
          <name>VT_STRING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A character string value. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a523067b7870725372ce9aa1399a8abba" prot="public">
          <name>VT_NIL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Represents no value. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Denotes the type of a value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="30" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" bodystart="30" bodyend="36"/>
      </memberdef>
      <memberdef kind="enum" id="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cc" prot="public" static="no">
        <name>ReturnType</name>
        <enumvalue id="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cca5799e236aeee53b6fe285dc67cb42f00" prot="public">
          <name>RT_DEFAULT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A block of code returned after evaluating all of its statements. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64ccaa22f8c8892450d4ee8806a80a7e12b64" prot="public">
          <name>RT_BREAK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A block of code within a <ref refid="struct_loop_stmt_node" kindref="compound">LoopStmtNode</ref> or <ref refid="struct_switch_stmt_node" kindref="compound">SwitchStmtNode</ref> returned via a break statement. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64ccae089a7a50c323705d8c848d0308ca41b" prot="public">
          <name>RT_RETURN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A block of code within a <ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref> called by a <ref refid="struct_func_call_expr_node" kindref="compound">FuncCallExprNode</ref> returned (either with or without a value). </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Denotes the type of return encountered. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="62" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" bodystart="62" bodyend="66"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" prot="public" static="no">
        <type>struct <ref refid="structscopeobject" kindref="compound">scopeobject</ref></type>
        <definition>typedef struct scopeobject  ScopeObject</definition>
        <argsstring></argsstring>
        <name>ScopeObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stores the variables in a particular scope. Scopes are arranged heirarchically from global (the ancestor of all other scopes) to local (the temporary scope of a <ref refid="struct_block_node" kindref="compound">BlockNode</ref>).</para><para><simplesect kind="see"><para><ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a2d477a01d56c2e2aed64ad096c6d5417" kindref="member">deleteScopeObject(ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="89"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="interpreter_8h_1aa775c9107ae005e912e3167801648dee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* createString</definition>
        <argsstring>(char *)</argsstring>
        <name>createString</name>
        <param>
          <type>char *</type>
          <defname>data</defname>
          <briefdescription><para>A pointer to the string data to store. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a string by copying the contents of another string.</para><para><simplesect kind="return"><para>A pointer to a string containing the copied contents of <emphasis>data</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="91" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="8" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a494ae7c921c6e7994e07d927f1dd619b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* createNilValueObject</definition>
        <argsstring>(void)</argsstring>
        <name>createNilValueObject</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a nil type <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure.</para><para><simplesect kind="return"><para>A pointer to a nil type <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="92" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="24" bodyend="34"/>
        <references refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" compoundref="interpreter_8h" startline="56">ValueObject::type</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a523067b7870725372ce9aa1399a8abba" compoundref="interpreter_8h" startline="35">VT_NIL</references>
        <references refid="struct_value_object_1a08cfa02ff5b2f4ee7307c62c95089373" compoundref="interpreter_8h" startline="58">ValueObject::semaphore</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a83170df5413454d013a2624ffde40134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* createBooleanValueObject</definition>
        <argsstring>(int)</argsstring>
        <name>createBooleanValueObject</name>
        <param>
          <type>int</type>
          <defname>data</defname>
          <briefdescription><para>The boolean data to store. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a boolean type <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure.</para><para><simplesect kind="return"><para>A pointer to a boolean type <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure with value <computeroutput>0</computeroutput> if <emphasis>data</emphasis> equals 0 and <computeroutput>1</computeroutput> otherwise.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="93" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="42" bodyend="53"/>
        <references refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" compoundref="interpreter_8h" startline="56">ValueObject::type</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1aa7db6a14e86242b201db0d4993d61862" compoundref="interpreter_8h" startline="33">VT_BOOLEAN</references>
        <references refid="struct_value_object_1a66e5eb0433f8150bf24cfc86856efe4e" compoundref="interpreter_8h" startline="57">ValueObject::data</references>
        <references refid="union_value_data_1abc2f11fb39990140dbc322610ba52f70" compoundref="interpreter_8h" startline="40">ValueData::i</references>
        <references refid="struct_value_object_1a08cfa02ff5b2f4ee7307c62c95089373" compoundref="interpreter_8h" startline="58">ValueObject::semaphore</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* createIntegerValueObject</definition>
        <argsstring>(int)</argsstring>
        <name>createIntegerValueObject</name>
        <param>
          <type>int</type>
          <defname>data</defname>
          <briefdescription><para>The integer data to store. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an integer type <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure.</para><para><simplesect kind="return"><para>A pointer to an integer type <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure with value <emphasis>data</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="94" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="61" bodyend="72"/>
        <references refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" compoundref="interpreter_8h" startline="56">ValueObject::type</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a656b93fb21c4267dae17573f6129fe93" compoundref="interpreter_8h" startline="31">VT_INTEGER</references>
        <references refid="struct_value_object_1a66e5eb0433f8150bf24cfc86856efe4e" compoundref="interpreter_8h" startline="57">ValueObject::data</references>
        <references refid="union_value_data_1abc2f11fb39990140dbc322610ba52f70" compoundref="interpreter_8h" startline="40">ValueData::i</references>
        <references refid="struct_value_object_1a08cfa02ff5b2f4ee7307c62c95089373" compoundref="interpreter_8h" startline="58">ValueObject::semaphore</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* createFloatValueObject</definition>
        <argsstring>(float)</argsstring>
        <name>createFloatValueObject</name>
        <param>
          <type>float</type>
          <defname>data</defname>
          <briefdescription><para>The floating point data to store. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a floating point data decimal type <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure.</para><para><simplesect kind="return"><para>A pointer to a floating point decimal type <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure with value <emphasis>data</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="95" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="80" bodyend="91"/>
        <references refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" compoundref="interpreter_8h" startline="56">ValueObject::type</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a361c0d0ff5ba71f4ddd9633d3f79635f" compoundref="interpreter_8h" startline="32">VT_FLOAT</references>
        <references refid="struct_value_object_1a66e5eb0433f8150bf24cfc86856efe4e" compoundref="interpreter_8h" startline="57">ValueObject::data</references>
        <references refid="union_value_data_1a85311c11b54183bb571f35ed70af37a9" compoundref="interpreter_8h" startline="41">ValueData::f</references>
        <references refid="struct_value_object_1a08cfa02ff5b2f4ee7307c62c95089373" compoundref="interpreter_8h" startline="58">ValueObject::semaphore</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a9c7124b50cb92fb20edc6c2963a5f2b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* createStringValueObject</definition>
        <argsstring>(char *)</argsstring>
        <name>createStringValueObject</name>
        <param>
          <type>char *</type>
          <defname>data</defname>
          <briefdescription><para>The string data to store. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a string type <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure.</para><para><simplesect kind="return"><para>A pointer to a string type <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure with value <emphasis>data</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="96" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="98" bodyend="109"/>
        <references refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" compoundref="interpreter_8h" startline="56">ValueObject::type</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a7d0ada66d85d8eb695f3bdd2e48b5976" compoundref="interpreter_8h" startline="34">VT_STRING</references>
        <references refid="struct_value_object_1a66e5eb0433f8150bf24cfc86856efe4e" compoundref="interpreter_8h" startline="57">ValueObject::data</references>
        <references refid="union_value_data_1a2639b48549e0788d5f9a3da6ea9cb0e4" compoundref="interpreter_8h" startline="42">ValueData::s</references>
        <references refid="struct_value_object_1a08cfa02ff5b2f4ee7307c62c95089373" compoundref="interpreter_8h" startline="58">ValueObject::semaphore</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a030b889cd6487c903b7e12e69268cdc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* copyValueObject</definition>
        <argsstring>(ValueObject *)</argsstring>
        <name>copyValueObject</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>value</defname>
          <briefdescription><para>The <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure to create a copy of. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copies a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure.</para><para><simplesect kind="note"><para>What this function actually does is increment a semaphore in <emphasis>value</emphasis> and return <emphasis>value</emphasis>. The semaphore gets decremented when <emphasis>value</emphasis> gets deleted by <ref refid="interpreter_8h_1a47864225786b36609969a3fea1658a98" kindref="member">deleteValueObject(ValueObject *)</ref>. This way, an immutable copy of a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure may be made without actaully copying its blocks of memory; this reduces the overhead associated with copying a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> strcuture while still preserving its functionality.</para></simplesect>
<simplesect kind="pre"><para><emphasis>value</emphasis> was created by either <ref refid="interpreter_8h_1a494ae7c921c6e7994e07d927f1dd619b" kindref="member">createNilValueObject(void)</ref>, <ref refid="interpreter_8h_1a83170df5413454d013a2624ffde40134" kindref="member">createBooleanValueObject(int)</ref>, <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>, <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>, <ref refid="interpreter_8h_1a9c7124b50cb92fb20edc6c2963a5f2b8" kindref="member">createStringValueObject(char *)</ref>, or copied with <ref refid="interpreter_8h_1a030b889cd6487c903b7e12e69268cdc4" kindref="member">copyValueObject(ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> with the same type and contents as <emphasis>value</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of <emphasis>value</emphasis> is unknown.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a494ae7c921c6e7994e07d927f1dd619b" kindref="member">createNilValueObject(void)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a83170df5413454d013a2624ffde40134" kindref="member">createBooleanValueObject(int)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a9c7124b50cb92fb20edc6c2963a5f2b8" kindref="member">createStringValueObject(char *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a47864225786b36609969a3fea1658a98" kindref="member">deleteValueObject(ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="97" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="136" bodyend="140"/>
        <references refid="interpreter_8h_1acdac0b055f8acfc246c8d1f6cc249012" compoundref="interpreter_8h" startline="46">V</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a47864225786b36609969a3fea1658a98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteValueObject</definition>
        <argsstring>(ValueObject *)</argsstring>
        <name>deleteValueObject</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>value</defname>
          <briefdescription><para>A pointer to the <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>value</emphasis> was created by either <ref refid="interpreter_8h_1a494ae7c921c6e7994e07d927f1dd619b" kindref="member">createNilValueObject(void)</ref>, <ref refid="interpreter_8h_1a83170df5413454d013a2624ffde40134" kindref="member">createBooleanValueObject(int)</ref>, <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>, <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>, <ref refid="interpreter_8h_1a9c7124b50cb92fb20edc6c2963a5f2b8" kindref="member">createStringValueObject(char *)</ref>, or copied with <ref refid="interpreter_8h_1a030b889cd6487c903b7e12e69268cdc4" kindref="member">copyValueObject(ValueObject *)</ref>.</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>value</emphasis> and any of its associated members will be freed (see note).</para></simplesect>
<simplesect kind="note"><para>What this function actually does is decrement a semaphore in <emphasis>value</emphasis> and delete <emphasis>value</emphasis> if the semaphore reaches 0 as a result of the decrement. The semaphore gets incremented when either the value is created or it gets copied by <ref refid="interpreter_8h_1a030b889cd6487c903b7e12e69268cdc4" kindref="member">copyValueObject(ValueObject *)</ref>. This way, an immutable copy of a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure may be made without actually copying its blocks of memory.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a494ae7c921c6e7994e07d927f1dd619b" kindref="member">createNilValueObject(void)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a83170df5413454d013a2624ffde40134" kindref="member">createBooleanValueObject(int)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a9c7124b50cb92fb20edc6c2963a5f2b8" kindref="member">createStringValueObject(char *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a030b889cd6487c903b7e12e69268cdc4" kindref="member">copyValueObject(ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="98" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="164" bodyend="172"/>
        <references refid="interpreter_8h_1add157945a6056e97010b859dd7b32c2c" compoundref="interpreter_8h" startline="49">P</references>
        <references refid="struct_value_object_1a08cfa02ff5b2f4ee7307c62c95089373" compoundref="interpreter_8h" startline="58">ValueObject::semaphore</references>
        <references refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" compoundref="interpreter_8h" startline="56">ValueObject::type</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a7d0ada66d85d8eb695f3bdd2e48b5976" compoundref="interpreter_8h" startline="34">VT_STRING</references>
        <references refid="struct_value_object_1a66e5eb0433f8150bf24cfc86856efe4e" compoundref="interpreter_8h" startline="57">ValueObject::data</references>
        <references refid="union_value_data_1a2639b48549e0788d5f9a3da6ea9cb0e4" compoundref="interpreter_8h" startline="42">ValueData::s</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1ae981d9226d812c444fc16aa82755a483" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_return_object" kindref="compound">ReturnObject</ref> *</type>
        <definition>ReturnObject* createReturnObject</definition>
        <argsstring>(ReturnType, ValueObject *)</argsstring>
        <name>createReturnObject</name>
        <param>
          <type><ref refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cc" kindref="member">ReturnType</ref></type>
          <defname>type</defname>
          <briefdescription><para>The type of return encountered. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>value</defname>
          <briefdescription><para>A pointer to the <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure specifying the return value (optional, <computeroutput>NULL</computeroutput> if unused). </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="struct_return_object" kindref="compound">ReturnObject</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>value</emphasis> was created by either <ref refid="interpreter_8h_1a494ae7c921c6e7994e07d927f1dd619b" kindref="member">createNilValueObject(void)</ref>, <ref refid="interpreter_8h_1a83170df5413454d013a2624ffde40134" kindref="member">createBooleanValueObject(int)</ref>, <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>, <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>, <ref refid="interpreter_8h_1a9c7124b50cb92fb20edc6c2963a5f2b8" kindref="member">createStringValueObject(char *)</ref>, or copied with <ref refid="interpreter_8h_1a030b889cd6487c903b7e12e69268cdc4" kindref="member">copyValueObject(ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_return_object" kindref="compound">ReturnObject</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a573290ef3b6c111b59ad34136dd52d56" kindref="member">deleteReturnObject(ReturnObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="99" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="185" bodyend="196"/>
        <references refid="struct_return_object_1a79da4f77fc9fa5dfeefbd750b0caddb0" compoundref="interpreter_8h" startline="73">ReturnObject::type</references>
        <references refid="struct_return_object_1a52bd553a4949e0f49f377778402e2cbe" compoundref="interpreter_8h" startline="74">ReturnObject::value</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a573290ef3b6c111b59ad34136dd52d56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteReturnObject</definition>
        <argsstring>(ReturnObject *)</argsstring>
        <name>deleteReturnObject</name>
        <param>
          <type><ref refid="struct_return_object" kindref="compound">ReturnObject</ref> *</type>
          <defname>object</defname>
          <briefdescription><para>The <ref refid="struct_return_object" kindref="compound">ReturnObject</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a <ref refid="struct_return_object" kindref="compound">ReturnObject</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>object</emphasis> was created by <ref refid="interpreter_8h_1ae981d9226d812c444fc16aa82755a483" kindref="member">createReturnObject(ReturnType, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>object</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1ae981d9226d812c444fc16aa82755a483" kindref="member">createReturnObject(ReturnType, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="100" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="206" bodyend="212"/>
        <references refid="struct_return_object_1a79da4f77fc9fa5dfeefbd750b0caddb0" compoundref="interpreter_8h" startline="73">ReturnObject::type</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64ccae089a7a50c323705d8c848d0308ca41b" compoundref="interpreter_8h" startline="65">RT_RETURN</references>
        <references refid="struct_return_object_1a52bd553a4949e0f49f377778402e2cbe" compoundref="interpreter_8h" startline="74">ReturnObject::value</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
        <definition>ScopeObject* createScopeObject</definition>
        <argsstring>(ScopeObject *)</argsstring>
        <name>createScopeObject</name>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>parent</defname>
          <briefdescription><para>A pointer to the parent ScopeObject. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a ScopeObject structure.</para><para><simplesect kind="pre"><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref> or is <computeroutput>NULL</computeroutput> if creating the root parent.</para></simplesect>
<simplesect kind="return"><para>A pointer to a ScopeObject structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a2d477a01d56c2e2aed64ad096c6d5417" kindref="member">deleteScopeObject(ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="101" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="226" bodyend="243"/>
        <references refid="structscopeobject_1ae41fb9156685d42f9b30c1871603c87b" compoundref="interpreter_8h" startline="85">scopeobject::impvar</references>
        <references refid="structscopeobject_1af8cb43430f28df6a4935d53ec1ac470b" compoundref="interpreter_8h" startline="86">scopeobject::numvals</references>
        <references refid="structscopeobject_1afcb602890b0a936c43648cb06691c19d" compoundref="interpreter_8h" startline="87">scopeobject::names</references>
        <references refid="structscopeobject_1a91d5a05990706ccd0dd32356fbb534ba" compoundref="interpreter_8h" startline="88">scopeobject::values</references>
        <references refid="structscopeobject_1aa2e35271cf1ca0ecb0f8d256f6d3f78e" compoundref="interpreter_8h" startline="84">scopeobject::parent</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a2d477a01d56c2e2aed64ad096c6d5417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteScopeObject</definition>
        <argsstring>(ScopeObject *)</argsstring>
        <name>deleteScopeObject</name>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>The ScopeObject structure to delete. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a ScopeObject structure.</para><para><simplesect kind="pre"><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>scope</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="102" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="255" bodyend="268"/>
        <references refid="structscopeobject_1af8cb43430f28df6a4935d53ec1ac470b" compoundref="interpreter_8h" startline="86">scopeobject::numvals</references>
        <references refid="structscopeobject_1a91d5a05990706ccd0dd32356fbb534ba" compoundref="interpreter_8h" startline="88">scopeobject::values</references>
        <references refid="structscopeobject_1afcb602890b0a936c43648cb06691c19d" compoundref="interpreter_8h" startline="87">scopeobject::names</references>
        <references refid="structscopeobject_1ae41fb9156685d42f9b30c1871603c87b" compoundref="interpreter_8h" startline="85">scopeobject::impvar</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1aad6397fe13daa28d2d902c4f75434360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* getScopeValue</definition>
        <argsstring>(ScopeObject *, IdentifierNode *)</argsstring>
        <name>getScopeValue</name>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>The ScopeObject structure to check. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> *</type>
          <defname>target</defname>
          <briefdescription><para>The name of the value to find. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves a named <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure from a ScopeObject structure, traversing its parents if necessary.</para><para><simplesect kind="pre"><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>. </para><simplesectsep/><para><emphasis>target</emphasis> was created by createIdentifierNode(char *).</para></simplesect>
<simplesect kind="return"><para>A pointer to the stored <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure named by <emphasis>target</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>target</emphasis> could not be found in <emphasis>scope</emphasis>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a6c0c01a1af125b47b7ee6c99a944abb6" kindref="member">getLocalScopeValue(ScopeObject *, IdentifierNode *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="103" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="285" bodyend="299"/>
        <references refid="structscopeobject_1af8cb43430f28df6a4935d53ec1ac470b" compoundref="interpreter_8h" startline="86">scopeobject::numvals</references>
        <references refid="structscopeobject_1afcb602890b0a936c43648cb06691c19d" compoundref="interpreter_8h" startline="87">scopeobject::names</references>
        <references refid="struct_identifier_node_1a3e2473c7676f22d1f3beebe66f0a7688" compoundref="tools_2lci_2lciframework_2parser_8h" startline="185">IdentifierNode::image</references>
        <references refid="structscopeobject_1a91d5a05990706ccd0dd32356fbb534ba" compoundref="interpreter_8h" startline="88">scopeobject::values</references>
        <references refid="structscopeobject_1aa2e35271cf1ca0ecb0f8d256f6d3f78e" compoundref="interpreter_8h" startline="84">scopeobject::parent</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a6c0c01a1af125b47b7ee6c99a944abb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* getLocalScopeValue</definition>
        <argsstring>(ScopeObject *, IdentifierNode *)</argsstring>
        <name>getLocalScopeValue</name>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>The ScopeObject structure to check. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> *</type>
          <defname>target</defname>
          <briefdescription><para>The name of the value to find. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves a named <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure from a ScopeObject structure without traversing through its parents.</para><para><simplesect kind="pre"><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>. </para><simplesectsep/><para><emphasis>target</emphasis> was created by createIdentifierNode(char *).</para></simplesect>
<simplesect kind="return"><para>A pointer to the stored <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure named by <emphasis>target</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>target</emphasis> could not be found in <emphasis>scope</emphasis>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1aad6397fe13daa28d2d902c4f75434360" kindref="member">getScopeValue(ScopeObject *, IdentifierNode *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="104" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="316" bodyend="326"/>
        <references refid="structscopeobject_1af8cb43430f28df6a4935d53ec1ac470b" compoundref="interpreter_8h" startline="86">scopeobject::numvals</references>
        <references refid="structscopeobject_1afcb602890b0a936c43648cb06691c19d" compoundref="interpreter_8h" startline="87">scopeobject::names</references>
        <references refid="struct_identifier_node_1a3e2473c7676f22d1f3beebe66f0a7688" compoundref="tools_2lci_2lciframework_2parser_8h" startline="185">IdentifierNode::image</references>
        <references refid="structscopeobject_1a91d5a05990706ccd0dd32356fbb534ba" compoundref="interpreter_8h" startline="88">scopeobject::values</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* createScopeValue</definition>
        <argsstring>(ScopeObject *, IdentifierNode *)</argsstring>
        <name>createScopeValue</name>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>The ScopeObject structure to add a value to. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> *</type>
          <defname>target</defname>
          <briefdescription><para>The name of the value to add. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new, nil, named <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure in a ScopeObject structure.</para><para><simplesect kind="pre"><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>. </para><simplesectsep/><para><emphasis>target</emphasis> was created by createIdentifierNode(char *).</para></simplesect>
<simplesect kind="return"><para>A pointer to the newly created <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure named by <emphasis>target</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>realloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1aad6397fe13daa28d2d902c4f75434360" kindref="member">getScopeValue(ScopeObject *, IdentifierNode *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a6c0c01a1af125b47b7ee6c99a944abb6" kindref="member">getLocalScopeValue(ScopeObject *, IdentifierNode *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="105" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="343" bodyend="367"/>
        <references refid="structscopeobject_1af8cb43430f28df6a4935d53ec1ac470b" compoundref="interpreter_8h" startline="86">scopeobject::numvals</references>
        <references refid="structscopeobject_1afcb602890b0a936c43648cb06691c19d" compoundref="interpreter_8h" startline="87">scopeobject::names</references>
        <references refid="structscopeobject_1a91d5a05990706ccd0dd32356fbb534ba" compoundref="interpreter_8h" startline="88">scopeobject::values</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* updateScopeValue</definition>
        <argsstring>(ScopeObject *, IdentifierNode *, ValueObject *)</argsstring>
        <name>updateScopeValue</name>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to the ScopeObject structure to update. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> *</type>
          <defname>target</defname>
          <briefdescription><para>A pointer to the <ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> structure containing the name of the value to update. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>value</defname>
          <briefdescription><para>A pointer to the <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the value to copy for the update. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Updates a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure named by an <ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> structure in a ScopeObject structure.</para><para><simplesect kind="pre"><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>. </para><simplesectsep/><para><emphasis>target</emphasis> was created by createIdentifierNode(char *). </para><simplesectsep/><para>The value named by <emphasis>target</emphasis> was created by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref>. </para><simplesectsep/><para><emphasis>value</emphasis> was created by either <ref refid="interpreter_8h_1a494ae7c921c6e7994e07d927f1dd619b" kindref="member">createNilValueObject(void)</ref>, <ref refid="interpreter_8h_1a83170df5413454d013a2624ffde40134" kindref="member">createBooleanValueObject(int)</ref>, <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>, <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>, <ref refid="interpreter_8h_1a9c7124b50cb92fb20edc6c2963a5f2b8" kindref="member">createStringValueObject(char *)</ref>, or copied with <ref refid="interpreter_8h_1a030b889cd6487c903b7e12e69268cdc4" kindref="member">copyValueObject(ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to the updated <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure named by <emphasis>target</emphasis> (will be the same as <emphasis>val</emphasis>).</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>target</emphasis> could not be found in <emphasis>scope</emphasis>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1aad6397fe13daa28d2d902c4f75434360" kindref="member">getScopeValue(ScopeObject *, IdentifierNode *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a6c0c01a1af125b47b7ee6c99a944abb6" kindref="member">getLocalScopeValue(ScopeObject *, IdentifierNode *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="106" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="389" bodyend="413"/>
        <references refid="structscopeobject_1af8cb43430f28df6a4935d53ec1ac470b" compoundref="interpreter_8h" startline="86">scopeobject::numvals</references>
        <references refid="structscopeobject_1afcb602890b0a936c43648cb06691c19d" compoundref="interpreter_8h" startline="87">scopeobject::names</references>
        <references refid="struct_identifier_node_1a3e2473c7676f22d1f3beebe66f0a7688" compoundref="tools_2lci_2lciframework_2parser_8h" startline="185">IdentifierNode::image</references>
        <references refid="structscopeobject_1a91d5a05990706ccd0dd32356fbb534ba" compoundref="interpreter_8h" startline="88">scopeobject::values</references>
        <references refid="structscopeobject_1aa2e35271cf1ca0ecb0f8d256f6d3f78e" compoundref="interpreter_8h" startline="84">scopeobject::parent</references>
        <references refid="struct_identifier_node_1a3e2e04a380b98e30c1227ae747edbe18" compoundref="tools_2lci_2lciframework_2parser_8h" startline="186">IdentifierNode::fname</references>
        <references refid="struct_identifier_node_1a64ed52f14bcfabff321d105e0a54648d" compoundref="tools_2lci_2lciframework_2parser_8h" startline="187">IdentifierNode::line</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1af4fc557b0414d545f179a2eaa80a1a3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int isNumString</definition>
        <argsstring>(const char *)</argsstring>
        <name>isNumString</name>
        <param>
          <type>const char *</type>
          <defname>stringdata</defname>
          <briefdescription><para>The array of characters to check the format of. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if a string of characters follows the format for a number.</para><para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>The string of characters is not a number. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>The string of characters is a number. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="107" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="419" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a3bcb2030a3649910e8c2f5e073acf436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int isHexString</definition>
        <argsstring>(const char *)</argsstring>
        <name>isHexString</name>
        <param>
          <type>const char *</type>
          <defname>stringdata</defname>
          <briefdescription><para>The array of characters to check the format of. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if a string of characters follows the format for a hexadecimal number.</para><para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>The string of characters is not a hexadecimal number. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>The string of characters is a hexadecimal number. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="108" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="440" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a9da4535836163318aac4d7d2eb03a2d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* castBooleanExplicit</definition>
        <argsstring>(ValueObject *, ScopeObject *)</argsstring>
        <name>castBooleanExplicit</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>The <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure to cast. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>The ScopeObject structure to use for variable interpolation. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Casts the contents of a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure to boolean type in an explicit context. Casting is not done directly to the <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure pointed to by <emphasis>node</emphasis>, instead, it is performed on a copy of that structure, which is what is returned.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by either <ref refid="interpreter_8h_1a494ae7c921c6e7994e07d927f1dd619b" kindref="member">createNilValueObject(void)</ref>, <ref refid="interpreter_8h_1a83170df5413454d013a2624ffde40134" kindref="member">createBooleanValueObject(int)</ref>, <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>, <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>, <ref refid="interpreter_8h_1a9c7124b50cb92fb20edc6c2963a5f2b8" kindref="member">createStringValueObject(char *)</ref>, or copied with <ref refid="interpreter_8h_1a030b889cd6487c903b7e12e69268cdc4" kindref="member">copyValueObject(ValueObject *)</ref>. </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure with a copy of the contents of <emphasis>node</emphasis>, cast to boolean type.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred while casting.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1aa211d313e27c2f081edc2309a4acb020" kindref="member">castIntegerExplicit(ValueObject *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab8aff5e3c1456ad85bf55cc816a84a87" kindref="member">castFloatExplicit(ValueObject *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a392cb43c47522cc46d70df0f673b73f6" kindref="member">castStringExplicit(ValueObject *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="109" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="600" bodyend="628"/>
        <references refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" compoundref="interpreter_8h" startline="56">ValueObject::type</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a523067b7870725372ce9aa1399a8abba" compoundref="interpreter_8h" startline="35">VT_NIL</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1aa7db6a14e86242b201db0d4993d61862" compoundref="interpreter_8h" startline="33">VT_BOOLEAN</references>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a656b93fb21c4267dae17573f6129fe93" compoundref="interpreter_8h" startline="31">VT_INTEGER</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a361c0d0ff5ba71f4ddd9633d3f79635f" compoundref="interpreter_8h" startline="32">VT_FLOAT</references>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a7d0ada66d85d8eb695f3bdd2e48b5976" compoundref="interpreter_8h" startline="34">VT_STRING</references>
        <references refid="interpreter_8h_1a2267d4f53f5d3d35446667cc2b26f392" compoundref="interpreter_8h" startline="27">getString</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1aa211d313e27c2f081edc2309a4acb020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* castIntegerExplicit</definition>
        <argsstring>(ValueObject *, ScopeObject *)</argsstring>
        <name>castIntegerExplicit</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>The <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure to cast. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>The ScopeObject structure to use for variable interpolation. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Casts the contents of a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure to integer type in an explicit context. Casting is not done directly to the <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure pointed to by <emphasis>node</emphasis>, instead, it is performed on a copy of that structure, which is what is returned.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by either <ref refid="interpreter_8h_1a494ae7c921c6e7994e07d927f1dd619b" kindref="member">createNilValueObject(void)</ref>, <ref refid="interpreter_8h_1a83170df5413454d013a2624ffde40134" kindref="member">createBooleanValueObject(int)</ref>, <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>, <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>, <ref refid="interpreter_8h_1a9c7124b50cb92fb20edc6c2963a5f2b8" kindref="member">createStringValueObject(char *)</ref>, or copied with <ref refid="interpreter_8h_1a030b889cd6487c903b7e12e69268cdc4" kindref="member">copyValueObject(ValueObject *)</ref>. </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure with a copy of the contents of <emphasis>node</emphasis>, cast to integer type.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred while casting.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a9da4535836163318aac4d7d2eb03a2d2" kindref="member">castBooleanExplicit(ValueObject *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab8aff5e3c1456ad85bf55cc816a84a87" kindref="member">castFloatExplicit(ValueObject *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a392cb43c47522cc46d70df0f673b73f6" kindref="member">castStringExplicit(ValueObject *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="110" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="648" bodyend="689"/>
        <references refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" compoundref="interpreter_8h" startline="56">ValueObject::type</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a523067b7870725372ce9aa1399a8abba" compoundref="interpreter_8h" startline="35">VT_NIL</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1aa7db6a14e86242b201db0d4993d61862" compoundref="interpreter_8h" startline="33">VT_BOOLEAN</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a656b93fb21c4267dae17573f6129fe93" compoundref="interpreter_8h" startline="31">VT_INTEGER</references>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a361c0d0ff5ba71f4ddd9633d3f79635f" compoundref="interpreter_8h" startline="32">VT_FLOAT</references>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a7d0ada66d85d8eb695f3bdd2e48b5976" compoundref="interpreter_8h" startline="34">VT_STRING</references>
        <references refid="interpreter_8h_1a2267d4f53f5d3d35446667cc2b26f392" compoundref="interpreter_8h" startline="27">getString</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1ab8aff5e3c1456ad85bf55cc816a84a87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* castFloatExplicit</definition>
        <argsstring>(ValueObject *, ScopeObject *)</argsstring>
        <name>castFloatExplicit</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>The <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure to cast. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>The ScopeObject structure to use for variable interpolation. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Casts the contents of a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure to floating point decimal type in an explicit context. Casting is not done directly to the <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure pointed to by <emphasis>node</emphasis>, instead, it is performed on a copy of that structure, which is what is returned.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by either <ref refid="interpreter_8h_1a494ae7c921c6e7994e07d927f1dd619b" kindref="member">createNilValueObject(void)</ref>, <ref refid="interpreter_8h_1a83170df5413454d013a2624ffde40134" kindref="member">createBooleanValueObject(int)</ref>, <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>, <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>, <ref refid="interpreter_8h_1a9c7124b50cb92fb20edc6c2963a5f2b8" kindref="member">createStringValueObject(char *)</ref>, or copied with <ref refid="interpreter_8h_1a030b889cd6487c903b7e12e69268cdc4" kindref="member">copyValueObject(ValueObject *)</ref>. </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure with a copy of the contents of <emphasis>node</emphasis>, cast to floating point decimal type.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred while casting.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a9da4535836163318aac4d7d2eb03a2d2" kindref="member">castBooleanExplicit(ValueObject *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1aa211d313e27c2f081edc2309a4acb020" kindref="member">castIntegerExplicit(ValueObject *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a392cb43c47522cc46d70df0f673b73f6" kindref="member">castStringExplicit(ValueObject *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="111" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="709" bodyend="750"/>
        <references refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" compoundref="interpreter_8h" startline="56">ValueObject::type</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a523067b7870725372ce9aa1399a8abba" compoundref="interpreter_8h" startline="35">VT_NIL</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1aa7db6a14e86242b201db0d4993d61862" compoundref="interpreter_8h" startline="33">VT_BOOLEAN</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a656b93fb21c4267dae17573f6129fe93" compoundref="interpreter_8h" startline="31">VT_INTEGER</references>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a361c0d0ff5ba71f4ddd9633d3f79635f" compoundref="interpreter_8h" startline="32">VT_FLOAT</references>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a7d0ada66d85d8eb695f3bdd2e48b5976" compoundref="interpreter_8h" startline="34">VT_STRING</references>
        <references refid="interpreter_8h_1a2267d4f53f5d3d35446667cc2b26f392" compoundref="interpreter_8h" startline="27">getString</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a392cb43c47522cc46d70df0f673b73f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* castStringExplicit</definition>
        <argsstring>(ValueObject *, ScopeObject *)</argsstring>
        <name>castStringExplicit</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>The <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure to cast. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>The ScopeObject structure to use for variable interpolation. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Casts the contents of a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure to string type in an explicit context. Casting is not done to directly the <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure pointed to by <emphasis>node</emphasis>, instead, it is performed on a copy of that structure, which is what is returned.</para><para><simplesect kind="note"><para><emphasis>scope</emphasis> is used to resolve variable interpolation within the string before casting it. Therefore, a simple way to interpolate the variables within a string is to call this function with it.</para></simplesect>
<simplesect kind="pre"><para><emphasis>node</emphasis> was created by either <ref refid="interpreter_8h_1a494ae7c921c6e7994e07d927f1dd619b" kindref="member">createNilValueObject(void)</ref>, <ref refid="interpreter_8h_1a83170df5413454d013a2624ffde40134" kindref="member">createBooleanValueObject(int)</ref>, <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>, <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>, <ref refid="interpreter_8h_1a9c7124b50cb92fb20edc6c2963a5f2b8" kindref="member">createStringValueObject(char *)</ref>, or copied with <ref refid="interpreter_8h_1a030b889cd6487c903b7e12e69268cdc4" kindref="member">copyValueObject(ValueObject *)</ref>. </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure with a copy of the contents of <emphasis>node</emphasis>, cast to string type.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred while casting.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a9da4535836163318aac4d7d2eb03a2d2" kindref="member">castBooleanExplicit(ValueObject *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1aa211d313e27c2f081edc2309a4acb020" kindref="member">castIntegerExplicit(ValueObject *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab8aff5e3c1456ad85bf55cc816a84a87" kindref="member">castFloatExplicit(ValueObject *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para><simplesect kind="note"><para>The spec does not define how TROOFs may be cast to YARNs. </para></simplesect>
</para>        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="112" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="774" bodyend="971"/>
        <references refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" compoundref="interpreter_8h" startline="56">ValueObject::type</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a523067b7870725372ce9aa1399a8abba" compoundref="interpreter_8h" startline="35">VT_NIL</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1aa7db6a14e86242b201db0d4993d61862" compoundref="interpreter_8h" startline="33">VT_BOOLEAN</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a656b93fb21c4267dae17573f6129fe93" compoundref="interpreter_8h" startline="31">VT_INTEGER</references>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a361c0d0ff5ba71f4ddd9633d3f79635f" compoundref="interpreter_8h" startline="32">VT_FLOAT</references>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a7d0ada66d85d8eb695f3bdd2e48b5976" compoundref="interpreter_8h" startline="34">VT_STRING</references>
        <references refid="interpreter_8h_1a2267d4f53f5d3d35446667cc2b26f392" compoundref="interpreter_8h" startline="27">getString</references>
        <references refid="structscopeobject_1ae41fb9156685d42f9b30c1871603c87b" compoundref="interpreter_8h" startline="85">scopeobject::impvar</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a17aa2b55578f49903859a41bb1d2dcba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* castBooleanImplicit</definition>
        <argsstring>(ValueObject *, ScopeObject *)</argsstring>
        <name>castBooleanImplicit</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>The <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure to cast. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>The ScopeObject structure to use for variable interpolation. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Casts the contents of a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure to boolean type in an implicit context. Casting is not done directly to the <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure pointed to by <emphasis>node</emphasis>, instead, it is performed on a copy of that structure, which is what is returned.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by either <ref refid="interpreter_8h_1a494ae7c921c6e7994e07d927f1dd619b" kindref="member">createNilValueObject(void)</ref>, <ref refid="interpreter_8h_1a83170df5413454d013a2624ffde40134" kindref="member">createBooleanValueObject(int)</ref>, <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>, <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>, <ref refid="interpreter_8h_1a9c7124b50cb92fb20edc6c2963a5f2b8" kindref="member">createStringValueObject(char *)</ref>, or copied with <ref refid="interpreter_8h_1a030b889cd6487c903b7e12e69268cdc4" kindref="member">copyValueObject(ValueObject *)</ref>. </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure with a copy of the contents of <emphasis>node</emphasis>, cast to boolean type.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred while casting.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1abbf91182fe9db4f0e2e3c4472f0ad431" kindref="member">castIntegerImplicit(ValueObject *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a4132ca66d51545ce6ae5b3287070a50a" kindref="member">castFloatImplicit(ValueObject *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a58e25c56eb8e00ea5b5a2eaca71733b0" kindref="member">castStringImplicit(ValueObject *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="113" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="484" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1abbf91182fe9db4f0e2e3c4472f0ad431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* castIntegerImplicit</definition>
        <argsstring>(ValueObject *, ScopeObject *)</argsstring>
        <name>castIntegerImplicit</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>The <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure to cast. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>The ScopeObject structure to use for variable interpolation. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Casts the contents of a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure to integer type in an implicit context. Casting is not done directly to the <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure pointed to by <emphasis>node</emphasis>, instead, it is performed on a copy of that structure, which is what is returned.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by either <ref refid="interpreter_8h_1a494ae7c921c6e7994e07d927f1dd619b" kindref="member">createNilValueObject(void)</ref>, <ref refid="interpreter_8h_1a83170df5413454d013a2624ffde40134" kindref="member">createBooleanValueObject(int)</ref>, <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>, <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>, <ref refid="interpreter_8h_1a9c7124b50cb92fb20edc6c2963a5f2b8" kindref="member">createStringValueObject(char *)</ref>, or copied with <ref refid="interpreter_8h_1a030b889cd6487c903b7e12e69268cdc4" kindref="member">copyValueObject(ValueObject *)</ref>. </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure with a copy of the contents of <emphasis>node</emphasis>, cast to integer type.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred while casting.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a17aa2b55578f49903859a41bb1d2dcba" kindref="member">castBooleanImplicit(ValueObject *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a4132ca66d51545ce6ae5b3287070a50a" kindref="member">castFloatImplicit(ValueObject *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a58e25c56eb8e00ea5b5a2eaca71733b0" kindref="member">castStringImplicit(ValueObject *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="114" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="509" bodyend="518"/>
        <references refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" compoundref="interpreter_8h" startline="56">ValueObject::type</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a523067b7870725372ce9aa1399a8abba" compoundref="interpreter_8h" startline="35">VT_NIL</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a4132ca66d51545ce6ae5b3287070a50a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* castFloatImplicit</definition>
        <argsstring>(ValueObject *, ScopeObject *)</argsstring>
        <name>castFloatImplicit</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>The <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure to cast. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>The ScopeObject structure to use for variable interpolation. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Casts the contents of a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure to floating point decimal type in an implicit context. Casting is not done directly to the <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure pointed to by <emphasis>node</emphasis>, instead, it is performed on a copy of that structure, which is what is returned.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by either <ref refid="interpreter_8h_1a494ae7c921c6e7994e07d927f1dd619b" kindref="member">createNilValueObject(void)</ref>, <ref refid="interpreter_8h_1a83170df5413454d013a2624ffde40134" kindref="member">createBooleanValueObject(int)</ref>, <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>, <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>, <ref refid="interpreter_8h_1a9c7124b50cb92fb20edc6c2963a5f2b8" kindref="member">createStringValueObject(char *)</ref>, or copied with <ref refid="interpreter_8h_1a030b889cd6487c903b7e12e69268cdc4" kindref="member">copyValueObject(ValueObject *)</ref>. </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure with a copy of the contents of <emphasis>node</emphasis>, cast to floating point decimal type.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred while casting.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a17aa2b55578f49903859a41bb1d2dcba" kindref="member">castBooleanImplicit(ValueObject *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1abbf91182fe9db4f0e2e3c4472f0ad431" kindref="member">castIntegerImplicit(ValueObject *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a58e25c56eb8e00ea5b5a2eaca71733b0" kindref="member">castStringImplicit(ValueObject *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="115" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="538" bodyend="547"/>
        <references refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" compoundref="interpreter_8h" startline="56">ValueObject::type</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a523067b7870725372ce9aa1399a8abba" compoundref="interpreter_8h" startline="35">VT_NIL</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a58e25c56eb8e00ea5b5a2eaca71733b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* castStringImplicit</definition>
        <argsstring>(ValueObject *, ScopeObject *)</argsstring>
        <name>castStringImplicit</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>The <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure to cast. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>The ScopeObject structure to use for variable interpolation. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Casts the contents of a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure to string type in an implicit context. Casting is not done directly to the <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure pointed to by <emphasis>node</emphasis>, instead, it is performed on a copy of that structure, which is what is returned.</para><para><simplesect kind="note"><para><emphasis>scope</emphasis> is used to resolve variable interpolation within the string before casting it. Therefore, a simple way to interpolate the variables within a string is to call this function with it.</para></simplesect>
<simplesect kind="pre"><para><emphasis>node</emphasis> was created by either <ref refid="interpreter_8h_1a494ae7c921c6e7994e07d927f1dd619b" kindref="member">createNilValueObject(void)</ref>, <ref refid="interpreter_8h_1a83170df5413454d013a2624ffde40134" kindref="member">createBooleanValueObject(int)</ref>, <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>, <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>, <ref refid="interpreter_8h_1a9c7124b50cb92fb20edc6c2963a5f2b8" kindref="member">createStringValueObject(char *)</ref>, or copied with <ref refid="interpreter_8h_1a030b889cd6487c903b7e12e69268cdc4" kindref="member">copyValueObject(ValueObject *)</ref>. </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure with a copy of the contents of <emphasis>node</emphasis>, cast to string type.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred while casting.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a17aa2b55578f49903859a41bb1d2dcba" kindref="member">castBooleanImplicit(ValueObject *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1abbf91182fe9db4f0e2e3c4472f0ad431" kindref="member">castIntegerImplicit(ValueObject *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a4132ca66d51545ce6ae5b3287070a50a" kindref="member">castFloatImplicit(ValueObject *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="116" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="571" bodyend="580"/>
        <references refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" compoundref="interpreter_8h" startline="56">ValueObject::type</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a523067b7870725372ce9aa1399a8abba" compoundref="interpreter_8h" startline="35">VT_NIL</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a88e238ecbd85b9cfce3d34ad7025774d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* interpretExprNode</definition>
        <argsstring>(ExprNode *, ScopeObject *)</argsstring>
        <name>interpretExprNode</name>
        <param>
          <type><ref refid="struct_expr_node" kindref="compound">ExprNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>A pointer to an <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to a ScopeObject structure to evaluate <emphasis>node</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets the contents of an <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by parseExprNode(Token ***, FunctionTable *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure with the evaluated contents of <emphasis>node</emphasis> in the scope <emphasis>scope</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a8243b0f033288a08ae06a1fc17c46303" kindref="member">interpretStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a7bb6c3c2339270c356e1aaaf44c52cf7" kindref="member">interpretStmtNodeList(StmtNodeList *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a35a65f719caa550f2d615abeb26a2200" kindref="member">interpretBlockNode(BlockNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a30be2c4c505c03683a6a3bdc4f7164aa" kindref="member">interpretMainNode(MainNode *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="117" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2480" bodyend="2484"/>
        <references refid="struct_expr_node_1ab5f285d791068c69dbca0610d8c36c99" compoundref="tools_2lci_2lciframework_2parser_8h" startline="254">ExprNode::type</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a8243b0f033288a08ae06a1fc17c46303" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_return_object" kindref="compound">ReturnObject</ref> *</type>
        <definition>ReturnObject* interpretStmtNode</definition>
        <argsstring>(StmtNode *, ScopeObject *)</argsstring>
        <name>interpretStmtNode</name>
        <param>
          <type><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>A pointer to a <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to a ScopeObject structure to evaluate <emphasis>node</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets the contents of a <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by parseStmtNode(Token ***, FunctionTable *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_return_object" kindref="compound">ReturnObject</ref> structure with the return state of the interpreted <emphasis>node</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a88e238ecbd85b9cfce3d34ad7025774d" kindref="member">interpretExprNode(ExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a7bb6c3c2339270c356e1aaaf44c52cf7" kindref="member">interpretStmtNodeList(StmtNodeList *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a35a65f719caa550f2d615abeb26a2200" kindref="member">interpretBlockNode(BlockNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a30be2c4c505c03683a6a3bdc4f7164aa" kindref="member">interpretMainNode(MainNode *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="118" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="3204" bodyend="3208"/>
        <references refid="struct_stmt_node_1a1a1a8ff13773a99c9344f5392cabfa13" compoundref="tools_2lci_2lciframework_2parser_8h" startline="223">StmtNode::type</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a7bb6c3c2339270c356e1aaaf44c52cf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_return_object" kindref="compound">ReturnObject</ref> *</type>
        <definition>ReturnObject* interpretStmtNodeList</definition>
        <argsstring>(StmtNodeList *, ScopeObject *)</argsstring>
        <name>interpretStmtNodeList</name>
        <param>
          <type><ref refid="struct_stmt_node_list" kindref="compound">StmtNodeList</ref> *</type>
          <defname>list</defname>
          <briefdescription><para>A pointer to the <ref refid="struct_stmt_node_list" kindref="compound">StmtNodeList</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to the ScopeObject structure to evaluate <emphasis>list</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets the contents of a <ref refid="struct_stmt_node_list" kindref="compound">StmtNodeList</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>list</emphasis> was created by createStmtNodeList(void) and contains contents added by addStmtNode(StmtNodeList *, StmtNode *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_return_object" kindref="compound">ReturnObject</ref> structure with the return state of the interpreted <emphasis>list</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a88e238ecbd85b9cfce3d34ad7025774d" kindref="member">interpretExprNode(ExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8243b0f033288a08ae06a1fc17c46303" kindref="member">interpretStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a35a65f719caa550f2d615abeb26a2200" kindref="member">interpretBlockNode(BlockNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a30be2c4c505c03683a6a3bdc4f7164aa" kindref="member">interpretMainNode(MainNode *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="119" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="3227" bodyend="3245"/>
        <references refid="struct_stmt_node_list_1a9036accbc55ef84c8f35058c6536fcd9" compoundref="tools_2lci_2lciframework_2parser_8h" startline="234">StmtNodeList::num</references>
        <references refid="struct_stmt_node_list_1a2e9faa29350794b5434f3e2e59d048a7" compoundref="tools_2lci_2lciframework_2parser_8h" startline="235">StmtNodeList::stmts</references>
        <references refid="struct_return_object_1a79da4f77fc9fa5dfeefbd750b0caddb0" compoundref="interpreter_8h" startline="73">ReturnObject::type</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64ccaa22f8c8892450d4ee8806a80a7e12b64" compoundref="interpreter_8h" startline="64">RT_BREAK</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64ccae089a7a50c323705d8c848d0308ca41b" compoundref="interpreter_8h" startline="65">RT_RETURN</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cca5799e236aeee53b6fe285dc67cb42f00" compoundref="interpreter_8h" startline="63">RT_DEFAULT</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a35a65f719caa550f2d615abeb26a2200" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_return_object" kindref="compound">ReturnObject</ref> *</type>
        <definition>ReturnObject* interpretBlockNode</definition>
        <argsstring>(BlockNode *, ScopeObject *)</argsstring>
        <name>interpretBlockNode</name>
        <param>
          <type><ref refid="struct_block_node" kindref="compound">BlockNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>A pointer to a <ref refid="struct_block_node" kindref="compound">BlockNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to a ScopeObject structure to evaluate <emphasis>node</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets the contents of a <ref refid="struct_block_node" kindref="compound">BlockNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by parseBlockNode(Token ***, FunctionTable *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_return_object" kindref="compound">ReturnObject</ref> structure with the return state of the interpreted <emphasis>node</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a88e238ecbd85b9cfce3d34ad7025774d" kindref="member">interpretExprNode(ExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8243b0f033288a08ae06a1fc17c46303" kindref="member">interpretStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a7bb6c3c2339270c356e1aaaf44c52cf7" kindref="member">interpretStmtNodeList(StmtNodeList *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a30be2c4c505c03683a6a3bdc4f7164aa" kindref="member">interpretMainNode(MainNode *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="120" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="3263" bodyend="3272"/>
        <references refid="struct_block_node_1a5d918092ee6d41f6be62dff435aede89" compoundref="tools_2lci_2lciframework_2parser_8h" startline="274">BlockNode::stmts</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a30be2c4c505c03683a6a3bdc4f7164aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int interpretMainNode</definition>
        <argsstring>(MainNode *)</argsstring>
        <name>interpretMainNode</name>
        <param>
          <type><ref refid="struct_main_node" kindref="compound">MainNode</ref> *</type>
          <defname>main</defname>
          <briefdescription><para>A pointer to the <ref refid="struct_main_node" kindref="compound">MainNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets the contents of a <ref refid="struct_main_node" kindref="compound">MainNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by parseMainNode(Token **, FunctionTable *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>The return status of the interpreted <ref refid="struct_main_node" kindref="compound">MainNode</ref> structure.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>main</emphasis> was interpreted without any errors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred while interpreting <emphasis>main</emphasis>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a88e238ecbd85b9cfce3d34ad7025774d" kindref="member">interpretExprNode(ExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8243b0f033288a08ae06a1fc17c46303" kindref="member">interpretStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a7bb6c3c2339270c356e1aaaf44c52cf7" kindref="member">interpretStmtNodeList(StmtNodeList *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a35a65f719caa550f2d615abeb26a2200" kindref="member">interpretBlockNode(BlockNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="121" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="3290" bodyend="3298"/>
        <references refid="struct_main_node_1aee302d107abb16c48702c2699a58d49f" compoundref="tools_2lci_2lciframework_2parser_8h" startline="346">MainNode::block</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a27cedbf17b05209dea5559a175309a14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* interpretImpVarExprNode</definition>
        <argsstring>(ExprNode *, ScopeObject *)</argsstring>
        <name>interpretImpVarExprNode</name>
        <param>
          <type><ref refid="struct_expr_node" kindref="compound">ExprNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>A pointer to an <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure with type set to ET_IMPVAR. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>Not used (see note). </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets an implicit variable expression.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createExprNode(ExprType type, void *expr) where <emphasis>type</emphasis> is ET_IMPVAR and <emphasis>expr</emphasis> is NULL. </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="note"><para><emphasis>node</emphasis> is not used by this function but is still included in its prototype to allow this function to be stored in a jump table for fast execution.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the value of the current scope&apos;s implicit variable.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a8836d5dd711beb5cd96336fe51cdc185" kindref="member">interpretCastExprNode(ExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1aeacd50079f0ce4daf99a11f922182c08" kindref="member">interpretFuncCallExprNode(ExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0f42bf997323efdae806c0bcf1c554d8" kindref="member">interpretIdentifierExprNode(ExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ad561e8b2aa21983e94b838f30337f099" kindref="member">interpretConstantExprNode(ExprNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="123" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="992" bodyend="997"/>
        <references refid="structscopeobject_1ae41fb9156685d42f9b30c1871603c87b" compoundref="interpreter_8h" startline="85">scopeobject::impvar</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a8836d5dd711beb5cd96336fe51cdc185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* interpretCastExprNode</definition>
        <argsstring>(ExprNode *, ScopeObject *)</argsstring>
        <name>interpretCastExprNode</name>
        <param>
          <type><ref refid="struct_expr_node" kindref="compound">ExprNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>A pointer to an <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure containing the <ref refid="struct_cast_expr_node" kindref="compound">CastExprNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to a ScopeObject structure to evaluate <emphasis>node</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets a cast expression.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createExprNode(ExprType type, void *expr) where <emphasis>type</emphasis> is ET_CAST and <emphasis>expr</emphasis> is a <ref refid="struct_cast_expr_node" kindref="compound">CastExprNode</ref> structure created by createCastExprNode(ExprNode *, TypeNode *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the result of the cast.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a27cedbf17b05209dea5559a175309a14" kindref="member">interpretImpVarExprNode(ExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1aeacd50079f0ce4daf99a11f922182c08" kindref="member">interpretFuncCallExprNode(ExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0f42bf997323efdae806c0bcf1c554d8" kindref="member">interpretIdentifierExprNode(ExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ad561e8b2aa21983e94b838f30337f099" kindref="member">interpretConstantExprNode(ExprNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="124" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1017" bodyend="1049"/>
        <references refid="struct_expr_node_1a2c6ff3dccfa2e543a46e01763adab3a8" compoundref="tools_2lci_2lciframework_2parser_8h" startline="255">ExprNode::expr</references>
        <references refid="struct_cast_expr_node_1a90d1ac82b5b4a63a6842fc4e33f4e3bb" compoundref="tools_2lci_2lciframework_2parser_8h" startline="471">CastExprNode::target</references>
        <references refid="struct_cast_expr_node_1a0198b8265e221f2a52609a2d117585ef" compoundref="tools_2lci_2lciframework_2parser_8h" startline="472">CastExprNode::newtype</references>
        <references refid="struct_type_node_1abd5fc196a6f39c15eb33e94eec269ac7" compoundref="tools_2lci_2lciframework_2parser_8h" startline="355">TypeNode::type</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1aeacd50079f0ce4daf99a11f922182c08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* interpretFuncCallExprNode</definition>
        <argsstring>(ExprNode *, ScopeObject *)</argsstring>
        <name>interpretFuncCallExprNode</name>
        <param>
          <type><ref refid="struct_expr_node" kindref="compound">ExprNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>A pointer to an <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure containing the <ref refid="struct_func_call_expr_node" kindref="compound">FuncCallExprNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to a ScopeObject structure to evaluate <emphasis>node</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets a function call expression.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createExprNode(ExprType type, void *expr) where <emphasis>type</emphasis> is ET_FUNCCALL and <emphasis>expr</emphasis> is a FunctionCallExprNode structure created by createFuncCallExprNode(FuncDefStmtNode *, ExprNodeList *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the return value of function.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a27cedbf17b05209dea5559a175309a14" kindref="member">interpretImpVarExprNode(ExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8836d5dd711beb5cd96336fe51cdc185" kindref="member">interpretCastExprNode(ExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0f42bf997323efdae806c0bcf1c554d8" kindref="member">interpretIdentifierExprNode(ExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ad561e8b2aa21983e94b838f30337f099" kindref="member">interpretConstantExprNode(ExprNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="125" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1069" bodyend="1123"/>
        <references refid="struct_expr_node_1a2c6ff3dccfa2e543a46e01763adab3a8" compoundref="tools_2lci_2lciframework_2parser_8h" startline="255">ExprNode::expr</references>
        <references refid="struct_func_call_expr_node_1aa2a85cf9427647c0e922221095c00e94" compoundref="tools_2lci_2lciframework_2parser_8h" startline="487">FuncCallExprNode::def</references>
        <references refid="struct_func_def_stmt_node_1a2a9f4d580b7252e5576873d2252a187a" compoundref="tools_2lci_2lciframework_2parser_8h" startline="325">FuncDefStmtNode::args</references>
        <references refid="struct_identifier_node_list_1a7ee19db1c4e05eafe5df277542e01dd1" compoundref="tools_2lci_2lciframework_2parser_8h" startline="197">IdentifierNodeList::num</references>
        <references refid="struct_identifier_node_list_1a61b371619c07f89846ae0780d5403dc0" compoundref="tools_2lci_2lciframework_2parser_8h" startline="198">IdentifierNodeList::ids</references>
        <references refid="struct_func_call_expr_node_1a559b2108d83b11b46584b85f6fd1b12b" compoundref="tools_2lci_2lciframework_2parser_8h" startline="488">FuncCallExprNode::args</references>
        <references refid="struct_expr_node_list_1a10ae95f2facec652ba79e0bb5c9298c1" compoundref="tools_2lci_2lciframework_2parser_8h" startline="266">ExprNodeList::exprs</references>
        <references refid="struct_func_def_stmt_node_1a9e50b6a41f7abe43b433fe4fd714b002" compoundref="tools_2lci_2lciframework_2parser_8h" startline="326">FuncDefStmtNode::body</references>
        <references refid="struct_block_node_1a5d918092ee6d41f6be62dff435aede89" compoundref="tools_2lci_2lciframework_2parser_8h" startline="274">BlockNode::stmts</references>
        <references refid="struct_return_object_1a79da4f77fc9fa5dfeefbd750b0caddb0" compoundref="interpreter_8h" startline="73">ReturnObject::type</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cca5799e236aeee53b6fe285dc67cb42f00" compoundref="interpreter_8h" startline="63">RT_DEFAULT</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64ccaa22f8c8892450d4ee8806a80a7e12b64" compoundref="interpreter_8h" startline="64">RT_BREAK</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64ccae089a7a50c323705d8c848d0308ca41b" compoundref="interpreter_8h" startline="65">RT_RETURN</references>
        <references refid="struct_return_object_1a52bd553a4949e0f49f377778402e2cbe" compoundref="interpreter_8h" startline="74">ReturnObject::value</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a0f42bf997323efdae806c0bcf1c554d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* interpretIdentifierExprNode</definition>
        <argsstring>(ExprNode *, ScopeObject *)</argsstring>
        <name>interpretIdentifierExprNode</name>
        <param>
          <type><ref refid="struct_expr_node" kindref="compound">ExprNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>A pointer to an <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure containing the <ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>Not used (see note). </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets an identifier expression.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createExprNode(ExprType type, void *expr) where <emphasis>type</emphasis> is ET_IDENTIFIER and <emphasis>expr</emphasis> is an <ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> structure created by createIdentifierNode(char *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="note"><para><emphasis>scope</emphasis> is not used by this function but is still included in its prototype to allow this function to be stored in a jump table for fast execution.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the return value of function.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a27cedbf17b05209dea5559a175309a14" kindref="member">interpretImpVarExprNode(ExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8836d5dd711beb5cd96336fe51cdc185" kindref="member">interpretCastExprNode(ExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1aeacd50079f0ce4daf99a11f922182c08" kindref="member">interpretFuncCallExprNode(ExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ad561e8b2aa21983e94b838f30337f099" kindref="member">interpretConstantExprNode(ExprNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="126" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1147" bodyend="1157"/>
        <references refid="struct_expr_node_1a2c6ff3dccfa2e543a46e01763adab3a8" compoundref="tools_2lci_2lciframework_2parser_8h" startline="255">ExprNode::expr</references>
        <references refid="struct_identifier_node_1a3e2e04a380b98e30c1227ae747edbe18" compoundref="tools_2lci_2lciframework_2parser_8h" startline="186">IdentifierNode::fname</references>
        <references refid="struct_identifier_node_1a64ed52f14bcfabff321d105e0a54648d" compoundref="tools_2lci_2lciframework_2parser_8h" startline="187">IdentifierNode::line</references>
        <references refid="struct_identifier_node_1a3e2473c7676f22d1f3beebe66f0a7688" compoundref="tools_2lci_2lciframework_2parser_8h" startline="185">IdentifierNode::image</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1ad561e8b2aa21983e94b838f30337f099" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* interpretConstantExprNode</definition>
        <argsstring>(ExprNode *, ScopeObject *)</argsstring>
        <name>interpretConstantExprNode</name>
        <param>
          <type><ref refid="struct_expr_node" kindref="compound">ExprNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>A pointer to an <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure containing the <ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>Not used (see note). </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets a constant expression.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createExprNode(ExprType type, void *expr) where <emphasis>type</emphasis> is ET_CONSTANT and <emphasis>expr</emphasis> is a <ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> structure created by either createBooleanConstantNode(int), createIntegerConstantNode(int), createFloatConstantNode(float), or createStringConstantNode(char *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="note"><para><emphasis>scope</emphasis> is not used by this function but is still included in its prototype to allow this function to be stored in a jump table for fast execution.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the return value of function.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a27cedbf17b05209dea5559a175309a14" kindref="member">interpretImpVarExprNode(ExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8836d5dd711beb5cd96336fe51cdc185" kindref="member">interpretCastExprNode(ExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1aeacd50079f0ce4daf99a11f922182c08" kindref="member">interpretFuncCallExprNode(ExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0f42bf997323efdae806c0bcf1c554d8" kindref="member">interpretIdentifierExprNode(ExprNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para><simplesect kind="note"><para>For efficiency, string interpolation should be performed by caller because it only needs to be performed when necessary. </para></simplesect>
</para>        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="127" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1182" bodyend="1208"/>
        <references refid="struct_expr_node_1a2c6ff3dccfa2e543a46e01763adab3a8" compoundref="tools_2lci_2lciframework_2parser_8h" startline="255">ExprNode::expr</references>
        <references refid="struct_constant_node_1ae0c5b58398f2ff9a476628ea34858893" compoundref="tools_2lci_2lciframework_2parser_8h" startline="313">ConstantNode::type</references>
        <references refid="struct_constant_node_1ae546bb49962906e06a965381014ea7ae" compoundref="tools_2lci_2lciframework_2parser_8h" startline="314">ConstantNode::data</references>
        <references refid="union_constant_data_1a2bd6e6fb99485a02c81794d2a3fc5a41" compoundref="tools_2lci_2lciframework_2parser_8h" startline="299">ConstantData::i</references>
        <references refid="union_constant_data_1a9c3282f50d2b4fb9752bb55fed6d1ed2" compoundref="tools_2lci_2lciframework_2parser_8h" startline="300">ConstantData::f</references>
        <references refid="union_constant_data_1aee1ab22b8dd076717f5de146f8939b46" compoundref="tools_2lci_2lciframework_2parser_8h" startline="301">ConstantData::s</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a7795828f9fd573ff3670ade6f6955b07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* interpretNotOpExprNode</definition>
        <argsstring>(OpExprNode *, ScopeObject *)</argsstring>
        <name>interpretNotOpExprNode</name>
        <param>
          <type><ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref> *</type>
          <defname>expr</defname>
          <briefdescription><para>A pointer to the <ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to the ScopeObject structure to evaluate <emphasis>expr</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets a logical NOT operation expression.</para><para><simplesect kind="pre"><para><emphasis>expr</emphasis> was created by createOpExprNode(OpType type, ExprNodeList *args) where <emphasis>type</emphasis> is OP_NOT and <emphasis>args</emphasis> was created by createExprNodeList(void) and populated with <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structures using addExprNode(ExprNodeList *, ExprNode *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="note"><para>Only the first element in <emphasis>args</emphasis> is considered.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the interpreted operation expression value.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1ac43fd9e88414ff9960db8a442ae9a0e8" kindref="member">interpretArithOpExprNode(OpExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ad0dc393a1a5f2ef0eb59742fe70f07d1" kindref="member">interpretBoolOpExprNode(OpExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab84fa97762a03da8689f763fc3165b41" kindref="member">interpretEqualityOpExprNode(OpExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a4f45d788f390ee7a01a9f7a13f512d03" kindref="member">interpretConcatOpExprNode(OpExprNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="129" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1230" bodyend="1250"/>
        <references refid="struct_op_expr_node_1a82d6f2c460a585ee3b0a46ce00ba186f" compoundref="tools_2lci_2lciframework_2parser_8h" startline="519">OpExprNode::args</references>
        <references refid="struct_expr_node_list_1a10ae95f2facec652ba79e0bb5c9298c1" compoundref="tools_2lci_2lciframework_2parser_8h" startline="266">ExprNodeList::exprs</references>
        <references refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" compoundref="interpreter_8h" startline="56">ValueObject::type</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1aa7db6a14e86242b201db0d4993d61862" compoundref="interpreter_8h" startline="33">VT_BOOLEAN</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a656b93fb21c4267dae17573f6129fe93" compoundref="interpreter_8h" startline="31">VT_INTEGER</references>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1ac43fd9e88414ff9960db8a442ae9a0e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* interpretArithOpExprNode</definition>
        <argsstring>(OpExprNode *, ScopeObject *)</argsstring>
        <name>interpretArithOpExprNode</name>
        <param>
          <type><ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref> *</type>
          <defname>expr</defname>
          <briefdescription><para>A pointer to the <ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to the ScopeObject structure to evaluate <emphasis>expr</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets an arithmetic operation expression.</para><para><simplesect kind="pre"><para><emphasis>expr</emphasis> was created by createOpExprNode(OpType type, ExprNodeList *args) where <emphasis>type</emphasis> is either OP_ADD, OP_SUB, OP_MULT, OP_DIV, or OP_MOD and <emphasis>args</emphasis> was created by createExprNodeList(void) and populated with <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structures using addExprNode(ExprNodeList *, ExprNode *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="note"><para>Only the first two elements in <emphasis>args</emphasis> are considered.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the interpreted operation expression value.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a7795828f9fd573ff3670ade6f6955b07" kindref="member">interpretNotOpExprNode(OpExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ad0dc393a1a5f2ef0eb59742fe70f07d1" kindref="member">interpretBoolOpExprNode(OpExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab84fa97762a03da8689f763fc3165b41" kindref="member">interpretEqualityOpExprNode(OpExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a4f45d788f390ee7a01a9f7a13f512d03" kindref="member">interpretConcatOpExprNode(OpExprNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="130" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1872" bodyend="1975"/>
        <references refid="struct_op_expr_node_1a82d6f2c460a585ee3b0a46ce00ba186f" compoundref="tools_2lci_2lciframework_2parser_8h" startline="519">OpExprNode::args</references>
        <references refid="struct_expr_node_list_1a10ae95f2facec652ba79e0bb5c9298c1" compoundref="tools_2lci_2lciframework_2parser_8h" startline="266">ExprNodeList::exprs</references>
        <references refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" compoundref="interpreter_8h" startline="56">ValueObject::type</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a523067b7870725372ce9aa1399a8abba" compoundref="interpreter_8h" startline="35">VT_NIL</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1aa7db6a14e86242b201db0d4993d61862" compoundref="interpreter_8h" startline="33">VT_BOOLEAN</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a656b93fb21c4267dae17573f6129fe93" compoundref="interpreter_8h" startline="31">VT_INTEGER</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a361c0d0ff5ba71f4ddd9633d3f79635f" compoundref="interpreter_8h" startline="32">VT_FLOAT</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a7d0ada66d85d8eb695f3bdd2e48b5976" compoundref="interpreter_8h" startline="34">VT_STRING</references>
        <references refid="interpreter_8h_1a2267d4f53f5d3d35446667cc2b26f392" compoundref="interpreter_8h" startline="27">getString</references>
        <references refid="struct_op_expr_node_1a69ff4baea505db8ed32f4c4027f24ac6" compoundref="tools_2lci_2lciframework_2parser_8h" startline="518">OpExprNode::type</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1ad0dc393a1a5f2ef0eb59742fe70f07d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* interpretBoolOpExprNode</definition>
        <argsstring>(OpExprNode *, ScopeObject *)</argsstring>
        <name>interpretBoolOpExprNode</name>
        <param>
          <type><ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref> *</type>
          <defname>expr</defname>
          <briefdescription><para>A pointer to the <ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to the ScopeObject structure to evaluate <emphasis>expr</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets a boolean operation expression.</para><para><simplesect kind="pre"><para><emphasis>expr</emphasis> was created by createOpExprNode(OpType type, ExprNodeList *args) where <emphasis>type</emphasis> is either OP_AND, OP_OR, or OP_XOR and <emphasis>args</emphasis> was created by createExprNodeList(void) and populated with <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structures using addExprNode(ExprNodeList *, ExprNode *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the interpreted operation expression value.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1ac43fd9e88414ff9960db8a442ae9a0e8" kindref="member">interpretArithOpExprNode(OpExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a7795828f9fd573ff3670ade6f6955b07" kindref="member">interpretNotOpExprNode(OpExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab84fa97762a03da8689f763fc3165b41" kindref="member">interpretEqualityOpExprNode(OpExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a4f45d788f390ee7a01a9f7a13f512d03" kindref="member">interpretConcatOpExprNode(OpExprNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para><simplesect kind="note"><para>The specification does not say whether boolean logic short circuits or not. Here, we assume it does. </para></simplesect>
</para>        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="131" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1996" bodyend="2043"/>
        <references refid="struct_op_expr_node_1a82d6f2c460a585ee3b0a46ce00ba186f" compoundref="tools_2lci_2lciframework_2parser_8h" startline="519">OpExprNode::args</references>
        <references refid="struct_expr_node_list_1a60f9bbe230725287369033df733a2b04" compoundref="tools_2lci_2lciframework_2parser_8h" startline="265">ExprNodeList::num</references>
        <references refid="struct_expr_node_list_1a10ae95f2facec652ba79e0bb5c9298c1" compoundref="tools_2lci_2lciframework_2parser_8h" startline="266">ExprNodeList::exprs</references>
        <references refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" compoundref="interpreter_8h" startline="56">ValueObject::type</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1aa7db6a14e86242b201db0d4993d61862" compoundref="interpreter_8h" startline="33">VT_BOOLEAN</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a656b93fb21c4267dae17573f6129fe93" compoundref="interpreter_8h" startline="31">VT_INTEGER</references>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
        <references refid="struct_op_expr_node_1a69ff4baea505db8ed32f4c4027f24ac6" compoundref="tools_2lci_2lciframework_2parser_8h" startline="518">OpExprNode::type</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1ab84fa97762a03da8689f763fc3165b41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* interpretEqualityOpExprNode</definition>
        <argsstring>(OpExprNode *, ScopeObject *)</argsstring>
        <name>interpretEqualityOpExprNode</name>
        <param>
          <type><ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref> *</type>
          <defname>expr</defname>
          <briefdescription><para>A pointer to the <ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to the ScopeObject structure to evaluate <emphasis>expr</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets an equality operation expression.</para><para><simplesect kind="pre"><para><emphasis>expr</emphasis> was created by createOpExprNode(OpType type, ExprNodeList *args) where <emphasis>type</emphasis> is either OP_EQ or OP_NEQ and <emphasis>args</emphasis> was created by createExprNodeList(void) and populated with <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structures using addExprNode(ExprNodeList *, ExprNode *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="note"><para>Only the first two elements in <emphasis>args</emphasis> are considered.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the interpreted operation expression value.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1ac43fd9e88414ff9960db8a442ae9a0e8" kindref="member">interpretArithOpExprNode(OpExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a7795828f9fd573ff3670ade6f6955b07" kindref="member">interpretNotOpExprNode(OpExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ad0dc393a1a5f2ef0eb59742fe70f07d1" kindref="member">interpretBoolOpExprNode(OpExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a4f45d788f390ee7a01a9f7a13f512d03" kindref="member">interpretConcatOpExprNode(OpExprNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="132" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2302" bodyend="2337"/>
        <references refid="struct_op_expr_node_1a82d6f2c460a585ee3b0a46ce00ba186f" compoundref="tools_2lci_2lciframework_2parser_8h" startline="519">OpExprNode::args</references>
        <references refid="struct_expr_node_list_1a10ae95f2facec652ba79e0bb5c9298c1" compoundref="tools_2lci_2lciframework_2parser_8h" startline="266">ExprNodeList::exprs</references>
        <references refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" compoundref="interpreter_8h" startline="56">ValueObject::type</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a656b93fb21c4267dae17573f6129fe93" compoundref="interpreter_8h" startline="31">VT_INTEGER</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a361c0d0ff5ba71f4ddd9633d3f79635f" compoundref="interpreter_8h" startline="32">VT_FLOAT</references>
        <references refid="struct_op_expr_node_1a69ff4baea505db8ed32f4c4027f24ac6" compoundref="tools_2lci_2lciframework_2parser_8h" startline="518">OpExprNode::type</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a4f45d788f390ee7a01a9f7a13f512d03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* interpretConcatOpExprNode</definition>
        <argsstring>(OpExprNode *, ScopeObject *)</argsstring>
        <name>interpretConcatOpExprNode</name>
        <param>
          <type><ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref> *</type>
          <defname>expr</defname>
          <briefdescription><para>A pointer to the <ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to the ScopeObject structure to evaluate <emphasis>expr</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets a concatenation operation expression.</para><para><simplesect kind="pre"><para><emphasis>expr</emphasis> was created by createOpExprNode(OpType type, ExprNodeList *args) where <emphasis>type</emphasis> is OP_CAT and <emphasis>args</emphasis> was created by createExprNodeList(void) and populated with <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structures using addExprNode(ExprNodeList *, ExprNode *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the concatenation of all the arguments in <emphasis>args</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a7795828f9fd573ff3670ade6f6955b07" kindref="member">interpretNotOpExprNode(OpExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ac43fd9e88414ff9960db8a442ae9a0e8" kindref="member">interpretArithOpExprNode(OpExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ad0dc393a1a5f2ef0eb59742fe70f07d1" kindref="member">interpretBoolOpExprNode(OpExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab84fa97762a03da8689f763fc3165b41" kindref="member">interpretEqualityOpExprNode(OpExprNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="133" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2357" bodyend="2410"/>
        <references refid="struct_op_expr_node_1a82d6f2c460a585ee3b0a46ce00ba186f" compoundref="tools_2lci_2lciframework_2parser_8h" startline="519">OpExprNode::args</references>
        <references refid="struct_expr_node_list_1a10ae95f2facec652ba79e0bb5c9298c1" compoundref="tools_2lci_2lciframework_2parser_8h" startline="266">ExprNodeList::exprs</references>
        <references refid="interpreter_8h_1a2267d4f53f5d3d35446667cc2b26f392" compoundref="interpreter_8h" startline="27">getString</references>
        <references refid="struct_expr_node_list_1a60f9bbe230725287369033df733a2b04" compoundref="tools_2lci_2lciframework_2parser_8h" startline="265">ExprNodeList::num</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a14b3a72f8c575160185d3e1ddd9721c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* interpretOpExprNode</definition>
        <argsstring>(ExprNode *, ScopeObject *)</argsstring>
        <name>interpretOpExprNode</name>
        <param>
          <type><ref refid="struct_expr_node" kindref="compound">ExprNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>A pointer to an <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to a ScopeObject structure to evaluate <emphasis>node</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets an operation expression.</para><para><simplesect kind="pre"><para><emphasis>expr</emphasis> was created by createOpExprNode(OpType, ExprNodeList *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the interpreted operation expression value.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a7795828f9fd573ff3670ade6f6955b07" kindref="member">interpretNotOpExprNode(OpExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ac43fd9e88414ff9960db8a442ae9a0e8" kindref="member">interpretArithOpExprNode(OpExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ad0dc393a1a5f2ef0eb59742fe70f07d1" kindref="member">interpretBoolOpExprNode(OpExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab84fa97762a03da8689f763fc3165b41" kindref="member">interpretEqualityOpExprNode(OpExprNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a4f45d788f390ee7a01a9f7a13f512d03" kindref="member">interpretConcatOpExprNode(OpExprNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="134" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2447" bodyend="2452"/>
        <references refid="struct_expr_node_1a2c6ff3dccfa2e543a46e01763adab3a8" compoundref="tools_2lci_2lciframework_2parser_8h" startline="255">ExprNode::expr</references>
        <references refid="struct_op_expr_node_1a69ff4baea505db8ed32f4c4027f24ac6" compoundref="tools_2lci_2lciframework_2parser_8h" startline="518">OpExprNode::type</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a5742a88c672e9e224aecef05663d41ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_return_object" kindref="compound">ReturnObject</ref> *</type>
        <definition>ReturnObject* interpretCastStmtNode</definition>
        <argsstring>(StmtNode *, ScopeObject *)</argsstring>
        <name>interpretCastStmtNode</name>
        <param>
          <type><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>A pointer to the <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> structure containing the <ref refid="struct_cast_stmt_node" kindref="compound">CastStmtNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to the ScopeObject structure to evaluate <emphasis>node</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets a cast statement.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createStmtNode(StmtType type, void *stmt) where <emphasis>type</emphasis> is ST_CAST and <emphasis>stmt</emphasis> was created by createCastStmtNode(IdentifierNode *, TypeNode *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_return_object" kindref="compound">ReturnObject</ref> structure with the default return value.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a3099ebd9282870922a92b1b59f675458" kindref="member">interpretPrintStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ababafcbe6b8e86ed3284bb6643baafa4" kindref="member">interpretInputStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a644bee21f70eaa27dd40ae1a9ea07145" kindref="member">interpretAssignmentStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8f688271f7f3ad36ce62428e55940c03" kindref="member">interpretDeclarationStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0214f5c76bcb63a1fbb9a242f9341763" kindref="member">interpretIfThenElseStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1acbbc71ff8da84a69bea6a533c73c02ff" kindref="member">interpretSwitchStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1af8856c962dbaeb39b8a2570c3939bebf" kindref="member">interpretBreakStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a83339941f601e7cbbecb09c7501b49fd" kindref="member">interpretReturnStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3907f4b04d219b06c4967b92af485ff8" kindref="member">interpretLoopStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8760ad4152e9a2dfeb2ed661c3ef04df" kindref="member">interpretFuncDefStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab8680118602f725af9bbb28f2a33ba93" kindref="member">interpretExprStmtNode(StmtNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="136" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2509" bodyend="2542"/>
        <references refid="struct_stmt_node_1abe2bb8927d8a9a26b83d855fb14837e6" compoundref="tools_2lci_2lciframework_2parser_8h" startline="224">StmtNode::stmt</references>
        <references refid="struct_cast_stmt_node_1a89d56358f0a8fc4d4fb0df7029ea494e" compoundref="tools_2lci_2lciframework_2parser_8h" startline="364">CastStmtNode::target</references>
        <references refid="struct_identifier_node_1a3e2e04a380b98e30c1227ae747edbe18" compoundref="tools_2lci_2lciframework_2parser_8h" startline="186">IdentifierNode::fname</references>
        <references refid="struct_identifier_node_1a64ed52f14bcfabff321d105e0a54648d" compoundref="tools_2lci_2lciframework_2parser_8h" startline="187">IdentifierNode::line</references>
        <references refid="struct_identifier_node_1a3e2473c7676f22d1f3beebe66f0a7688" compoundref="tools_2lci_2lciframework_2parser_8h" startline="185">IdentifierNode::image</references>
        <references refid="struct_cast_stmt_node_1adbeebc6cefa4f2cb92079b82cb4f4df8" compoundref="tools_2lci_2lciframework_2parser_8h" startline="365">CastStmtNode::newtype</references>
        <references refid="struct_type_node_1abd5fc196a6f39c15eb33e94eec269ac7" compoundref="tools_2lci_2lciframework_2parser_8h" startline="355">TypeNode::type</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cca5799e236aeee53b6fe285dc67cb42f00" compoundref="interpreter_8h" startline="63">RT_DEFAULT</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a3099ebd9282870922a92b1b59f675458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_return_object" kindref="compound">ReturnObject</ref> *</type>
        <definition>ReturnObject* interpretPrintStmtNode</definition>
        <argsstring>(StmtNode *, ScopeObject *)</argsstring>
        <name>interpretPrintStmtNode</name>
        <param>
          <type><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>A pointer to a <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> structure containing the <ref refid="struct_print_stmt_node" kindref="compound">PrintStmtNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to the ScopeObject structure to evaluate <emphasis>node</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets a print statement.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createStmtNode(StmtType type, void *stmt) where <emphasis>type</emphasis> is ST_PRINT and <emphasis>stmt</emphasis> was created by createPrintStmtNode(ExprNodeList *, int). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_return_object" kindref="compound">ReturnObject</ref> structure with the default return value.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a5742a88c672e9e224aecef05663d41ea" kindref="member">interpretCastStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ababafcbe6b8e86ed3284bb6643baafa4" kindref="member">interpretInputStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a644bee21f70eaa27dd40ae1a9ea07145" kindref="member">interpretAssignmentStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8f688271f7f3ad36ce62428e55940c03" kindref="member">interpretDeclarationStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0214f5c76bcb63a1fbb9a242f9341763" kindref="member">interpretIfThenElseStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1acbbc71ff8da84a69bea6a533c73c02ff" kindref="member">interpretSwitchStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1af8856c962dbaeb39b8a2570c3939bebf" kindref="member">interpretBreakStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a83339941f601e7cbbecb09c7501b49fd" kindref="member">interpretReturnStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3907f4b04d219b06c4967b92af485ff8" kindref="member">interpretLoopStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8760ad4152e9a2dfeb2ed661c3ef04df" kindref="member">interpretFuncDefStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab8680118602f725af9bbb28f2a33ba93" kindref="member">interpretExprStmtNode(StmtNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="137" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2567" bodyend="2587"/>
        <references refid="struct_stmt_node_1abe2bb8927d8a9a26b83d855fb14837e6" compoundref="tools_2lci_2lciframework_2parser_8h" startline="224">StmtNode::stmt</references>
        <references refid="struct_print_stmt_node_1a9ee87b79d331dc05b6a4bb27462a5f69" compoundref="tools_2lci_2lciframework_2parser_8h" startline="374">PrintStmtNode::args</references>
        <references refid="struct_expr_node_list_1a60f9bbe230725287369033df733a2b04" compoundref="tools_2lci_2lciframework_2parser_8h" startline="265">ExprNodeList::num</references>
        <references refid="struct_expr_node_list_1a10ae95f2facec652ba79e0bb5c9298c1" compoundref="tools_2lci_2lciframework_2parser_8h" startline="266">ExprNodeList::exprs</references>
        <references refid="interpreter_8h_1a2267d4f53f5d3d35446667cc2b26f392" compoundref="interpreter_8h" startline="27">getString</references>
        <references refid="struct_print_stmt_node_1a147ba34eeda7bcfb39f2846a678d091c" compoundref="tools_2lci_2lciframework_2parser_8h" startline="375">PrintStmtNode::nonl</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cca5799e236aeee53b6fe285dc67cb42f00" compoundref="interpreter_8h" startline="63">RT_DEFAULT</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1ababafcbe6b8e86ed3284bb6643baafa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_return_object" kindref="compound">ReturnObject</ref> *</type>
        <definition>ReturnObject* interpretInputStmtNode</definition>
        <argsstring>(StmtNode *, ScopeObject *)</argsstring>
        <name>interpretInputStmtNode</name>
        <param>
          <type><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>A pointer to a <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> structure containing an <ref refid="struct_input_stmt_node" kindref="compound">InputStmtNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to the ScopeObject structure to evaluate <emphasis>node</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets an input statement.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createStmtNode(StmtType type, void *stmt) where <emphasis>type</emphasis> is ST_INPUT and <emphasis>stmt</emphasis> was created by createInputStmtNode(IdentifierNode *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_return_object" kindref="compound">ReturnObject</ref> structure with the default return value.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a5742a88c672e9e224aecef05663d41ea" kindref="member">interpretCastStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3099ebd9282870922a92b1b59f675458" kindref="member">interpretPrintStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a644bee21f70eaa27dd40ae1a9ea07145" kindref="member">interpretAssignmentStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8f688271f7f3ad36ce62428e55940c03" kindref="member">interpretDeclarationStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0214f5c76bcb63a1fbb9a242f9341763" kindref="member">interpretIfThenElseStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1acbbc71ff8da84a69bea6a533c73c02ff" kindref="member">interpretSwitchStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1af8856c962dbaeb39b8a2570c3939bebf" kindref="member">interpretBreakStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a83339941f601e7cbbecb09c7501b49fd" kindref="member">interpretReturnStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3907f4b04d219b06c4967b92af485ff8" kindref="member">interpretLoopStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8760ad4152e9a2dfeb2ed661c3ef04df" kindref="member">interpretFuncDefStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab8680118602f725af9bbb28f2a33ba93" kindref="member">interpretExprStmtNode(StmtNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para><simplesect kind="note"><para>The specification is unclear as to the exact semantics of input. Here, we read up until the first newline or EOF but do not store it. </para></simplesect>
</para>        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="138" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2612" bodyend="2652"/>
        <references refid="struct_stmt_node_1abe2bb8927d8a9a26b83d855fb14837e6" compoundref="tools_2lci_2lciframework_2parser_8h" startline="224">StmtNode::stmt</references>
        <references refid="struct_input_stmt_node_1ad7cb247683faf94a9da01d08055349f2" compoundref="tools_2lci_2lciframework_2parser_8h" startline="385">InputStmtNode::target</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cca5799e236aeee53b6fe285dc67cb42f00" compoundref="interpreter_8h" startline="63">RT_DEFAULT</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a644bee21f70eaa27dd40ae1a9ea07145" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_return_object" kindref="compound">ReturnObject</ref> *</type>
        <definition>ReturnObject* interpretAssignmentStmtNode</definition>
        <argsstring>(StmtNode *, ScopeObject *)</argsstring>
        <name>interpretAssignmentStmtNode</name>
        <param>
          <type><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>A pointer to a <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> structure containing the <ref refid="struct_assignment_stmt_node" kindref="compound">AssignmentStmtNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to the ScopeObject structure to evaluate <emphasis>node</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets an assignment statement.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createStmtNode(StmtType type, void *stmt) where <emphasis>type</emphasis> is ST_ASSIGNMENT and <emphasis>stmt</emphasis> was created by createAssignmentStmtNode(IdentifierNode *, ExprNode *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_return_object" kindref="compound">ReturnObject</ref> structure with the default return value.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a5742a88c672e9e224aecef05663d41ea" kindref="member">interpretCastStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3099ebd9282870922a92b1b59f675458" kindref="member">interpretPrintStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ababafcbe6b8e86ed3284bb6643baafa4" kindref="member">interpretInputStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8f688271f7f3ad36ce62428e55940c03" kindref="member">interpretDeclarationStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0214f5c76bcb63a1fbb9a242f9341763" kindref="member">interpretIfThenElseStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1acbbc71ff8da84a69bea6a533c73c02ff" kindref="member">interpretSwitchStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1af8856c962dbaeb39b8a2570c3939bebf" kindref="member">interpretBreakStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a83339941f601e7cbbecb09c7501b49fd" kindref="member">interpretReturnStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3907f4b04d219b06c4967b92af485ff8" kindref="member">interpretLoopStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8760ad4152e9a2dfeb2ed661c3ef04df" kindref="member">interpretFuncDefStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab8680118602f725af9bbb28f2a33ba93" kindref="member">interpretExprStmtNode(StmtNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="139" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2677" bodyend="2688"/>
        <references refid="struct_stmt_node_1abe2bb8927d8a9a26b83d855fb14837e6" compoundref="tools_2lci_2lciframework_2parser_8h" startline="224">StmtNode::stmt</references>
        <references refid="struct_assignment_stmt_node_1af25b11d4ed4159da853c540641f0db24" compoundref="tools_2lci_2lciframework_2parser_8h" startline="395">AssignmentStmtNode::expr</references>
        <references refid="struct_assignment_stmt_node_1a6bdcf7c297f54d4269849cb96c8161a6" compoundref="tools_2lci_2lciframework_2parser_8h" startline="394">AssignmentStmtNode::target</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cca5799e236aeee53b6fe285dc67cb42f00" compoundref="interpreter_8h" startline="63">RT_DEFAULT</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a8f688271f7f3ad36ce62428e55940c03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_return_object" kindref="compound">ReturnObject</ref> *</type>
        <definition>ReturnObject* interpretDeclarationStmtNode</definition>
        <argsstring>(StmtNode *, ScopeObject *)</argsstring>
        <name>interpretDeclarationStmtNode</name>
        <param>
          <type><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>A pointer to a <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> structure containing the <ref refid="struct_declaration_stmt_node" kindref="compound">DeclarationStmtNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to the ScopeObject structure to evaluate <emphasis>node</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets a declaration statement.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createStmtNode(StmtType type, void *stmt) where <emphasis>type</emphasis> is ST_DECLARATION and <emphasis>stmt</emphasis> was created by createDeclarationStmtNode(IdentifierNode *, IdentifierNode *, ExprNode *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_return_object" kindref="compound">ReturnObject</ref> structure with the default return value.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a5742a88c672e9e224aecef05663d41ea" kindref="member">interpretCastStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3099ebd9282870922a92b1b59f675458" kindref="member">interpretPrintStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ababafcbe6b8e86ed3284bb6643baafa4" kindref="member">interpretInputStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a644bee21f70eaa27dd40ae1a9ea07145" kindref="member">interpretAssignmentStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0214f5c76bcb63a1fbb9a242f9341763" kindref="member">interpretIfThenElseStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1acbbc71ff8da84a69bea6a533c73c02ff" kindref="member">interpretSwitchStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1af8856c962dbaeb39b8a2570c3939bebf" kindref="member">interpretBreakStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a83339941f601e7cbbecb09c7501b49fd" kindref="member">interpretReturnStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3907f4b04d219b06c4967b92af485ff8" kindref="member">interpretLoopStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8760ad4152e9a2dfeb2ed661c3ef04df" kindref="member">interpretFuncDefStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab8680118602f725af9bbb28f2a33ba93" kindref="member">interpretExprStmtNode(StmtNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="140" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2713" bodyend="2737"/>
        <references refid="struct_stmt_node_1abe2bb8927d8a9a26b83d855fb14837e6" compoundref="tools_2lci_2lciframework_2parser_8h" startline="224">StmtNode::stmt</references>
        <references refid="struct_declaration_stmt_node_1a6fed156d07803ffd41487e873bcef98f" compoundref="tools_2lci_2lciframework_2parser_8h" startline="407">DeclarationStmtNode::target</references>
        <references refid="struct_identifier_node_1a3e2e04a380b98e30c1227ae747edbe18" compoundref="tools_2lci_2lciframework_2parser_8h" startline="186">IdentifierNode::fname</references>
        <references refid="struct_identifier_node_1a64ed52f14bcfabff321d105e0a54648d" compoundref="tools_2lci_2lciframework_2parser_8h" startline="187">IdentifierNode::line</references>
        <references refid="struct_identifier_node_1a3e2473c7676f22d1f3beebe66f0a7688" compoundref="tools_2lci_2lciframework_2parser_8h" startline="185">IdentifierNode::image</references>
        <references refid="struct_declaration_stmt_node_1aba3f89fdd66c4b0264490aa639a6bd6f" compoundref="tools_2lci_2lciframework_2parser_8h" startline="408">DeclarationStmtNode::expr</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cca5799e236aeee53b6fe285dc67cb42f00" compoundref="interpreter_8h" startline="63">RT_DEFAULT</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a0214f5c76bcb63a1fbb9a242f9341763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_return_object" kindref="compound">ReturnObject</ref> *</type>
        <definition>ReturnObject* interpretIfThenElseStmtNode</definition>
        <argsstring>(StmtNode *, ScopeObject *)</argsstring>
        <name>interpretIfThenElseStmtNode</name>
        <param>
          <type><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>A pointer to a <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> structure containing the <ref refid="struct_if_then_else_stmt_node" kindref="compound">IfThenElseStmtNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to the ScopeObject structure to evaluate <emphasis>node</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets an if/then/else statement.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createStmtNode(StmtType type, void *stmt) where <emphasis>type</emphasis> is ST_IFTHENELSE and <emphasis>stmt</emphasis> was created by createIfThenElseStmtNode(BlockNode *, BlockNode *, ExprNodeList *, BlockNodeList *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_return_object" kindref="compound">ReturnObject</ref> structure with the default return value.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a5742a88c672e9e224aecef05663d41ea" kindref="member">interpretCastStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3099ebd9282870922a92b1b59f675458" kindref="member">interpretPrintStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ababafcbe6b8e86ed3284bb6643baafa4" kindref="member">interpretInputStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a644bee21f70eaa27dd40ae1a9ea07145" kindref="member">interpretAssignmentStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8f688271f7f3ad36ce62428e55940c03" kindref="member">interpretDeclarationStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1acbbc71ff8da84a69bea6a533c73c02ff" kindref="member">interpretSwitchStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1af8856c962dbaeb39b8a2570c3939bebf" kindref="member">interpretBreakStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a83339941f601e7cbbecb09c7501b49fd" kindref="member">interpretReturnStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3907f4b04d219b06c4967b92af485ff8" kindref="member">interpretLoopStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8760ad4152e9a2dfeb2ed661c3ef04df" kindref="member">interpretFuncDefStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab8680118602f725af9bbb28f2a33ba93" kindref="member">interpretExprStmtNode(StmtNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="141" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2762" bodyend="2820"/>
        <references refid="struct_stmt_node_1abe2bb8927d8a9a26b83d855fb14837e6" compoundref="tools_2lci_2lciframework_2parser_8h" startline="224">StmtNode::stmt</references>
        <references refid="structscopeobject_1ae41fb9156685d42f9b30c1871603c87b" compoundref="interpreter_8h" startline="85">scopeobject::impvar</references>
        <references refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" compoundref="interpreter_8h" startline="56">ValueObject::type</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1aa7db6a14e86242b201db0d4993d61862" compoundref="interpreter_8h" startline="33">VT_BOOLEAN</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a656b93fb21c4267dae17573f6129fe93" compoundref="interpreter_8h" startline="31">VT_INTEGER</references>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
        <references refid="struct_if_then_else_stmt_node_1ae28470757cf61cab67dd9096114f4710" compoundref="tools_2lci_2lciframework_2parser_8h" startline="422">IfThenElseStmtNode::yes</references>
        <references refid="struct_if_then_else_stmt_node_1ad94295fb6d16e9815a85e0d8e930f079" compoundref="tools_2lci_2lciframework_2parser_8h" startline="424">IfThenElseStmtNode::guards</references>
        <references refid="struct_expr_node_list_1a60f9bbe230725287369033df733a2b04" compoundref="tools_2lci_2lciframework_2parser_8h" startline="265">ExprNodeList::num</references>
        <references refid="struct_expr_node_list_1a10ae95f2facec652ba79e0bb5c9298c1" compoundref="tools_2lci_2lciframework_2parser_8h" startline="266">ExprNodeList::exprs</references>
        <references refid="struct_if_then_else_stmt_node_1ab4b9831a1e7db13c206997a45ee84a95" compoundref="tools_2lci_2lciframework_2parser_8h" startline="425">IfThenElseStmtNode::blocks</references>
        <references refid="struct_block_node_list_1a97ab8b891f65c2f8152712d59f69be64" compoundref="tools_2lci_2lciframework_2parser_8h" startline="285">BlockNodeList::blocks</references>
        <references refid="struct_if_then_else_stmt_node_1aeb7d6e0fb8dad0d6e894bcdc887306fe" compoundref="tools_2lci_2lciframework_2parser_8h" startline="423">IfThenElseStmtNode::no</references>
        <references refid="struct_return_object_1a79da4f77fc9fa5dfeefbd750b0caddb0" compoundref="interpreter_8h" startline="73">ReturnObject::type</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64ccaa22f8c8892450d4ee8806a80a7e12b64" compoundref="interpreter_8h" startline="64">RT_BREAK</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64ccae089a7a50c323705d8c848d0308ca41b" compoundref="interpreter_8h" startline="65">RT_RETURN</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cca5799e236aeee53b6fe285dc67cb42f00" compoundref="interpreter_8h" startline="63">RT_DEFAULT</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1acbbc71ff8da84a69bea6a533c73c02ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_return_object" kindref="compound">ReturnObject</ref> *</type>
        <definition>ReturnObject* interpretSwitchStmtNode</definition>
        <argsstring>(StmtNode *, ScopeObject *)</argsstring>
        <name>interpretSwitchStmtNode</name>
        <param>
          <type><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>A pointer to the <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> structure containing the <ref refid="struct_switch_stmt_node" kindref="compound">SwitchStmtNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to the ScopeObject structure to evaluate <emphasis>node</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets a switch statement.</para><para><simplesect kind="note"><para>The specification is unclear as to whether guards are implicitly cast to the type of the implicit variable. This only matters in the case that mixed guard types are present and in this code, the action that is performed is the same as the comparison operator, that is, in order for a guard to match, both its type and value must match the implicit variable.</para></simplesect>
<simplesect kind="pre"><para><emphasis>node</emphasis> was created by createStmtNode(StmtType type, void *stmt) where <emphasis>type</emphasis> is ST_SWITCH and <emphasis>stmt</emphasis> was created by createSwitchStmtNode(ExprNodeList *, BlockNodeList *, BlockNode *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_return_object" kindref="compound">ReturnObject</ref> structure with the return value after interpreting <emphasis>node</emphasis> in the scope <emphasis>scope</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a5742a88c672e9e224aecef05663d41ea" kindref="member">interpretCastStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3099ebd9282870922a92b1b59f675458" kindref="member">interpretPrintStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ababafcbe6b8e86ed3284bb6643baafa4" kindref="member">interpretInputStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a644bee21f70eaa27dd40ae1a9ea07145" kindref="member">interpretAssignmentStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8f688271f7f3ad36ce62428e55940c03" kindref="member">interpretDeclarationStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0214f5c76bcb63a1fbb9a242f9341763" kindref="member">interpretIfThenElseStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1af8856c962dbaeb39b8a2570c3939bebf" kindref="member">interpretBreakStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a83339941f601e7cbbecb09c7501b49fd" kindref="member">interpretReturnStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3907f4b04d219b06c4967b92af485ff8" kindref="member">interpretLoopStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8760ad4152e9a2dfeb2ed661c3ef04df" kindref="member">interpretFuncDefStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab8680118602f725af9bbb28f2a33ba93" kindref="member">interpretExprStmtNode(StmtNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para><simplesect kind="note"><para>Strings with interpolation should have already been checked for. </para></simplesect>
</para>        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="142" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2853" bodyend="2922"/>
        <references refid="struct_stmt_node_1abe2bb8927d8a9a26b83d855fb14837e6" compoundref="tools_2lci_2lciframework_2parser_8h" startline="224">StmtNode::stmt</references>
        <references refid="struct_switch_stmt_node_1a125319a6fd02d72d96d41193daffb4a2" compoundref="tools_2lci_2lciframework_2parser_8h" startline="437">SwitchStmtNode::guards</references>
        <references refid="struct_expr_node_list_1a60f9bbe230725287369033df733a2b04" compoundref="tools_2lci_2lciframework_2parser_8h" startline="265">ExprNodeList::num</references>
        <references refid="structscopeobject_1ae41fb9156685d42f9b30c1871603c87b" compoundref="interpreter_8h" startline="85">scopeobject::impvar</references>
        <references refid="struct_expr_node_list_1a10ae95f2facec652ba79e0bb5c9298c1" compoundref="tools_2lci_2lciframework_2parser_8h" startline="266">ExprNodeList::exprs</references>
        <references refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" compoundref="interpreter_8h" startline="56">ValueObject::type</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a523067b7870725372ce9aa1399a8abba" compoundref="interpreter_8h" startline="35">VT_NIL</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1aa7db6a14e86242b201db0d4993d61862" compoundref="interpreter_8h" startline="33">VT_BOOLEAN</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a656b93fb21c4267dae17573f6129fe93" compoundref="interpreter_8h" startline="31">VT_INTEGER</references>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a361c0d0ff5ba71f4ddd9633d3f79635f" compoundref="interpreter_8h" startline="32">VT_FLOAT</references>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a7d0ada66d85d8eb695f3bdd2e48b5976" compoundref="interpreter_8h" startline="34">VT_STRING</references>
        <references refid="interpreter_8h_1a2267d4f53f5d3d35446667cc2b26f392" compoundref="interpreter_8h" startline="27">getString</references>
        <references refid="struct_switch_stmt_node_1a6cdb5c66044261b28302b6ca682d7564" compoundref="tools_2lci_2lciframework_2parser_8h" startline="438">SwitchStmtNode::blocks</references>
        <references refid="struct_block_node_list_1af36c77e76b73f0fa500ada63aaad2dd7" compoundref="tools_2lci_2lciframework_2parser_8h" startline="284">BlockNodeList::num</references>
        <references refid="struct_switch_stmt_node_1ad75de1632a46c451d251959e56d53d44" compoundref="tools_2lci_2lciframework_2parser_8h" startline="439">SwitchStmtNode::def</references>
        <references refid="struct_return_object_1a79da4f77fc9fa5dfeefbd750b0caddb0" compoundref="interpreter_8h" startline="73">ReturnObject::type</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64ccae089a7a50c323705d8c848d0308ca41b" compoundref="interpreter_8h" startline="65">RT_RETURN</references>
        <references refid="struct_block_node_list_1a97ab8b891f65c2f8152712d59f69be64" compoundref="tools_2lci_2lciframework_2parser_8h" startline="285">BlockNodeList::blocks</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64ccaa22f8c8892450d4ee8806a80a7e12b64" compoundref="interpreter_8h" startline="64">RT_BREAK</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cca5799e236aeee53b6fe285dc67cb42f00" compoundref="interpreter_8h" startline="63">RT_DEFAULT</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1af8856c962dbaeb39b8a2570c3939bebf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_return_object" kindref="compound">ReturnObject</ref> *</type>
        <definition>ReturnObject* interpretBreakStmtNode</definition>
        <argsstring>(StmtNode *, ScopeObject *)</argsstring>
        <name>interpretBreakStmtNode</name>
        <param>
          <type><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>Not used (see note). </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>Not used (see note). </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets a break statement.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createStmtNode(StmtType type, void *stmt) where <emphasis>type</emphasis> is ST_BREAK and <emphasis>stmt</emphasis> is NULL. </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="note"><para><emphasis>node</emphasis> and <emphasis>scope</emphasis> are not used by this function but are still included in its prototype to allow this function to be stored in a jump table for fast execution.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_return_object" kindref="compound">ReturnObject</ref> structure indicating a break occurred.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a5742a88c672e9e224aecef05663d41ea" kindref="member">interpretCastStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3099ebd9282870922a92b1b59f675458" kindref="member">interpretPrintStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ababafcbe6b8e86ed3284bb6643baafa4" kindref="member">interpretInputStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a644bee21f70eaa27dd40ae1a9ea07145" kindref="member">interpretAssignmentStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8f688271f7f3ad36ce62428e55940c03" kindref="member">interpretDeclarationStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0214f5c76bcb63a1fbb9a242f9341763" kindref="member">interpretIfThenElseStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1acbbc71ff8da84a69bea6a533c73c02ff" kindref="member">interpretSwitchStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a83339941f601e7cbbecb09c7501b49fd" kindref="member">interpretReturnStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3907f4b04d219b06c4967b92af485ff8" kindref="member">interpretLoopStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8760ad4152e9a2dfeb2ed661c3ef04df" kindref="member">interpretFuncDefStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab8680118602f725af9bbb28f2a33ba93" kindref="member">interpretExprStmtNode(StmtNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="143" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2951" bodyend="2957"/>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64ccaa22f8c8892450d4ee8806a80a7e12b64" compoundref="interpreter_8h" startline="64">RT_BREAK</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a83339941f601e7cbbecb09c7501b49fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_return_object" kindref="compound">ReturnObject</ref> *</type>
        <definition>ReturnObject* interpretReturnStmtNode</definition>
        <argsstring>(StmtNode *, ScopeObject *)</argsstring>
        <name>interpretReturnStmtNode</name>
        <param>
          <type><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>A pointer to the <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> structure containing the <ref refid="struct_return_stmt_node" kindref="compound">ReturnStmtNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to the ScopeObject structure to evaluate <emphasis>node</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets a return statement.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createStmtNode(StmtType type, void *stmt) where <emphasis>type</emphasis> is ST_RETURN and <emphasis>stmt</emphasis> was created by createReturnStmtNode(ExprNode *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_return_object" kindref="compound">ReturnObject</ref> structure with the return value after interpreting <emphasis>node</emphasis> in the scope <emphasis>scope</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a5742a88c672e9e224aecef05663d41ea" kindref="member">interpretCastStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3099ebd9282870922a92b1b59f675458" kindref="member">interpretPrintStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ababafcbe6b8e86ed3284bb6643baafa4" kindref="member">interpretInputStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a644bee21f70eaa27dd40ae1a9ea07145" kindref="member">interpretAssignmentStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8f688271f7f3ad36ce62428e55940c03" kindref="member">interpretDeclarationStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0214f5c76bcb63a1fbb9a242f9341763" kindref="member">interpretIfThenElseStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1acbbc71ff8da84a69bea6a533c73c02ff" kindref="member">interpretSwitchStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1af8856c962dbaeb39b8a2570c3939bebf" kindref="member">interpretBreakStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3907f4b04d219b06c4967b92af485ff8" kindref="member">interpretLoopStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8760ad4152e9a2dfeb2ed661c3ef04df" kindref="member">interpretFuncDefStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab8680118602f725af9bbb28f2a33ba93" kindref="member">interpretExprStmtNode(StmtNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="144" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2983" bodyend="2991"/>
        <references refid="struct_stmt_node_1abe2bb8927d8a9a26b83d855fb14837e6" compoundref="tools_2lci_2lciframework_2parser_8h" startline="224">StmtNode::stmt</references>
        <references refid="struct_return_stmt_node_1ac610b54406ae3bc54e3d5c4e9fcb1d2e" compoundref="tools_2lci_2lciframework_2parser_8h" startline="448">ReturnStmtNode::value</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64ccae089a7a50c323705d8c848d0308ca41b" compoundref="interpreter_8h" startline="65">RT_RETURN</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a3907f4b04d219b06c4967b92af485ff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_return_object" kindref="compound">ReturnObject</ref> *</type>
        <definition>ReturnObject* interpretLoopStmtNode</definition>
        <argsstring>(StmtNode *, ScopeObject *)</argsstring>
        <name>interpretLoopStmtNode</name>
        <param>
          <type><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>A pointer to the <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> structure containing the <ref refid="struct_loop_stmt_node" kindref="compound">LoopStmtNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to the ScopeObject structure to evaluate <emphasis>node</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets a loop statement.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createStmtNode(StmtType type, void *stmt) where <emphasis>type</emphasis> is ST_LOOP and <emphasis>stmt</emphasis> was created by createLoopStmtNode(IdentifierNode *, IdentifierNode *, ExprNode *, ExprNode *, BlockNode *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_return_object" kindref="compound">ReturnObject</ref> structure with the return value after interpreting <emphasis>node</emphasis> in the scope <emphasis>scope</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a5742a88c672e9e224aecef05663d41ea" kindref="member">interpretCastStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3099ebd9282870922a92b1b59f675458" kindref="member">interpretPrintStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ababafcbe6b8e86ed3284bb6643baafa4" kindref="member">interpretInputStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a644bee21f70eaa27dd40ae1a9ea07145" kindref="member">interpretAssignmentStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8f688271f7f3ad36ce62428e55940c03" kindref="member">interpretDeclarationStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0214f5c76bcb63a1fbb9a242f9341763" kindref="member">interpretIfThenElseStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1acbbc71ff8da84a69bea6a533c73c02ff" kindref="member">interpretSwitchStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1af8856c962dbaeb39b8a2570c3939bebf" kindref="member">interpretBreakStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a83339941f601e7cbbecb09c7501b49fd" kindref="member">interpretReturnStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8760ad4152e9a2dfeb2ed661c3ef04df" kindref="member">interpretFuncDefStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab8680118602f725af9bbb28f2a33ba93" kindref="member">interpretExprStmtNode(StmtNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="145" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="3017" bodyend="3100"/>
        <references refid="struct_stmt_node_1abe2bb8927d8a9a26b83d855fb14837e6" compoundref="tools_2lci_2lciframework_2parser_8h" startline="224">StmtNode::stmt</references>
        <references refid="struct_loop_stmt_node_1afb3820072966231fd1d43eea8ebd9234" compoundref="tools_2lci_2lciframework_2parser_8h" startline="459">LoopStmtNode::var</references>
        <references refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" compoundref="interpreter_8h" startline="56">ValueObject::type</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a656b93fb21c4267dae17573f6129fe93" compoundref="interpreter_8h" startline="31">VT_INTEGER</references>
        <references refid="struct_value_object_1a66e5eb0433f8150bf24cfc86856efe4e" compoundref="interpreter_8h" startline="57">ValueObject::data</references>
        <references refid="union_value_data_1abc2f11fb39990140dbc322610ba52f70" compoundref="interpreter_8h" startline="40">ValueData::i</references>
        <references refid="struct_value_object_1a08cfa02ff5b2f4ee7307c62c95089373" compoundref="interpreter_8h" startline="58">ValueObject::semaphore</references>
        <references refid="struct_loop_stmt_node_1a53a86fb7f989cf43f54192b8f3ad6c1a" compoundref="tools_2lci_2lciframework_2parser_8h" startline="460">LoopStmtNode::guard</references>
        <references refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1aa7db6a14e86242b201db0d4993d61862" compoundref="interpreter_8h" startline="33">VT_BOOLEAN</references>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
        <references refid="struct_loop_stmt_node_1a6844fd9206ed5d6b4fd48fc1365969aa" compoundref="tools_2lci_2lciframework_2parser_8h" startline="462">LoopStmtNode::body</references>
        <references refid="struct_return_object_1a79da4f77fc9fa5dfeefbd750b0caddb0" compoundref="interpreter_8h" startline="73">ReturnObject::type</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64ccaa22f8c8892450d4ee8806a80a7e12b64" compoundref="interpreter_8h" startline="64">RT_BREAK</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64ccae089a7a50c323705d8c848d0308ca41b" compoundref="interpreter_8h" startline="65">RT_RETURN</references>
        <references refid="struct_loop_stmt_node_1a0400ab555fff51b09f79c495af20f37f" compoundref="tools_2lci_2lciframework_2parser_8h" startline="461">LoopStmtNode::update</references>
        <references refid="struct_expr_node_1ab5f285d791068c69dbca0610d8c36c99" compoundref="tools_2lci_2lciframework_2parser_8h" startline="254">ExprNode::type</references>
        <references refid="struct_expr_node_1a2c6ff3dccfa2e543a46e01763adab3a8" compoundref="tools_2lci_2lciframework_2parser_8h" startline="255">ExprNode::expr</references>
        <references refid="struct_op_expr_node_1a69ff4baea505db8ed32f4c4027f24ac6" compoundref="tools_2lci_2lciframework_2parser_8h" startline="518">OpExprNode::type</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cca5799e236aeee53b6fe285dc67cb42f00" compoundref="interpreter_8h" startline="63">RT_DEFAULT</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a8760ad4152e9a2dfeb2ed661c3ef04df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_return_object" kindref="compound">ReturnObject</ref> *</type>
        <definition>ReturnObject* interpretFuncDefStmtNode</definition>
        <argsstring>(StmtNode *, ScopeObject *)</argsstring>
        <name>interpretFuncDefStmtNode</name>
        <param>
          <type><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>Not used (see note). </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>Not used (see note). </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets a function definition statement.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createStmtNode(StmtType type, void *stmt) where <emphasis>type</emphasis> is ST_SWITCH and <emphasis>stmt</emphasis> was created by createSwitchStmtNode(IdentifierNode *, IdentifierNode *, IdentifierNodeList *, BlockNode *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="note"><para><emphasis>node</emphasis> and <emphasis>scope</emphasis> are not used by this function but are still included in its prototype to allow this function to be stored in a jump table for fast execution.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_return_object" kindref="compound">ReturnObject</ref> structure with the default return value.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a5742a88c672e9e224aecef05663d41ea" kindref="member">interpretCastStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3099ebd9282870922a92b1b59f675458" kindref="member">interpretPrintStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ababafcbe6b8e86ed3284bb6643baafa4" kindref="member">interpretInputStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a644bee21f70eaa27dd40ae1a9ea07145" kindref="member">interpretAssignmentStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8f688271f7f3ad36ce62428e55940c03" kindref="member">interpretDeclarationStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0214f5c76bcb63a1fbb9a242f9341763" kindref="member">interpretIfThenElseStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1acbbc71ff8da84a69bea6a533c73c02ff" kindref="member">interpretSwitchStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1af8856c962dbaeb39b8a2570c3939bebf" kindref="member">interpretBreakStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a83339941f601e7cbbecb09c7501b49fd" kindref="member">interpretReturnStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3907f4b04d219b06c4967b92af485ff8" kindref="member">interpretLoopStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab8680118602f725af9bbb28f2a33ba93" kindref="member">interpretExprStmtNode(StmtNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="146" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="3129" bodyend="3136"/>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cca5799e236aeee53b6fe285dc67cb42f00" compoundref="interpreter_8h" startline="63">RT_DEFAULT</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1ab8680118602f725af9bbb28f2a33ba93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_return_object" kindref="compound">ReturnObject</ref> *</type>
        <definition>ReturnObject* interpretExprStmtNode</definition>
        <argsstring>(StmtNode *, ScopeObject *)</argsstring>
        <name>interpretExprStmtNode</name>
        <param>
          <type><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>A pointer to a <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> structure containing the <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure to interpret. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>A pointer to the ScopeObject structure to evaluate <emphasis>node</emphasis> under. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interprets an expression statement.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createStmtNode(StmtType type, void *stmt) where <emphasis>type</emphasis> is ST_EXPR and <emphasis>stmt</emphasis> was created by createExprNode(ExprType, void *). </para><simplesectsep/><para><emphasis>scope</emphasis> was created by <ref refid="interpreter_8h_1a00f475c904bf21ba3d14fa47177948ff" kindref="member">createScopeObject(ScopeObject *)</ref> and contains contents added by <ref refid="interpreter_8h_1a102e3436ecd759c4504c688b81a8e44a" kindref="member">createScopeValue(ScopeObject *, IdentifierNode *)</ref> and contents updated by <ref refid="interpreter_8h_1a8a3976ac7d53fdc0575dfb1cdd2882bc" kindref="member">updateScopeValue(ScopeObject *, IdentifierNode *, ValueObject *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_return_object" kindref="compound">ReturnObject</ref> structure with the default return value.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during interpretation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a5742a88c672e9e224aecef05663d41ea" kindref="member">interpretCastStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3099ebd9282870922a92b1b59f675458" kindref="member">interpretPrintStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ababafcbe6b8e86ed3284bb6643baafa4" kindref="member">interpretInputStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a644bee21f70eaa27dd40ae1a9ea07145" kindref="member">interpretAssignmentStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8f688271f7f3ad36ce62428e55940c03" kindref="member">interpretDeclarationStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0214f5c76bcb63a1fbb9a242f9341763" kindref="member">interpretIfThenElseStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1acbbc71ff8da84a69bea6a533c73c02ff" kindref="member">interpretSwitchStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1af8856c962dbaeb39b8a2570c3939bebf" kindref="member">interpretBreakStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a83339941f601e7cbbecb09c7501b49fd" kindref="member">interpretReturnStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a3907f4b04d219b06c4967b92af485ff8" kindref="member">interpretLoopStmtNode(StmtNode *, ScopeObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a8760ad4152e9a2dfeb2ed661c3ef04df" kindref="member">interpretFuncDefStmtNode(StmtNode *, ScopeObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="147" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="3161" bodyend="3170"/>
        <references refid="struct_stmt_node_1abe2bb8927d8a9a26b83d855fb14837e6" compoundref="tools_2lci_2lciframework_2parser_8h" startline="224">StmtNode::stmt</references>
        <references refid="structscopeobject_1ae41fb9156685d42f9b30c1871603c87b" compoundref="interpreter_8h" startline="85">scopeobject::impvar</references>
        <references refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cca5799e236aeee53b6fe285dc67cb42f00" compoundref="interpreter_8h" startline="63">RT_DEFAULT</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a60442c44a3ac32b0a98e89294e785c7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opAddIntegerInteger</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opAddIntegerInteger</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first term to add. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second term to add. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds two integers.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the sum of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a40c15754c7035023570c2f6706aa1bce" kindref="member">opSubIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a49439f8122d53198698d46dc8e355dec" kindref="member">opMultIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a1c2bad8d59cc55d1de2e90818552b727" kindref="member">opDivIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a60d738376880221327c82bb0bf2de141" kindref="member">opMaxIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1af3f2a6f50fdd068834ab1b58d4928ec8" kindref="member">opMinIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a87b62a374250d0fbe4e9e95497c10b15" kindref="member">opModIntegerInteger(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="149" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1265" bodyend="1269"/>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a40c15754c7035023570c2f6706aa1bce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opSubIntegerInteger</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opSubIntegerInteger</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The minuend. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The subtrahend. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts two integers.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the difference of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a60442c44a3ac32b0a98e89294e785c7a" kindref="member">opAddIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a49439f8122d53198698d46dc8e355dec" kindref="member">opMultIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a1c2bad8d59cc55d1de2e90818552b727" kindref="member">opDivIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a60d738376880221327c82bb0bf2de141" kindref="member">opMaxIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1af3f2a6f50fdd068834ab1b58d4928ec8" kindref="member">opMinIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a87b62a374250d0fbe4e9e95497c10b15" kindref="member">opModIntegerInteger(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="150" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1284" bodyend="1288"/>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a49439f8122d53198698d46dc8e355dec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opMultIntegerInteger</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opMultIntegerInteger</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first factor to multiply. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second factor to multiply. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies two integers.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the product of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a60442c44a3ac32b0a98e89294e785c7a" kindref="member">opAddIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a40c15754c7035023570c2f6706aa1bce" kindref="member">opSubIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a1c2bad8d59cc55d1de2e90818552b727" kindref="member">opDivIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a60d738376880221327c82bb0bf2de141" kindref="member">opMaxIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1af3f2a6f50fdd068834ab1b58d4928ec8" kindref="member">opMinIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a87b62a374250d0fbe4e9e95497c10b15" kindref="member">opModIntegerInteger(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="151" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1303" bodyend="1307"/>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a1c2bad8d59cc55d1de2e90818552b727" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opDivIntegerInteger</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opDivIntegerInteger</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The dividend. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The divisor. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides two integers.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the quotient of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>Division by zero was attempted.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a60442c44a3ac32b0a98e89294e785c7a" kindref="member">opAddIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a40c15754c7035023570c2f6706aa1bce" kindref="member">opSubIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a49439f8122d53198698d46dc8e355dec" kindref="member">opMultIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a60d738376880221327c82bb0bf2de141" kindref="member">opMaxIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1af3f2a6f50fdd068834ab1b58d4928ec8" kindref="member">opMinIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a87b62a374250d0fbe4e9e95497c10b15" kindref="member">opModIntegerInteger(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="152" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1324" bodyend="1332"/>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a60d738376880221327c82bb0bf2de141" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opMaxIntegerInteger</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opMaxIntegerInteger</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first number to compare. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second number to compare. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds the maximum of two integers.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the maximum of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a60442c44a3ac32b0a98e89294e785c7a" kindref="member">opAddIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a40c15754c7035023570c2f6706aa1bce" kindref="member">opSubIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a49439f8122d53198698d46dc8e355dec" kindref="member">opMultIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a1c2bad8d59cc55d1de2e90818552b727" kindref="member">opDivIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1af3f2a6f50fdd068834ab1b58d4928ec8" kindref="member">opMinIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a87b62a374250d0fbe4e9e95497c10b15" kindref="member">opModIntegerInteger(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="153" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1347" bodyend="1351"/>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1af3f2a6f50fdd068834ab1b58d4928ec8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opMinIntegerInteger</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opMinIntegerInteger</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first number to compare. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second number to compare. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds the minimum of two integers.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the minimum of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a60442c44a3ac32b0a98e89294e785c7a" kindref="member">opAddIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a40c15754c7035023570c2f6706aa1bce" kindref="member">opSubIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a49439f8122d53198698d46dc8e355dec" kindref="member">opMultIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a1c2bad8d59cc55d1de2e90818552b727" kindref="member">opDivIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a60d738376880221327c82bb0bf2de141" kindref="member">opMaxIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a87b62a374250d0fbe4e9e95497c10b15" kindref="member">opModIntegerInteger(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="154" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1366" bodyend="1370"/>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a87b62a374250d0fbe4e9e95497c10b15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opModIntegerInteger</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opModIntegerInteger</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The dividend. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The divisor. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the modulus of two integers.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the modulus of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a60442c44a3ac32b0a98e89294e785c7a" kindref="member">opAddIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a40c15754c7035023570c2f6706aa1bce" kindref="member">opSubIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a49439f8122d53198698d46dc8e355dec" kindref="member">opMultIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a1c2bad8d59cc55d1de2e90818552b727" kindref="member">opDivIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a60d738376880221327c82bb0bf2de141" kindref="member">opMaxIntegerInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1af3f2a6f50fdd068834ab1b58d4928ec8" kindref="member">opMinIntegerInteger(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="155" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1385" bodyend="1393"/>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1afd694eb2626213010cbc38830a462fde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opAddIntegerFloat</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opAddIntegerFloat</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first term to add. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second term to add. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds an integer and a float.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> was created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref> and <emphasis>b</emphasis> was created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the sum of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a305d078f6079ca2938e21409816000be" kindref="member">opSubIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a5393045000bf05070b764eebe2012627" kindref="member">opMultIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0df5be521bfc67b35aca6ab1e30c2a32" kindref="member">opDivIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a5d68c3dc91195706810b6db725e62eaa" kindref="member">opMaxIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a5693ec134e9b9090f8cfe51d9906e38e" kindref="member">opMinIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a6fa3fda306a1df48dfe9fbc2cff75d74" kindref="member">opModIntegerFloat(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="157" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1409" bodyend="1413"/>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a305d078f6079ca2938e21409816000be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opSubIntegerFloat</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opSubIntegerFloat</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The minuend. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The subtrahend. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts an integer and a float.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> was created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref> and <emphasis>b</emphasis> was created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the difference of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1afd694eb2626213010cbc38830a462fde" kindref="member">opAddIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a5393045000bf05070b764eebe2012627" kindref="member">opMultIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0df5be521bfc67b35aca6ab1e30c2a32" kindref="member">opDivIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a5d68c3dc91195706810b6db725e62eaa" kindref="member">opMaxIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a5693ec134e9b9090f8cfe51d9906e38e" kindref="member">opMinIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a6fa3fda306a1df48dfe9fbc2cff75d74" kindref="member">opModIntegerFloat(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="158" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1429" bodyend="1433"/>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a5393045000bf05070b764eebe2012627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opMultIntegerFloat</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opMultIntegerFloat</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first factor to multiply. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second factor to multiply. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies an integer and a float.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> was created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref> and <emphasis>b</emphasis> was created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the product of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1afd694eb2626213010cbc38830a462fde" kindref="member">opAddIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a305d078f6079ca2938e21409816000be" kindref="member">opSubIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0df5be521bfc67b35aca6ab1e30c2a32" kindref="member">opDivIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a5d68c3dc91195706810b6db725e62eaa" kindref="member">opMaxIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a5693ec134e9b9090f8cfe51d9906e38e" kindref="member">opMinIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a6fa3fda306a1df48dfe9fbc2cff75d74" kindref="member">opModIntegerFloat(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="159" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1449" bodyend="1453"/>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a0df5be521bfc67b35aca6ab1e30c2a32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opDivIntegerFloat</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opDivIntegerFloat</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The dividend. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The divisor. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides an integer and a float.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> was created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref> and <emphasis>b</emphasis> was created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the quotient of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>Division by zero was attempted.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1afd694eb2626213010cbc38830a462fde" kindref="member">opAddIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a305d078f6079ca2938e21409816000be" kindref="member">opSubIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a5393045000bf05070b764eebe2012627" kindref="member">opMultIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a5d68c3dc91195706810b6db725e62eaa" kindref="member">opMaxIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a5693ec134e9b9090f8cfe51d9906e38e" kindref="member">opMinIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a6fa3fda306a1df48dfe9fbc2cff75d74" kindref="member">opModIntegerFloat(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="160" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1471" bodyend="1479"/>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a5d68c3dc91195706810b6db725e62eaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opMaxIntegerFloat</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opMaxIntegerFloat</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first number to compare. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second number to compare. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds the maximum of an integer and a float.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> was created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref> and <emphasis>b</emphasis> was created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the maximum of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1afd694eb2626213010cbc38830a462fde" kindref="member">opAddIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a305d078f6079ca2938e21409816000be" kindref="member">opSubIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a5393045000bf05070b764eebe2012627" kindref="member">opMultIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0df5be521bfc67b35aca6ab1e30c2a32" kindref="member">opDivIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a5693ec134e9b9090f8cfe51d9906e38e" kindref="member">opMinIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a6fa3fda306a1df48dfe9fbc2cff75d74" kindref="member">opModIntegerFloat(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="161" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1495" bodyend="1499"/>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a5693ec134e9b9090f8cfe51d9906e38e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opMinIntegerFloat</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opMinIntegerFloat</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first number to compare. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second number to compare. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds the minimum of an integer and a float.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> was created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref> and <emphasis>b</emphasis> was created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the minimum of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1afd694eb2626213010cbc38830a462fde" kindref="member">opAddIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a305d078f6079ca2938e21409816000be" kindref="member">opSubIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a5393045000bf05070b764eebe2012627" kindref="member">opMultIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0df5be521bfc67b35aca6ab1e30c2a32" kindref="member">opDivIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a5d68c3dc91195706810b6db725e62eaa" kindref="member">opMaxIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a6fa3fda306a1df48dfe9fbc2cff75d74" kindref="member">opModIntegerFloat(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="162" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1515" bodyend="1519"/>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a6fa3fda306a1df48dfe9fbc2cff75d74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opModIntegerFloat</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opModIntegerFloat</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The dividend. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The divisor. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the modulus of an integer and a float.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> was created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref> and <emphasis>b</emphasis> was created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the modulus of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1afd694eb2626213010cbc38830a462fde" kindref="member">opAddIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a305d078f6079ca2938e21409816000be" kindref="member">opSubIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a5393045000bf05070b764eebe2012627" kindref="member">opMultIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a0df5be521bfc67b35aca6ab1e30c2a32" kindref="member">opDivIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a5d68c3dc91195706810b6db725e62eaa" kindref="member">opMaxIntegerFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a5693ec134e9b9090f8cfe51d9906e38e" kindref="member">opMinIntegerFloat(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="163" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1535" bodyend="1543"/>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a7c2619ce0699c09c53ab2aaf2c0977f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opAddFloatInteger</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opAddFloatInteger</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first term to add. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second term to add. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a float and an integer.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> was created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref> and <emphasis>b</emphasis> was created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the sum of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a499e486ea1a832b7105d3d8da3b76e91" kindref="member">opSubFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a2cae8b697111b4eea690cdd38ddbc5a8" kindref="member">opMultFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a89ec3da04bba6b628f84b131e804e3aa" kindref="member">opDivFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ae290f0012a6e7ac888f6e42e162db0d1" kindref="member">opMaxFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1aeba04e12530543d1ecc8a70669fac094" kindref="member">opMinFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a6d90cdaea27748de7784f43f82c31c8a" kindref="member">opModFloatInteger(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="165" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1559" bodyend="1563"/>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a499e486ea1a832b7105d3d8da3b76e91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opSubFloatInteger</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opSubFloatInteger</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The minuend. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The subtrahend. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts a float and an integer.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> was created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref> and <emphasis>b</emphasis> was created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the difference of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a7c2619ce0699c09c53ab2aaf2c0977f7" kindref="member">opAddFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a2cae8b697111b4eea690cdd38ddbc5a8" kindref="member">opMultFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a89ec3da04bba6b628f84b131e804e3aa" kindref="member">opDivFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ae290f0012a6e7ac888f6e42e162db0d1" kindref="member">opMaxFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1aeba04e12530543d1ecc8a70669fac094" kindref="member">opMinFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a6d90cdaea27748de7784f43f82c31c8a" kindref="member">opModFloatInteger(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="166" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1579" bodyend="1583"/>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a2cae8b697111b4eea690cdd38ddbc5a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opMultFloatInteger</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opMultFloatInteger</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first factor to multiply. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second factor to multiply. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies a float and an integer.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> was created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref> and <emphasis>b</emphasis> was created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the product of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a7c2619ce0699c09c53ab2aaf2c0977f7" kindref="member">opAddFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a499e486ea1a832b7105d3d8da3b76e91" kindref="member">opSubFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a89ec3da04bba6b628f84b131e804e3aa" kindref="member">opDivFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ae290f0012a6e7ac888f6e42e162db0d1" kindref="member">opMaxFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1aeba04e12530543d1ecc8a70669fac094" kindref="member">opMinFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a6d90cdaea27748de7784f43f82c31c8a" kindref="member">opModFloatInteger(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="167" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1598" bodyend="1602"/>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a89ec3da04bba6b628f84b131e804e3aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opDivFloatInteger</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opDivFloatInteger</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The dividend. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The divisor. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides a float and an integer.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> was created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref> and <emphasis>b</emphasis> was created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the quotient of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>Division by zero was attempted.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a7c2619ce0699c09c53ab2aaf2c0977f7" kindref="member">opAddFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a499e486ea1a832b7105d3d8da3b76e91" kindref="member">opSubFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a2cae8b697111b4eea690cdd38ddbc5a8" kindref="member">opMultFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ae290f0012a6e7ac888f6e42e162db0d1" kindref="member">opMaxFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1aeba04e12530543d1ecc8a70669fac094" kindref="member">opMinFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a6d90cdaea27748de7784f43f82c31c8a" kindref="member">opModFloatInteger(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="168" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1620" bodyend="1628"/>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1ae290f0012a6e7ac888f6e42e162db0d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opMaxFloatInteger</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opMaxFloatInteger</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first number to compare. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second number to compare. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds the maximum of a float and an integer.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> was created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref> and <emphasis>b</emphasis> was created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the maximum of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a7c2619ce0699c09c53ab2aaf2c0977f7" kindref="member">opAddFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a499e486ea1a832b7105d3d8da3b76e91" kindref="member">opSubFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a2cae8b697111b4eea690cdd38ddbc5a8" kindref="member">opMultFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a89ec3da04bba6b628f84b131e804e3aa" kindref="member">opDivFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1aeba04e12530543d1ecc8a70669fac094" kindref="member">opMinFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a6d90cdaea27748de7784f43f82c31c8a" kindref="member">opModFloatInteger(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="169" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1644" bodyend="1648"/>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1aeba04e12530543d1ecc8a70669fac094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opMinFloatInteger</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opMinFloatInteger</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first number to compare. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second number to compare. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds the minimum of a float and an integer.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> was created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref> and <emphasis>b</emphasis> was created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the minimum of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a7c2619ce0699c09c53ab2aaf2c0977f7" kindref="member">opAddFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a499e486ea1a832b7105d3d8da3b76e91" kindref="member">opSubFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a2cae8b697111b4eea690cdd38ddbc5a8" kindref="member">opMultFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a89ec3da04bba6b628f84b131e804e3aa" kindref="member">opDivFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ae290f0012a6e7ac888f6e42e162db0d1" kindref="member">opMaxFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a6d90cdaea27748de7784f43f82c31c8a" kindref="member">opModFloatInteger(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="170" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1664" bodyend="1668"/>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a6d90cdaea27748de7784f43f82c31c8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opModFloatInteger</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opModFloatInteger</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The dividend. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The divisor. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the modulus of a float and an integer.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> was created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref> and <emphasis>b</emphasis> was created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the modulus of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a7c2619ce0699c09c53ab2aaf2c0977f7" kindref="member">opAddFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a499e486ea1a832b7105d3d8da3b76e91" kindref="member">opSubFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a2cae8b697111b4eea690cdd38ddbc5a8" kindref="member">opMultFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a89ec3da04bba6b628f84b131e804e3aa" kindref="member">opDivFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ae290f0012a6e7ac888f6e42e162db0d1" kindref="member">opMaxFloatInteger(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1aeba04e12530543d1ecc8a70669fac094" kindref="member">opMinFloatInteger(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="171" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1684" bodyend="1692"/>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1ad07ed5a492963cbbfbaf26f10178a0da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opAddFloatFloat</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opAddFloatFloat</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first term to add. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second term to add. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds two floats.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the sum of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a6fe0baa044b43505a5013455ce7f3ef4" kindref="member">opSubFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab28d564ef0da5903a3a2ed6c18dcad11" kindref="member">opMultFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a907454143b8856fe616d3b595cb917d1" kindref="member">opDivFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a744d79a234d2a4f6490ef91624071c32" kindref="member">opMaxFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a901fca3f0217cce10f23a893372680a8" kindref="member">opMinFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ae7fd86387767d294c071b020ea5e9ccc" kindref="member">opModFloatFloat(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="173" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1707" bodyend="1711"/>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a6fe0baa044b43505a5013455ce7f3ef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opSubFloatFloat</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opSubFloatFloat</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The minuend. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The subtrahend. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts two floats.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the difference of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1ad07ed5a492963cbbfbaf26f10178a0da" kindref="member">opAddFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab28d564ef0da5903a3a2ed6c18dcad11" kindref="member">opMultFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a907454143b8856fe616d3b595cb917d1" kindref="member">opDivFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a744d79a234d2a4f6490ef91624071c32" kindref="member">opMaxFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a901fca3f0217cce10f23a893372680a8" kindref="member">opMinFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ae7fd86387767d294c071b020ea5e9ccc" kindref="member">opModFloatFloat(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="174" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1726" bodyend="1730"/>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1ab28d564ef0da5903a3a2ed6c18dcad11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opMultFloatFloat</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opMultFloatFloat</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first factor to multiply. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second factor to multiply. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies two floats.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the product of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1ad07ed5a492963cbbfbaf26f10178a0da" kindref="member">opAddFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a6fe0baa044b43505a5013455ce7f3ef4" kindref="member">opSubFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a907454143b8856fe616d3b595cb917d1" kindref="member">opDivFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a744d79a234d2a4f6490ef91624071c32" kindref="member">opMaxFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a901fca3f0217cce10f23a893372680a8" kindref="member">opMinFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ae7fd86387767d294c071b020ea5e9ccc" kindref="member">opModFloatFloat(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="175" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1745" bodyend="1749"/>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a907454143b8856fe616d3b595cb917d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opDivFloatFloat</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opDivFloatFloat</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The dividend. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The divisor. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides two floats.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the quotient of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>Division by zero was attempted.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="interpreter_8h_1ad07ed5a492963cbbfbaf26f10178a0da" kindref="member">opAddFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a6fe0baa044b43505a5013455ce7f3ef4" kindref="member">opSubFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab28d564ef0da5903a3a2ed6c18dcad11" kindref="member">opMultFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a744d79a234d2a4f6490ef91624071c32" kindref="member">opMaxFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a901fca3f0217cce10f23a893372680a8" kindref="member">opMinFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ae7fd86387767d294c071b020ea5e9ccc" kindref="member">opModFloatFloat(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="176" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1766" bodyend="1774"/>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a744d79a234d2a4f6490ef91624071c32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opMaxFloatFloat</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opMaxFloatFloat</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first number to compare. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second number to compare. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds the maximum of two floats.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the maximum of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1ad07ed5a492963cbbfbaf26f10178a0da" kindref="member">opAddFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a6fe0baa044b43505a5013455ce7f3ef4" kindref="member">opSubFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab28d564ef0da5903a3a2ed6c18dcad11" kindref="member">opMultFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a907454143b8856fe616d3b595cb917d1" kindref="member">opDivFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a901fca3f0217cce10f23a893372680a8" kindref="member">opMinFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ae7fd86387767d294c071b020ea5e9ccc" kindref="member">opModFloatFloat(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="177" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1789" bodyend="1793"/>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a901fca3f0217cce10f23a893372680a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opMinFloatFloat</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opMinFloatFloat</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first number to compare. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second number to compare. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds the minimum of two floats.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the minimum of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1ad07ed5a492963cbbfbaf26f10178a0da" kindref="member">opAddFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a6fe0baa044b43505a5013455ce7f3ef4" kindref="member">opSubFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab28d564ef0da5903a3a2ed6c18dcad11" kindref="member">opMultFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a907454143b8856fe616d3b595cb917d1" kindref="member">opDivFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a744d79a234d2a4f6490ef91624071c32" kindref="member">opMaxFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ae7fd86387767d294c071b020ea5e9ccc" kindref="member">opModFloatFloat(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="178" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1808" bodyend="1812"/>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1ae7fd86387767d294c071b020ea5e9ccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opModFloatFloat</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opModFloatFloat</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The dividend. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The divisor. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the modulus of two floats.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing the modulus of the values <emphasis>a</emphasis> and <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1ad07ed5a492963cbbfbaf26f10178a0da" kindref="member">opAddFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a6fe0baa044b43505a5013455ce7f3ef4" kindref="member">opSubFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1ab28d564ef0da5903a3a2ed6c18dcad11" kindref="member">opMultFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a907454143b8856fe616d3b595cb917d1" kindref="member">opDivFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a744d79a234d2a4f6490ef91624071c32" kindref="member">opMaxFloatFloat(ValueObject *, ValueObject *)</ref> </para><simplesectsep/><para><ref refid="interpreter_8h_1a901fca3f0217cce10f23a893372680a8" kindref="member">opMinFloatFloat(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="179" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="1827" bodyend="1835"/>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a49a410f97c8559f2ba41ca94b7aceb21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opEqBooleanBoolean</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opEqBooleanBoolean</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first value to test. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second value to test. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if two boolean values are equal.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by createBooleanValueObject(float).</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing a boolean value indicating whether <emphasis>a</emphasis> is equal to <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1adf2234eccc6099f2f1829a7ee948e045" kindref="member">opNeqBooleanBoolean(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="181" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2169" bodyend="2173"/>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1adf2234eccc6099f2f1829a7ee948e045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opNeqBooleanBoolean</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opNeqBooleanBoolean</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first value to test. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second value to test. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if two boolean values are not equal.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by createBooleanValueObject(float).</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing a boolean value indicating whether <emphasis>a</emphasis> is not equal to <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a49a410f97c8559f2ba41ca94b7aceb21" kindref="member">opEqBooleanBoolean(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="182" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2183" bodyend="2187"/>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1af02dbffb1883def8d565b324d3b08fa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opEqIntegerInteger</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opEqIntegerInteger</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first value to test. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second value to test. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if two integers are equal.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing a boolean value indicating whether <emphasis>a</emphasis> is equal to <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a737fac56d37cbf193f78775774cfdeeb" kindref="member">opNeqIntegerInteger(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="184" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2053" bodyend="2057"/>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a737fac56d37cbf193f78775774cfdeeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opNeqIntegerInteger</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opNeqIntegerInteger</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first value to test. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second value to test. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if two integers are not equal.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing a boolean value indicating whether <emphasis>a</emphasis> is not equal to <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1af02dbffb1883def8d565b324d3b08fa4" kindref="member">opEqIntegerInteger(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="185" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2067" bodyend="2071"/>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a918c1fe2753f0fa6a7f0abbb0f26790f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opEqIntegerFloat</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opEqIntegerFloat</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first value to test. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second value to test. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if an integer and a float are equal.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> was created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref> and <emphasis>b</emphasis> was created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing a boolean value indicating whether <emphasis>a</emphasis> is equal to <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a689189c68d9b98c49d296cd9f04363e9" kindref="member">opNeqIntegerFloat(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="187" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2082" bodyend="2086"/>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a689189c68d9b98c49d296cd9f04363e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opNeqIntegerFloat</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opNeqIntegerFloat</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first value to test. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second value to test. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if an integer and a float are not equal.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> was created by <ref refid="interpreter_8h_1a3dcf1ed83c5fe0efe4d7f1c72c023945" kindref="member">createIntegerValueObject(int)</ref> and <emphasis>b</emphasis> was created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing a boolean value indicating whether <emphasis>a</emphasis> is not equal to <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a918c1fe2753f0fa6a7f0abbb0f26790f" kindref="member">opEqIntegerFloat(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="188" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2097" bodyend="2101"/>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a5b824e009801b5ca65d51abe36aecf97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opEqFloatInteger</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opEqFloatInteger</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first value to test. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second value to test. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if a float and an integer are equal.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> was created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref> and <emphasis>b</emphasis> was created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing a boolean value indicating whether <emphasis>a</emphasis> is equal to <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a48ab7e79793cd6462d041d6288b770d9" kindref="member">opNeqFloatInteger(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="190" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2112" bodyend="2116"/>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a48ab7e79793cd6462d041d6288b770d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opNeqFloatInteger</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opNeqFloatInteger</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first value to test. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second value to test. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if a float and an integer are not equal.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> was created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref> and <emphasis>b</emphasis> was created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing a boolean value indicating whether <emphasis>a</emphasis> is not equal to <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a5b824e009801b5ca65d51abe36aecf97" kindref="member">opEqFloatInteger(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="191" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2127" bodyend="2131"/>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
        <references refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" compoundref="interpreter_8h" startline="23">getInteger</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1ab721f724a3fac4900c4a8886d57c41d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opEqFloatFloat</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opEqFloatFloat</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first value to test. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second value to test. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if two floats are equal.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing a boolean value indicating whether <emphasis>a</emphasis> is equal to <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1ac2f5e5a62a09a571b8be1ab942fa29cd" kindref="member">opNeqFloatFloat(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="193" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2141" bodyend="2145"/>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1ac2f5e5a62a09a571b8be1ab942fa29cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opNeqFloatFloat</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opNeqFloatFloat</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first value to test. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second value to test. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if two floats are not equal.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1aea96b6d2469b6f3d4531987c644c2d63" kindref="member">createFloatValueObject(float)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing a boolean value indicating whether <emphasis>a</emphasis> is not equal to <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1ac2f5e5a62a09a571b8be1ab942fa29cd" kindref="member">opNeqFloatFloat(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="194" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2155" bodyend="2159"/>
        <references refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" compoundref="interpreter_8h" startline="25">getFloat</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a990ba01ec898389b6bde8471e2ad0f9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opEqStringString</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opEqStringString</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first value to test. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second value to test. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if two strings are equal.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1a9c7124b50cb92fb20edc6c2963a5f2b8" kindref="member">createStringValueObject(char *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing a boolean value indicating whether <emphasis>a</emphasis> is equal to <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a207c76cef3c01faa73750bd60e9b0037" kindref="member">opNeqStringString(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="196" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2197" bodyend="2201"/>
        <references refid="interpreter_8h_1a2267d4f53f5d3d35446667cc2b26f392" compoundref="interpreter_8h" startline="27">getString</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a207c76cef3c01faa73750bd60e9b0037" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opNeqStringString</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opNeqStringString</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>The first value to test. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>The second value to test. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if two strings are not equal.</para><para><simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1a9c7124b50cb92fb20edc6c2963a5f2b8" kindref="member">createStringValueObject(char *)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing a boolean value indicating whether <emphasis>a</emphasis> is not equal to <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a990ba01ec898389b6bde8471e2ad0f9d" kindref="member">opEqStringString(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="197" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2211" bodyend="2215"/>
        <references refid="interpreter_8h_1a2267d4f53f5d3d35446667cc2b26f392" compoundref="interpreter_8h" startline="27">getString</references>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1aa910b7104ad75428e66766f5bd06f4a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opEqNilNil</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opEqNilNil</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>Not used (see note). </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>Not used (see note). </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if two nil values are equal.</para><para><simplesect kind="note"><para>Two nil values are <bold>always</bold> equal, therefore <emphasis>a</emphasis> and <emphasis>b</emphasis> are not used by this function but are still included in its prototype to allow this function to be stored in a jump table for fast execution.</para></simplesect>
<simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1a494ae7c921c6e7994e07d927f1dd619b" kindref="member">createNilValueObject(void)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing a boolean value indicating whether <emphasis>a</emphasis> is equal to <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1a7ad8e455aa33ebc978836eab51b9c268" kindref="member">opNeqNilNil(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="199" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2229" bodyend="2235"/>
      </memberdef>
      <memberdef kind="function" id="interpreter_8h_1a7ad8e455aa33ebc978836eab51b9c268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
        <definition>ValueObject* opNeqNilNil</definition>
        <argsstring>(ValueObject *, ValueObject *)</argsstring>
        <name>opNeqNilNil</name>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>a</defname>
          <briefdescription><para>Not used (see note). </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_value_object" kindref="compound">ValueObject</ref> *</type>
          <defname>b</defname>
          <briefdescription><para>Not used (see note). </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tests if two nil values are not equal.</para><para><simplesect kind="note"><para>Two nil values are <bold>always</bold> equal and thus <bold>never</bold> not equal, therefore <emphasis>a</emphasis> and <emphasis>b</emphasis> are not used by this function but are still included in its prototype to allow this function to be stored in a jump table for fast execution.</para></simplesect>
<simplesect kind="pre"><para><emphasis>a</emphasis> and <emphasis>b</emphasis> were created by <ref refid="interpreter_8h_1a494ae7c921c6e7994e07d927f1dd619b" kindref="member">createNilValueObject(void)</ref>.</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_value_object" kindref="compound">ValueObject</ref> structure containing a boolean value indicating whether <emphasis>a</emphasis> is not equal to <emphasis>b</emphasis>.</para></simplesect>
<simplesect kind="see"><para><ref refid="interpreter_8h_1aa910b7104ad75428e66766f5bd06f4a8" kindref="member">opEqNilNil(ValueObject *, ValueObject *)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h" line="200" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.c" bodystart="2250" bodyend="2256"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Structures and functions for interpreting a parse tree. The interpreter traverses a parse tree in a depth-first manner, interpreting each node it reaches along the way. This is the last stage of the processing of a source code file.</para><para><simplesect kind="author"><para>Justin J. Meza</para></simplesect>
<simplesect kind="date"><para>2010 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="12"><highlight class="preprocessor">#ifndef<sp/>__INTERPRETER_H__</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__INTERPRETER_H__</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;parser.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="unicode_8h" kindref="compound">unicode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="interpreter_8h_1ab09c63bb17c41b5d1c56f89c2a7c0306" refkind="member"><highlight class="preprocessor">#define<sp/>getInteger(value)<sp/>(value-&gt;data.i)</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="25" refid="interpreter_8h_1a476129305e12675fd848537c7a23be7e" refkind="member"><highlight class="preprocessor">#define<sp/>getFloat(value)<sp/>(value-&gt;data.f)</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="27" refid="interpreter_8h_1a2267d4f53f5d3d35446667cc2b26f392" refkind="member"><highlight class="preprocessor">#define<sp/>getString(value)<sp/>(value-&gt;data.s)</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="30" refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="31" refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a656b93fb21c4267dae17573f6129fe93" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a656b93fb21c4267dae17573f6129fe93" kindref="member">VT_INTEGER</ref>,<sp/></highlight></codeline>
<codeline lineno="32" refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a361c0d0ff5ba71f4ddd9633d3f79635f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a361c0d0ff5ba71f4ddd9633d3f79635f" kindref="member">VT_FLOAT</ref>,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33" refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1aa7db6a14e86242b201db0d4993d61862" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1aa7db6a14e86242b201db0d4993d61862" kindref="member">VT_BOOLEAN</ref>,<sp/></highlight></codeline>
<codeline lineno="34" refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a7d0ada66d85d8eb695f3bdd2e48b5976" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a7d0ada66d85d8eb695f3bdd2e48b5976" kindref="member">VT_STRING</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="35" refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a523067b7870725372ce9aa1399a8abba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1a523067b7870725372ce9aa1399a8abba" kindref="member">VT_NIL</ref><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal">}<sp/><ref refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1" kindref="member">ValueType</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="union_value_data" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="40" refid="union_value_data_1abc2f11fb39990140dbc322610ba52f70" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="union_value_data_1abc2f11fb39990140dbc322610ba52f70" kindref="member">i</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41" refid="union_value_data_1a85311c11b54183bb571f35ed70af37a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="union_value_data_1a85311c11b54183bb571f35ed70af37a9" kindref="member">f</ref>;<sp/></highlight></codeline>
<codeline lineno="42" refid="union_value_data_1a2639b48549e0788d5f9a3da6ea9cb0e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="union_value_data_1a2639b48549e0788d5f9a3da6ea9cb0e4" kindref="member">s</ref>;<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal">}<sp/><ref refid="union_value_data" kindref="compound">ValueData</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="interpreter_8h_1acdac0b055f8acfc246c8d1f6cc249012" refkind="member"><highlight class="preprocessor">#define<sp/>V(value)<sp/>(value-&gt;semaphore++)</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="49" refid="interpreter_8h_1add157945a6056e97010b859dd7b32c2c" refkind="member"><highlight class="preprocessor">#define<sp/>P(value)<sp/>(value-&gt;semaphore--)</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="55" refid="struct_value_object" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="56" refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interpreter_8h_1ad9971b6ef33e02ba2c75d19c1d2518a1" kindref="member">ValueType</ref><sp/><ref refid="struct_value_object_1ad2d5ae1b91e2d7bbe9f262f0e8889b8d" kindref="member">type</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57" refid="struct_value_object_1a66e5eb0433f8150bf24cfc86856efe4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="union_value_data" kindref="compound">ValueData</ref><sp/><ref refid="struct_value_object_1a66e5eb0433f8150bf24cfc86856efe4e" kindref="member">data</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58" refid="struct_value_object_1a08cfa02ff5b2f4ee7307c62c95089373" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="struct_value_object_1a08cfa02ff5b2f4ee7307c62c95089373" kindref="member">semaphore</ref>;<sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal">}<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cc" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="63" refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cca5799e236aeee53b6fe285dc67cb42f00" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cca5799e236aeee53b6fe285dc67cb42f00" kindref="member">RT_DEFAULT</ref>,<sp/></highlight></codeline>
<codeline lineno="64" refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64ccaa22f8c8892450d4ee8806a80a7e12b64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64ccaa22f8c8892450d4ee8806a80a7e12b64" kindref="member">RT_BREAK</ref>,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65" refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64ccae089a7a50c323705d8c848d0308ca41b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64ccae089a7a50c323705d8c848d0308ca41b" kindref="member">RT_RETURN</ref><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal">}<sp/><ref refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cc" kindref="member">ReturnType</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="struct_return_object" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="73" refid="struct_return_object_1a79da4f77fc9fa5dfeefbd750b0caddb0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cc" kindref="member">ReturnType</ref><sp/><ref refid="struct_return_object_1a79da4f77fc9fa5dfeefbd750b0caddb0" kindref="member">type</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74" refid="struct_return_object_1a52bd553a4949e0f49f377778402e2cbe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*<ref refid="struct_return_object_1a52bd553a4949e0f49f377778402e2cbe" kindref="member">value</ref>;<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal">}<sp/><ref refid="struct_return_object" kindref="compound">ReturnObject</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="structscopeobject" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structscopeobject" kindref="compound">scopeobject</ref><sp/>{</highlight></codeline>
<codeline lineno="84" refid="structscopeobject_1aa2e35271cf1ca0ecb0f8d256f6d3f78e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structscopeobject" kindref="compound">scopeobject</ref><sp/>*<ref refid="structscopeobject_1aa2e35271cf1ca0ecb0f8d256f6d3f78e" kindref="member">parent</ref>;<sp/></highlight></codeline>
<codeline lineno="85" refid="structscopeobject_1ae41fb9156685d42f9b30c1871603c87b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*<ref refid="structscopeobject_1ae41fb9156685d42f9b30c1871603c87b" kindref="member">impvar</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86" refid="structscopeobject_1af8cb43430f28df6a4935d53ec1ac470b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structscopeobject_1af8cb43430f28df6a4935d53ec1ac470b" kindref="member">numvals</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87" refid="structscopeobject_1afcb602890b0a936c43648cb06691c19d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>**<ref refid="structscopeobject_1afcb602890b0a936c43648cb06691c19d" kindref="member">names</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88" refid="structscopeobject_1a91d5a05990706ccd0dd32356fbb534ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>**<ref refid="structscopeobject_1a91d5a05990706ccd0dd32356fbb534ba" kindref="member">values</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal">}<sp/><ref refid="interpreter_8h_1a7be125c402f07f73bf856b70b37594b5" kindref="member">ScopeObject</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*createString(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*createNilValueObject(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*createBooleanValueObject(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*createIntegerValueObject(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*createFloatValueObject(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*createStringValueObject(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*copyValueObject(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteValueObject(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><ref refid="struct_return_object" kindref="compound">ReturnObject</ref><sp/>*createReturnObject(<ref refid="interpreter_8h_1a36a419f0b50a0c1d2d4cf712e0ba64cc" kindref="member">ReturnType</ref>,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteReturnObject(<ref refid="struct_return_object" kindref="compound">ReturnObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*createScopeObject(<ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteScopeObject(<ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*getScopeValue(<ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*,<sp/><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*getLocalScopeValue(<ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*,<sp/><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*createScopeValue(<ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*,<sp/><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*updateScopeValue(<ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*,<sp/><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isNumString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isHexString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*castBooleanExplicit(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*castIntegerExplicit(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*castFloatExplicit(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*castStringExplicit(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*castBooleanImplicit(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*castIntegerImplicit(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*castFloatImplicit(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*castStringImplicit(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*interpretExprNode(<ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><ref refid="struct_return_object" kindref="compound">ReturnObject</ref><sp/>*interpretStmtNode(<ref refid="struct_stmt_node" kindref="compound">StmtNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><ref refid="struct_return_object" kindref="compound">ReturnObject</ref><sp/>*interpretStmtNodeList(<ref refid="struct_stmt_node_list" kindref="compound">StmtNodeList</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><ref refid="struct_return_object" kindref="compound">ReturnObject</ref><sp/>*interpretBlockNode(<ref refid="struct_block_node" kindref="compound">BlockNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interpretMainNode(<ref refid="struct_main_node" kindref="compound">MainNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*interpretImpVarExprNode(<ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*interpretCastExprNode(<ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*interpretFuncCallExprNode(<ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*interpretIdentifierExprNode(<ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*interpretConstantExprNode(<ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*interpretNotOpExprNode(<ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*interpretArithOpExprNode(<ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*interpretBoolOpExprNode(<ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*interpretEqualityOpExprNode(<ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*interpretConcatOpExprNode(<ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*interpretOpExprNode(<ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><ref refid="struct_return_object" kindref="compound">ReturnObject</ref><sp/>*interpretCastStmtNode(<ref refid="struct_stmt_node" kindref="compound">StmtNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><ref refid="struct_return_object" kindref="compound">ReturnObject</ref><sp/>*interpretPrintStmtNode(<ref refid="struct_stmt_node" kindref="compound">StmtNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><ref refid="struct_return_object" kindref="compound">ReturnObject</ref><sp/>*interpretInputStmtNode(<ref refid="struct_stmt_node" kindref="compound">StmtNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><ref refid="struct_return_object" kindref="compound">ReturnObject</ref><sp/>*interpretAssignmentStmtNode(<ref refid="struct_stmt_node" kindref="compound">StmtNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><ref refid="struct_return_object" kindref="compound">ReturnObject</ref><sp/>*interpretDeclarationStmtNode(<ref refid="struct_stmt_node" kindref="compound">StmtNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><ref refid="struct_return_object" kindref="compound">ReturnObject</ref><sp/>*interpretIfThenElseStmtNode(<ref refid="struct_stmt_node" kindref="compound">StmtNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><ref refid="struct_return_object" kindref="compound">ReturnObject</ref><sp/>*interpretSwitchStmtNode(<ref refid="struct_stmt_node" kindref="compound">StmtNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><ref refid="struct_return_object" kindref="compound">ReturnObject</ref><sp/>*interpretBreakStmtNode(<ref refid="struct_stmt_node" kindref="compound">StmtNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><ref refid="struct_return_object" kindref="compound">ReturnObject</ref><sp/>*interpretReturnStmtNode(<ref refid="struct_stmt_node" kindref="compound">StmtNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><ref refid="struct_return_object" kindref="compound">ReturnObject</ref><sp/>*interpretLoopStmtNode(<ref refid="struct_stmt_node" kindref="compound">StmtNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><ref refid="struct_return_object" kindref="compound">ReturnObject</ref><sp/>*interpretFuncDefStmtNode(<ref refid="struct_stmt_node" kindref="compound">StmtNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><ref refid="struct_return_object" kindref="compound">ReturnObject</ref><sp/>*interpretExprStmtNode(<ref refid="struct_stmt_node" kindref="compound">StmtNode</ref><sp/>*,<sp/><ref refid="structscopeobject" kindref="compound">ScopeObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opAddIntegerInteger(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opSubIntegerInteger(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opMultIntegerInteger(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opDivIntegerInteger(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opMaxIntegerInteger(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opMinIntegerInteger(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opModIntegerInteger(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opAddIntegerFloat(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opSubIntegerFloat(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opMultIntegerFloat(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opDivIntegerFloat(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opMaxIntegerFloat(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opMinIntegerFloat(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opModIntegerFloat(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opAddFloatInteger(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opSubFloatInteger(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opMultFloatInteger(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opDivFloatInteger(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opMaxFloatInteger(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opMinFloatInteger(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opModFloatInteger(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opAddFloatFloat(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opSubFloatFloat(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opMultFloatFloat(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opDivFloatFloat(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opMaxFloatFloat(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opMinFloatFloat(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opModFloatFloat(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opEqBooleanBoolean(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opNeqBooleanBoolean(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opEqIntegerInteger(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opNeqIntegerInteger(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opEqIntegerFloat(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opNeqIntegerFloat(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opEqFloatInteger(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opNeqFloatInteger(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opEqFloatFloat(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opNeqFloatFloat(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opEqStringString(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opNeqStringString(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opEqNilNil(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*opNeqNilNil(<ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*,<sp/><ref refid="struct_value_object" kindref="compound">ValueObject</ref><sp/>*);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__INTERPRETER_H__<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/ericgallager/uscode/tools/lci/lciframework/interpreter.h"/>
  </compounddef>
</doxygen>
