<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.0">
  <compounddef id="tools_2lci_2lciframework_2parser_8h" kind="file">
    <compoundname>parser.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="tokenizer_8h" local="yes">tokenizer.h</includes>
    <includedby refid="interpreter_8h" local="yes">tools/lci/lciframework/interpreter.h</includedby>
    <includedby refid="main_8c" local="yes">tools/lci/lciframework/main.c</includedby>
    <includedby refid="parser_8c" local="yes">tools/lci/lciframework/parser.c</includedby>
    <incdepgraph>
      <node id="207">
        <label>stdlib.h</label>
      </node>
      <node id="211">
        <label>lexer.h</label>
        <link refid="lexer_8h"/>
        <childnode refid="207" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
        <childnode refid="209" relation="include">
        </childnode>
        <childnode refid="212" relation="include">
        </childnode>
      </node>
      <node id="210">
        <label>tokenizer.h</label>
        <link refid="tokenizer_8h"/>
        <childnode refid="207" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
        <childnode refid="209" relation="include">
        </childnode>
        <childnode refid="211" relation="include">
        </childnode>
      </node>
      <node id="209">
        <label>string.h</label>
      </node>
      <node id="212">
        <label>ctype.h</label>
      </node>
      <node id="206">
        <label>tools/lci/lciframework/parser.h</label>
        <link refid="tools/lci/lciframework/parser.h"/>
        <childnode refid="207" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
        <childnode refid="209" relation="include">
        </childnode>
        <childnode refid="210" relation="include">
        </childnode>
      </node>
      <node id="208">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="215">
        <label>tools/lci/lciframework/interpreter.c</label>
        <link refid="interpreter_8c_source"/>
      </node>
      <node id="214">
        <label>tools/lci/lciframework/interpreter.h</label>
        <link refid="interpreter_8h"/>
        <childnode refid="215" relation="include">
        </childnode>
        <childnode refid="216" relation="include">
        </childnode>
      </node>
      <node id="216">
        <label>tools/lci/lciframework/main.c</label>
        <link refid="main_8c_source"/>
      </node>
      <node id="217">
        <label>tools/lci/lciframework/parser.c</label>
        <link refid="parser_8c_source"/>
      </node>
      <node id="213">
        <label>tools/lci/lciframework/parser.h</label>
        <link refid="tools/lci/lciframework/parser.h"/>
        <childnode refid="214" relation="include">
        </childnode>
        <childnode refid="216" relation="include">
        </childnode>
        <childnode refid="217" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_identifier_node" prot="public">IdentifierNode</innerclass>
    <innerclass refid="struct_identifier_node_list" prot="public">IdentifierNodeList</innerclass>
    <innerclass refid="struct_stmt_node" prot="public">StmtNode</innerclass>
    <innerclass refid="struct_stmt_node_list" prot="public">StmtNodeList</innerclass>
    <innerclass refid="struct_expr_node" prot="public">ExprNode</innerclass>
    <innerclass refid="struct_expr_node_list" prot="public">ExprNodeList</innerclass>
    <innerclass refid="struct_block_node" prot="public">BlockNode</innerclass>
    <innerclass refid="struct_block_node_list" prot="public">BlockNodeList</innerclass>
    <innerclass refid="union_constant_data" prot="public">ConstantData</innerclass>
    <innerclass refid="struct_constant_node" prot="public">ConstantNode</innerclass>
    <innerclass refid="struct_func_def_stmt_node" prot="public">FuncDefStmtNode</innerclass>
    <innerclass refid="struct_function_table" prot="public">FunctionTable</innerclass>
    <innerclass refid="struct_main_node" prot="public">MainNode</innerclass>
    <innerclass refid="struct_type_node" prot="public">TypeNode</innerclass>
    <innerclass refid="struct_cast_stmt_node" prot="public">CastStmtNode</innerclass>
    <innerclass refid="struct_print_stmt_node" prot="public">PrintStmtNode</innerclass>
    <innerclass refid="struct_input_stmt_node" prot="public">InputStmtNode</innerclass>
    <innerclass refid="struct_assignment_stmt_node" prot="public">AssignmentStmtNode</innerclass>
    <innerclass refid="struct_declaration_stmt_node" prot="public">DeclarationStmtNode</innerclass>
    <innerclass refid="struct_if_then_else_stmt_node" prot="public">IfThenElseStmtNode</innerclass>
    <innerclass refid="struct_switch_stmt_node" prot="public">SwitchStmtNode</innerclass>
    <innerclass refid="struct_return_stmt_node" prot="public">ReturnStmtNode</innerclass>
    <innerclass refid="struct_loop_stmt_node" prot="public">LoopStmtNode</innerclass>
    <innerclass refid="struct_cast_expr_node" prot="public">CastExprNode</innerclass>
    <innerclass refid="struct_func_call_expr_node" prot="public">FuncCallExprNode</innerclass>
    <innerclass refid="struct_op_expr_node" prot="public">OpExprNode</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="tools_2lci_2lciframework_2parser_8h_1a9c1bfaf3c0a28d12826afa7bd1b0a3db" prot="public" static="no">
        <name>StmtType</name>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a9c1bfaf3c0a28d12826afa7bd1b0a3dbac48fbc53356abf538e1b9a82c26b9d0f" prot="public">
          <name>ST_CAST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A <ref refid="struct_cast_stmt_node" kindref="compound">CastStmtNode</ref> structure. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a9c1bfaf3c0a28d12826afa7bd1b0a3dbac006f5ccb032e5289515312ebb05eafc" prot="public">
          <name>ST_PRINT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A <ref refid="struct_print_stmt_node" kindref="compound">PrintStmtNode</ref> structure. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a9c1bfaf3c0a28d12826afa7bd1b0a3dba877f8ae01f87269e55791b263ef11de3" prot="public">
          <name>ST_INPUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An <ref refid="struct_input_stmt_node" kindref="compound">InputStmtNode</ref> structure. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a9c1bfaf3c0a28d12826afa7bd1b0a3dba1fba94a778ce3ccaab31d0890a2a2b84" prot="public">
          <name>ST_ASSIGNMENT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An <ref refid="struct_assignment_stmt_node" kindref="compound">AssignmentStmtNode</ref> structure. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a9c1bfaf3c0a28d12826afa7bd1b0a3dba29c1e19db56743119614f20706148c9f" prot="public">
          <name>ST_DECLARATION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A <ref refid="struct_declaration_stmt_node" kindref="compound">DeclarationStmtNode</ref> structure. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a9c1bfaf3c0a28d12826afa7bd1b0a3dbae7a43236252ee79187f9bcbff3abd01e" prot="public">
          <name>ST_IFTHENELSE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An <ref refid="struct_if_then_else_stmt_node" kindref="compound">IfThenElseStmtNode</ref> structure. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a9c1bfaf3c0a28d12826afa7bd1b0a3dbaadbf33b7e96e07d9926316a1538bb0af" prot="public">
          <name>ST_SWITCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A <ref refid="struct_switch_stmt_node" kindref="compound">SwitchStmtNode</ref> structure. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a9c1bfaf3c0a28d12826afa7bd1b0a3dbadf3bebfb635325a631b72425fd516e88" prot="public">
          <name>ST_BREAK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A break statement (no structure is needed for this type of statement). </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a9c1bfaf3c0a28d12826afa7bd1b0a3dba9345c2e60bdda01593ceacd9703ee458" prot="public">
          <name>ST_RETURN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A <ref refid="struct_return_stmt_node" kindref="compound">ReturnStmtNode</ref> structure. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a9c1bfaf3c0a28d12826afa7bd1b0a3dba83f65b5c9db7d22d8f198dabb071563d" prot="public">
          <name>ST_LOOP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A <ref refid="struct_loop_stmt_node" kindref="compound">LoopStmtNode</ref> structure. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a9c1bfaf3c0a28d12826afa7bd1b0a3dbaccf515cf494faa5d5e273efbed1a49fe" prot="public">
          <name>ST_FUNCDEF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A <ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref> structure. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a9c1bfaf3c0a28d12826afa7bd1b0a3dba397e20d44d4f21f0bf3d80cbcaf29581" prot="public">
          <name>ST_EXPR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Denotes the type of statement a <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> stores. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="202" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" bodystart="202" bodyend="215"/>
      </memberdef>
      <memberdef kind="enum" id="tools_2lci_2lciframework_2parser_8h_1a3e262b377dc15baba6e58438868decb7" prot="public" static="no">
        <name>ExprType</name>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a3e262b377dc15baba6e58438868decb7a7d43da5aa202a29496e3e87fdc3716a2" prot="public">
          <name>ET_CAST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A <ref refid="struct_cast_expr_node" kindref="compound">CastExprNode</ref> structure. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a3e262b377dc15baba6e58438868decb7aef1d8419cc29f2b7f5b539f54f778d67" prot="public">
          <name>ET_CONSTANT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A <ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> structure. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a3e262b377dc15baba6e58438868decb7a415849a070cf63c493283c99e1be4d6d" prot="public">
          <name>ET_IDENTIFIER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An <ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> structure. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a3e262b377dc15baba6e58438868decb7af1b2203fbae8c7299dad2a022b88a17d" prot="public">
          <name>ET_FUNCCALL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A <ref refid="struct_func_call_expr_node" kindref="compound">FuncCallExprNode</ref> structure. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a3e262b377dc15baba6e58438868decb7a617f0c0aa78a4df760188842fafbeda1" prot="public">
          <name>ET_OP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An <ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref> structure. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a3e262b377dc15baba6e58438868decb7a934d40dd37c5438cb8cafc7d7d8007a1" prot="public">
          <name>ET_IMPVAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An <ref refid="impvar" kindref="compound">implicit variable</ref> (no structure is needed for this type of expression). </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Denotes the type of expression an <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> stores. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="239" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" bodystart="239" bodyend="246"/>
      </memberdef>
      <memberdef kind="enum" id="tools_2lci_2lciframework_2parser_8h_1a455cdd942ce73c87e99cb3f9d6a01926" prot="public" static="no">
        <name>ConstantType</name>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a455cdd942ce73c87e99cb3f9d6a01926adc97d8e7fac89aeac4d263b7ad7a44a9" prot="public">
          <name>CT_INTEGER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An integer value. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a455cdd942ce73c87e99cb3f9d6a01926a42e04fbece3e3dbf1da1b0e3ad6309d7" prot="public">
          <name>CT_FLOAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A floating point decimal value. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a455cdd942ce73c87e99cb3f9d6a01926a533555d2ed6bf4d8ab3710e80efa64e9" prot="public">
          <name>CT_BOOLEAN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A true/false value. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a455cdd942ce73c87e99cb3f9d6a01926aa47caaa683de5a62fb081b78756a8aad" prot="public">
          <name>CT_STRING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A character string value. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1a455cdd942ce73c87e99cb3f9d6a01926a05b2aafd8edb4168ff8953534f84db62" prot="public">
          <name>CT_NIL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Represents no value. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Denotes the type of a constant. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="289" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" bodystart="289" bodyend="295"/>
      </memberdef>
      <memberdef kind="enum" id="tools_2lci_2lciframework_2parser_8h_1aa1aa1c6a8f3bbed5b167bc2d4511b969" prot="public" static="no">
        <name>OpType</name>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1aa1aa1c6a8f3bbed5b167bc2d4511b969a96186829480e5b34b1373288e956b1c8" prot="public">
          <name>OP_ADD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Addition. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1aa1aa1c6a8f3bbed5b167bc2d4511b969a6c224b456bd394d4d8bad0631ca8e2b7" prot="public">
          <name>OP_SUB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Subtraction. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1aa1aa1c6a8f3bbed5b167bc2d4511b969ad86ad4e7b4ad59d0df5a8825ffb49c84" prot="public">
          <name>OP_MULT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Multiplication. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1aa1aa1c6a8f3bbed5b167bc2d4511b969a719aeab2140dd5f575d1559b95bf74e1" prot="public">
          <name>OP_DIV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Division. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1aa1aa1c6a8f3bbed5b167bc2d4511b969a39c596fc7eae450b7218bd97126e37c9" prot="public">
          <name>OP_MOD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Modulo. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1aa1aa1c6a8f3bbed5b167bc2d4511b969a5c270cf3e25cfa83f27b787be93b99f9" prot="public">
          <name>OP_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Maximum. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1aa1aa1c6a8f3bbed5b167bc2d4511b969a585b442561bc7848266fdcd29b55916a" prot="public">
          <name>OP_MIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Minimum. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1aa1aa1c6a8f3bbed5b167bc2d4511b969ae2310d00f26e94b32317ecd168fb7e18" prot="public">
          <name>OP_AND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Logical AND. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1aa1aa1c6a8f3bbed5b167bc2d4511b969af317be3def89f5f66558bbc402291176" prot="public">
          <name>OP_OR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Logical OR. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1aa1aa1c6a8f3bbed5b167bc2d4511b969aa0587506ce6da96de3a95a97d84b0fc4" prot="public">
          <name>OP_XOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Logical XOR. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1aa1aa1c6a8f3bbed5b167bc2d4511b969a36a6b73cc4823f54891a013e2cc760d1" prot="public">
          <name>OP_NOT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Logical NOT. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1aa1aa1c6a8f3bbed5b167bc2d4511b969a1634898deb6e4d1bcb15416034c641c5" prot="public">
          <name>OP_EQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Equality. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1aa1aa1c6a8f3bbed5b167bc2d4511b969a241d2a954c71b60422ca23248b1faa97" prot="public">
          <name>OP_NEQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Inequality. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="tools_2lci_2lciframework_2parser_8h_1aa1aa1c6a8f3bbed5b167bc2d4511b969ae364b3907d7a95b941480dba20643535" prot="public">
          <name>OP_CAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>String concatenation. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Denotes the type of operation an <ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref> performs. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="492" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" bodystart="492" bodyend="510"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1aede6f1aa190fca614cc6c6659b509702" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_main_node" kindref="compound">MainNode</ref> *</type>
        <definition>MainNode* createMainNode</definition>
        <argsstring>(BlockNode *, FunctionTable *)</argsstring>
        <name>createMainNode</name>
        <param>
          <type><ref refid="struct_block_node" kindref="compound">BlockNode</ref> *</type>
          <defname>block</defname>
          <briefdescription><para>[in] A pointer to the block of code to execute first. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_function_table" kindref="compound">FunctionTable</ref> *</type>
          <defname>functab</defname>
          <briefdescription><para>[in] A pointer to the function table associated with this block of code. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="struct_main_node" kindref="compound">MainNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>block</emphasis> was created by createBlockNode(StmtNodeList *). </para><simplesectsep/><para><emphasis>functab</emphasis> was created by createFunctionTable(void) and contains items added by addFuncDefStmtNode(FunctionTable *, FuncDefStmtNode *).</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_main_node" kindref="compound">MainNode</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteMainNode(MainNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="522" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="27" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a28fcbed542417c8d7a69e44ed44e5568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteMainNode</definition>
        <argsstring>(MainNode *)</argsstring>
        <name>deleteMainNode</name>
        <param>
          <type><ref refid="struct_main_node" kindref="compound">MainNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_main_node" kindref="compound">MainNode</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a <ref refid="struct_main_node" kindref="compound">MainNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createMainNode(BlockNode *, FunctionTable *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>node</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createMainNode(BlockNode *, FunctionTable *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="523" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="48" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a1ccf71ebbcfc1026dec5ef51857ab3b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_block_node" kindref="compound">BlockNode</ref> *</type>
        <definition>BlockNode* createBlockNode</definition>
        <argsstring>(StmtNodeList *)</argsstring>
        <name>createBlockNode</name>
        <param>
          <type><ref refid="struct_stmt_node_list" kindref="compound">StmtNodeList</ref> *</type>
          <defname>stmts</defname>
          <briefdescription><para>[in] A pointer to the list of statements which comprise the block of code. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="struct_block_node" kindref="compound">BlockNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>stmts</emphasis> was created by createStmtNodeList(void) and contains contents added by addStmtNode(StmtNodeList *, StmtNode *).</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_block_node" kindref="compound">BlockNode</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteBlockNode(BlockNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="525" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="66" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1ab74a604cd92b3184a14edc7adfdd6ab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteBlockNode</definition>
        <argsstring>(BlockNode *)</argsstring>
        <name>deleteBlockNode</name>
        <param>
          <type><ref refid="struct_block_node" kindref="compound">BlockNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_block_node" kindref="compound">BlockNode</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a <ref refid="struct_block_node" kindref="compound">BlockNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createBlockNode(StmtNodeList *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>node</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createBlockNode(StmtNodeList *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="526" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="85" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a6fd5021f338c03f9ad6a5b0707c0e0db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_block_node_list" kindref="compound">BlockNodeList</ref> *</type>
        <definition>BlockNodeList* createBlockNodeList</definition>
        <argsstring>(void)</argsstring>
        <name>createBlockNodeList</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="struct_block_node_list" kindref="compound">BlockNodeList</ref> structure.</para><para><simplesect kind="return"><para>A pointer to a <ref refid="struct_block_node_list" kindref="compound">BlockNodeList</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteBlockNodeList(BlockNodeList *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="527" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="99" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a82c303c29b241e1d0986fa0739fdee92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_block_node" kindref="compound">BlockNode</ref> *</type>
        <definition>BlockNode* addBlockNode</definition>
        <argsstring>(BlockNodeList *, BlockNode *)</argsstring>
        <name>addBlockNode</name>
        <param>
          <type><ref refid="struct_block_node_list" kindref="compound">BlockNodeList</ref> *</type>
          <defname>list</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_block_node_list" kindref="compound">BlockNodeList</ref> structure to add <emphasis>node</emphasis> to. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_block_node" kindref="compound">BlockNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in] A pointer to the <ref refid="struct_block_node" kindref="compound">BlockNode</ref> structure to add to <emphasis>list</emphasis>. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a <ref refid="struct_block_node" kindref="compound">BlockNode</ref> structure to a <ref refid="struct_block_node_list" kindref="compound">BlockNodeList</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>list</emphasis> was created by createBlockNodeList(void). </para><simplesectsep/><para><emphasis>node</emphasis> was created by createBlockNode(StmtNodeList *).</para></simplesect>
<simplesect kind="post"><para><emphasis>node</emphasis> will be added on to the end of <emphasis>list</emphasis> and the size of <emphasis>list</emphasis> will be updated accordingly.</para></simplesect>
<simplesect kind="return"><para>A pointer to the added <ref refid="struct_block_node" kindref="compound">BlockNode</ref> structure (will be the same as <emphasis>node</emphasis>).</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>realloc was unable to allocate memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="528" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="122" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a53cea05c5280e0c8332e978aeea57d96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteBlockNodeList</definition>
        <argsstring>(BlockNodeList *)</argsstring>
        <name>deleteBlockNodeList</name>
        <param>
          <type><ref refid="struct_block_node_list" kindref="compound">BlockNodeList</ref> *</type>
          <defname>list</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_block_node_list" kindref="compound">BlockNodeList</ref> structure to delete. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a <ref refid="struct_block_node_list" kindref="compound">BlockNodeList</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>list</emphasis> was created by createBlockNodeList(void) and contains items added by addBlockNode(BlockNodeList *, BlockNode *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>list</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createBlockNodeList(void) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="529" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="146" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1ac4d42ff490a8ecde62f48cafb7e88b29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> *</type>
        <definition>IdentifierNode* createIdentifierNode</definition>
        <argsstring>(char *, const char *, unsigned int)</argsstring>
        <name>createIdentifierNode</name>
        <param>
          <type>char *</type>
          <defname>image</defname>
          <briefdescription><para>[in] An array of characters that name the identifier. </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <defname>fname</defname>
          <briefdescription><para>[in] A pointer to the name of the file containing the identifier. </para></briefdescription>
        </param>
        <param>
          <type>unsigned</type>
          <declname>int</declname>
          <defname>line</defname>
          <briefdescription><para>[in] The line number from the source file that the identifier occurred on. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an <ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> structure.</para><para><simplesect kind="note"><para><emphasis>image</emphasis> is <bold>copied</bold> for use within the structure so it must be freed by the caller.</para></simplesect>
<simplesect kind="return"><para>A pointer to an <ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteIdentifierNode(IdentifierNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="531" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="264" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a172114a4323458918bf208dbdb7f383a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteIdentifierNode</definition>
        <argsstring>(IdentifierNode *)</argsstring>
        <name>deleteIdentifierNode</name>
        <param>
          <type><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes an <ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createIdentifierNode(char *, const char *, unsigned int).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>node</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createIdentifierNode(char *, const char *, unsigned int) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="532" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="293" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a40322c9998e30a772814356135217b42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_type_node" kindref="compound">TypeNode</ref> *</type>
        <definition>TypeNode* createTypeNode</definition>
        <argsstring>(ConstantType)</argsstring>
        <name>createTypeNode</name>
        <param>
          <type>ConstantType</type>
          <defname>type</defname>
          <briefdescription><para>[in] The type of value. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="struct_type_node" kindref="compound">TypeNode</ref> structure.</para><para><simplesect kind="return"><para>A pointer to a <ref refid="struct_type_node" kindref="compound">TypeNode</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteTypeNode(TypeNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="534" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="373" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a7809ba0295222aec7fb4bb4a54d17071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteTypeNode</definition>
        <argsstring>(TypeNode *)</argsstring>
        <name>deleteTypeNode</name>
        <param>
          <type><ref refid="struct_type_node" kindref="compound">TypeNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_type_node" kindref="compound">TypeNode</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a <ref refid="struct_type_node" kindref="compound">TypeNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createTypeNode(ConstantType).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>node</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createTypeNode(ConstantType) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="535" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="392" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a03d07ccf17f9681933e7b6c24060f292" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> *</type>
        <definition>StmtNode* createStmtNode</definition>
        <argsstring>(StmtType, void *)</argsstring>
        <name>createStmtNode</name>
        <param>
          <type>StmtType</type>
          <defname>type</defname>
          <briefdescription><para>[in] The type of statement stored in <emphasis>node</emphasis>. </para></briefdescription>
        </param>
        <param>
          <type>void *</type>
          <defname>stmt</defname>
          <briefdescription><para>[in] A pointer to the particular statement structure. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>stmt</emphasis> contains a structure created corresponding to <emphasis>type:</emphasis> <itemizedlist>
<listitem><para>ST_CAST: createCastStmtNode(IdentifierNode *, TypeNode *)</para></listitem><listitem><para>ST_PRINT: createPrintStmtNode(ExprNodeList *, int)</para></listitem><listitem><para>ST_INPUT: createInputStmtNode(IdentifierNode *)</para></listitem><listitem><para>ST_ASSIGNMENT: createAssignmentStmtNode(IdentifierNode *, ExprNode *)</para></listitem><listitem><para>ST_DECLARATION: createDeclarationStmtNode(IdentifierNode *, IdentifierNode *, ExprNode *)</para></listitem><listitem><para>ST_IFTHENELSE: createIfThenElseStmtNode(BlockNode *, BlockNode *, ExprNodeList *, BlockNodeList *)</para></listitem><listitem><para>ST_SWITCH: createSwitchStmtNode(ExprNodeList *, BlockNodeList *, BlockNode *)</para></listitem><listitem><para>ST_BREAK: no structure needed, use <computeroutput>NULL</computeroutput> </para></listitem><listitem><para>ST_RETURN: createReturnStmtNode(ExprNode *)</para></listitem><listitem><para>ST_LOOP: createLoopStmtNode(IdentifierNode *, IdentifierNode *, ExprNode *, ExprNode *, BlockNode *)</para></listitem><listitem><para>ST_FUNCDEF: createFuncDefStmtNode(IdentifierNode *, IdentifierNode *, IdentifierNodeList *, BlockNode *)</para></listitem><listitem><para>ST_EXPR: createExprNode(ExprType, void *)</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteStmtNode(StmtNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="537" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="419" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1ad3426d6af7f5af786b9fb350bb9b4a68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteStmtNode</definition>
        <argsstring>(StmtNode *)</argsstring>
        <name>deleteStmtNode</name>
        <param>
          <type><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in, out] A pointer to the <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createStmtNode(StmtType, void *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>stmt</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createStmtNode(StmtType, void *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="538" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="440" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a5387dc4eb63531315f26e6ad56edf0c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_stmt_node_list" kindref="compound">StmtNodeList</ref> *</type>
        <definition>StmtNodeList* createStmtNodeList</definition>
        <argsstring>(void)</argsstring>
        <name>createStmtNodeList</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="struct_stmt_node_list" kindref="compound">StmtNodeList</ref> structure.</para><para><simplesect kind="return"><para>A pointer to a <ref refid="struct_stmt_node_list" kindref="compound">StmtNodeList</ref> structure with no elements.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteStmtNodeList(StmtNodeList *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="539" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="515" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1aecb690082bda3102fb494d2ddb8a7e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> *</type>
        <definition>StmtNode* addStmtNode</definition>
        <argsstring>(StmtNodeList *, StmtNode *)</argsstring>
        <name>addStmtNode</name>
        <param>
          <type><ref refid="struct_stmt_node_list" kindref="compound">StmtNodeList</ref> *</type>
          <defname>list</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_stmt_node_list" kindref="compound">StmtNodeList</ref> structure to add <emphasis>node</emphasis> to. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in] A pointer to the <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> structure to add to <emphasis>list</emphasis>. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> to a <ref refid="struct_stmt_node_list" kindref="compound">StmtNodeList</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>list</emphasis> was created by createStmtNodeList(void). </para><simplesectsep/><para><emphasis>node</emphasis> was created by createStmtNode(StmtType, void *).</para></simplesect>
<simplesect kind="post"><para><emphasis>node</emphasis> will be added on to the end of <emphasis>list</emphasis> and the size of <emphasis>list</emphasis> will be updated accordingly.</para></simplesect>
<simplesect kind="return"><para>A pointer to the added <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> (will be the same as <emphasis>node</emphasis>).</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="540" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="538" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a8baebd86b051a96d5a40c130d7628398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteStmtNodeList</definition>
        <argsstring>(StmtNodeList *)</argsstring>
        <name>deleteStmtNodeList</name>
        <param>
          <type><ref refid="struct_stmt_node_list" kindref="compound">StmtNodeList</ref> *</type>
          <defname>list</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_stmt_node_list" kindref="compound">StmtNodeList</ref> structure to delete. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a <ref refid="struct_stmt_node_list" kindref="compound">StmtNodeList</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>list</emphasis> was created by createStmtNodeList(void) and contains items added by addStmtNode(StmtNodeList *, StmtNode *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>list</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createStmtNodeList(void) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="541" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="562" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1ac5b073cedc0cf9651de64383d7ad6256" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_cast_stmt_node" kindref="compound">CastStmtNode</ref> *</type>
        <definition>CastStmtNode* createCastStmtNode</definition>
        <argsstring>(IdentifierNode *, TypeNode *)</argsstring>
        <name>createCastStmtNode</name>
        <param>
          <type><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> *</type>
          <defname>target</defname>
          <briefdescription><para>[in] A pointer to the name of the variable whose type is to be changed to <emphasis>newtype</emphasis>. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_type_node" kindref="compound">TypeNode</ref> *</type>
          <defname>newtype</defname>
          <briefdescription><para>[in] A pointer to the type to change <emphasis>target</emphasis> to. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="struct_cast_stmt_node" kindref="compound">CastStmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>target</emphasis> was created by createIdentifierNode(char *, const char *, unsigned int). </para><simplesectsep/><para><emphasis>newtype</emphasis> was created by createTypeNode(ConstantType).</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_cast_stmt_node" kindref="compound">CastStmtNode</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteCastStmtNode(CastStmtNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="543" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="582" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1add80b6e5dd013da7e137d346b95041ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteCastStmtNode</definition>
        <argsstring>(CastStmtNode *)</argsstring>
        <name>deleteCastStmtNode</name>
        <param>
          <type><ref refid="struct_cast_stmt_node" kindref="compound">CastStmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_cast_stmt_node" kindref="compound">CastStmtNode</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a <ref refid="struct_cast_stmt_node" kindref="compound">CastStmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createCastStmtNode(IdentifierNode *, TypeNode *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>node</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createCastStmtNode(IdentifierNode *, TypeNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="544" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="603" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a4e70526c300e845a8492052ca4ccb748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_print_stmt_node" kindref="compound">PrintStmtNode</ref> *</type>
        <definition>PrintStmtNode* createPrintStmtNode</definition>
        <argsstring>(ExprNodeList *, int)</argsstring>
        <name>createPrintStmtNode</name>
        <param>
          <type><ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref> *</type>
          <defname>args</defname>
          <briefdescription><para>[in] A pointer to the list of expressions to evaluate and print. </para></briefdescription>
        </param>
        <param>
          <type>int</type>
          <defname>nonl</defname>
          <briefdescription><para>[in] Denotes an ending newline should be surpressed if not <computeroutput>0</computeroutput> and printed if <computeroutput>0</computeroutput>. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="struct_print_stmt_node" kindref="compound">PrintStmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>args</emphasis> was created by createExprNodeList(void) and contains items added by addExprNode(ExprNodeList *, ExprNode *).</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_print_stmt_node" kindref="compound">PrintStmtNode</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deletePrintStmtNode(PrintStmtNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="546" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="621" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1acd22849902b2cb2ec9bc398bb81a9da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deletePrintStmtNode</definition>
        <argsstring>(PrintStmtNode *)</argsstring>
        <name>deletePrintStmtNode</name>
        <param>
          <type><ref refid="struct_print_stmt_node" kindref="compound">PrintStmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_print_stmt_node" kindref="compound">PrintStmtNode</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a <ref refid="struct_print_stmt_node" kindref="compound">PrintStmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createPrintStmtNode(ExprNodeList *, int).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>node</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createPrintStmtNode(ExprNodeList *, int) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="547" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="642" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1ac08e9f37e87019383d3fd17e0ac6d0f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_input_stmt_node" kindref="compound">InputStmtNode</ref> *</type>
        <definition>InputStmtNode* createInputStmtNode</definition>
        <argsstring>(IdentifierNode *)</argsstring>
        <name>createInputStmtNode</name>
        <param>
          <type><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> *</type>
          <defname>target</defname>
          <briefdescription><para>[in] A pointer to the name of the variable to store the input in. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an <ref refid="struct_input_stmt_node" kindref="compound">InputStmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>target</emphasis> was created by createIdentifierNode(char *, const char *, unsigned int).</para></simplesect>
<simplesect kind="return"><para>A pointer to an <ref refid="struct_input_stmt_node" kindref="compound">InputStmtNode</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteInputStmtNode(InputStmtNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="549" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="658" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1af7b768777783fdfec26218b6f5810084" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteInputStmtNode</definition>
        <argsstring>(InputStmtNode *)</argsstring>
        <name>deleteInputStmtNode</name>
        <param>
          <type><ref refid="struct_input_stmt_node" kindref="compound">InputStmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_input_stmt_node" kindref="compound">InputStmtNode</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes an <ref refid="struct_input_stmt_node" kindref="compound">InputStmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createInputStmtNode(IdentifierNode *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>node</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createInputStmtNode(IdentifierNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="550" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="677" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a5472e39e71e1e0b1587db71d3fafbd32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_assignment_stmt_node" kindref="compound">AssignmentStmtNode</ref> *</type>
        <definition>AssignmentStmtNode* createAssignmentStmtNode</definition>
        <argsstring>(IdentifierNode *, ExprNode *)</argsstring>
        <name>createAssignmentStmtNode</name>
        <param>
          <type><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> *</type>
          <defname>target</defname>
          <briefdescription><para>[in] A pointer to the name of the variable to store the evaluated contents of a <emphasis>expr</emphasis> into. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_expr_node" kindref="compound">ExprNode</ref> *</type>
          <defname>expr</defname>
          <briefdescription><para>[in] A pointer to the expression to evaluate and store in <emphasis>target</emphasis>. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an <ref refid="struct_assignment_stmt_node" kindref="compound">AssignmentStmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>target</emphasis> was created by createIdentifierNode(char *, const char *, unsigned int). </para><simplesectsep/><para><emphasis>expr</emphasis> was created by createExprNode(ExprType, void *).</para></simplesect>
<simplesect kind="return"><para>A pointer to an <ref refid="struct_assignment_stmt_node" kindref="compound">AssignmentStmtNode</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteAssignmentStmtNode(AssignmentStmtNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="552" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="695" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1aff144529c2458c869a60b2486a6436e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteAssignmentStmtNode</definition>
        <argsstring>(AssignmentStmtNode *)</argsstring>
        <name>deleteAssignmentStmtNode</name>
        <param>
          <type><ref refid="struct_assignment_stmt_node" kindref="compound">AssignmentStmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_assignment_stmt_node" kindref="compound">AssignmentStmtNode</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes an <ref refid="struct_assignment_stmt_node" kindref="compound">AssignmentStmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createAssignmentStmtNode(IdentifierNode *, ExprNode *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>node</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createAssignmentStmtNode(IdentifierNode *, ExprNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="553" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="716" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a64c9ac83b49dae89312b78b4f4ee52a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_declaration_stmt_node" kindref="compound">DeclarationStmtNode</ref> *</type>
        <definition>DeclarationStmtNode* createDeclarationStmtNode</definition>
        <argsstring>(IdentifierNode *, IdentifierNode *, ExprNode *)</argsstring>
        <name>createDeclarationStmtNode</name>
        <param>
          <type><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>[in] A pointer to the scope to create the variable in. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> *</type>
          <defname>target</defname>
          <briefdescription><para>[in] A pointer to the name of the variable to create. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_expr_node" kindref="compound">ExprNode</ref> *</type>
          <defname>expr</defname>
          <briefdescription><para>[in] An optional pointer to the expression to initialize <emphasis>target</emphasis> to. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="struct_declaration_stmt_node" kindref="compound">DeclarationStmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>scope</emphasis> was created by createIdentifierNode(char *, const char *, unsigned int). </para><simplesectsep/><para><emphasis>target</emphasis> was created by createIdentifierNode(char *, const char *, unsigned int). </para><simplesectsep/><para><emphasis>expr</emphasis> was created by createExprNode(ExprType, void *).</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_declaration_stmt_node" kindref="compound">DeclarationStmtNode</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteDeclarationStmtNode(DeclarationStmtNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="555" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="736" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1aa081aade628b6dc3117400d19969ce82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteDeclarationStmtNode</definition>
        <argsstring>(DeclarationStmtNode *)</argsstring>
        <name>deleteDeclarationStmtNode</name>
        <param>
          <type><ref refid="struct_declaration_stmt_node" kindref="compound">DeclarationStmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_declaration_stmt_node" kindref="compound">DeclarationStmtNode</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a <ref refid="struct_declaration_stmt_node" kindref="compound">DeclarationStmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createDeclarationStmtNode(IdentifierNode *, IdentifierNode *, ExprNode *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>node</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createDeclarationStmtNode(IdentifierNode *, IdentifierNode *, ExprNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="556" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="759" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a77059efa3d5fc7727a1453e51cc86205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_if_then_else_stmt_node" kindref="compound">IfThenElseStmtNode</ref> *</type>
        <definition>IfThenElseStmtNode* createIfThenElseStmtNode</definition>
        <argsstring>(BlockNode *, BlockNode *, ExprNodeList *, BlockNodeList *)</argsstring>
        <name>createIfThenElseStmtNode</name>
        <param>
          <type><ref refid="struct_block_node" kindref="compound">BlockNode</ref> *</type>
          <defname>yes</defname>
          <briefdescription><para>[in] A pointer to the block of code to execute if the <ref refid="impvar" kindref="compound">implicit variable</ref> casts to <computeroutput>false</computeroutput>. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_block_node" kindref="compound">BlockNode</ref> *</type>
          <defname>no</defname>
          <briefdescription><para>[in] A pointer to the block of code to execute if the <ref refid="impvar" kindref="compound">implicit variable</ref> casts to <computeroutput>false</computeroutput> <bold>and</bold> the evaluations of all of the <emphasis>guards</emphasis> cast to <computeroutput>false</computeroutput>. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref> *</type>
          <defname>guards</defname>
          <briefdescription><para>[in] A pointer to the expressions to test if the <ref refid="impvar" kindref="compound">implicit variable</ref> casts to <computeroutput>false</computeroutput>. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_block_node_list" kindref="compound">BlockNodeList</ref> *</type>
          <defname>blocks</defname>
          <briefdescription><para>[in] A pointer to the respective blocks of code to execute if one of the evaluated <emphasis>guards</emphasis> casts to <computeroutput>true</computeroutput>. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an <ref refid="struct_if_then_else_stmt_node" kindref="compound">IfThenElseStmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>yes</emphasis> was created by createBlockNode(StmtNodeList *). </para><simplesectsep/><para><emphasis>no</emphasis> was created by createBlockNode(StmtNodeList *). </para><simplesectsep/><para><emphasis>guards</emphasis> was created by createExprNodeList(void) and contains items added by addExprNode(ExprNodeList *, ExprNode *). </para><simplesectsep/><para><emphasis>blocks</emphasis> was created by createBlockNodeList(void) and contains items added by addBlockNode(BlockNodeList *, BlockNode *).</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_if_then_else_stmt_node" kindref="compound">IfThenElseStmtNode</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteIfThenElseStmtNode(IfThenElseStmtNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="558" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="783" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a0b3b0368d7866de3f51b612cac29d986" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteIfThenElseStmtNode</definition>
        <argsstring>(IfThenElseStmtNode *)</argsstring>
        <name>deleteIfThenElseStmtNode</name>
        <param>
          <type><ref refid="struct_if_then_else_stmt_node" kindref="compound">IfThenElseStmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_if_then_else_stmt_node" kindref="compound">IfThenElseStmtNode</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a <ref refid="struct_if_then_else_stmt_node" kindref="compound">IfThenElseStmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createIfThenElseStmtNode(BlockNode *, BlockNode *, ExprNodeList *, BlockNodeList *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>node</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createIfThenElseStmtNode(BlockNode *, BlockNode *, ExprNodeList *, BlockNodeList *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="559" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="808" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a6ce399d574c160db73f33b8b51cad643" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_switch_stmt_node" kindref="compound">SwitchStmtNode</ref> *</type>
        <definition>SwitchStmtNode* createSwitchStmtNode</definition>
        <argsstring>(ExprNodeList *, BlockNodeList *, BlockNode *)</argsstring>
        <name>createSwitchStmtNode</name>
        <param>
          <type><ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref> *</type>
          <defname>guards</defname>
          <briefdescription><para>[in] A pointer to the expressions to evaluate and compare to the <ref refid="impvar" kindref="compound">implicit variable</ref>. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_block_node_list" kindref="compound">BlockNodeList</ref> *</type>
          <defname>blocks</defname>
          <briefdescription><para>[in] A pointer to the respective blocks of code to execute if one of the <emphasis>guards</emphasis> matches the <ref refid="impvar" kindref="compound">implicit variable</ref>. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_block_node" kindref="compound">BlockNode</ref> *</type>
          <defname>def</defname>
          <briefdescription><para>[in] A pointer to the default block of code to execute if none of the <emphasis>guards</emphasis> match the <ref refid="impvar" kindref="compound">implicit variable</ref>. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="struct_switch_stmt_node" kindref="compound">SwitchStmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>guards</emphasis> was created by createExprNodeList(void) and contains items added by addExprNode(ExprNodeList *, ExprNode *). </para><simplesectsep/><para><emphasis>blocks</emphasis> was created by createBlockNodeList(void) and contains items added by addBlockNode(BlockNodeList *, BlockNode *). </para><simplesectsep/><para><emphasis>def</emphasis> was created by createBlockNode(StmtNodeList *).</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_switch_stmt_node" kindref="compound">SwitchStmtNode</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteSwitchStmtNode(SwitchStmtNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="561" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="831" bodyend="844"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1aef7012393fb0067f729e2ac0d97a8e57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteSwitchStmtNode</definition>
        <argsstring>(SwitchStmtNode *)</argsstring>
        <name>deleteSwitchStmtNode</name>
        <param>
          <type><ref refid="struct_switch_stmt_node" kindref="compound">SwitchStmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_switch_stmt_node" kindref="compound">SwitchStmtNode</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a <ref refid="struct_switch_stmt_node" kindref="compound">SwitchStmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createSwitchStmtNode(ExprNodeList *, BlockNodeList *, BlockNode *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>node</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createSwitchStmtNode(ExprNodeList *, BlockNodeList *, BlockNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="562" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="854" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a1fd75c113702e7cc8f1769d2f0fe7473" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_return_stmt_node" kindref="compound">ReturnStmtNode</ref> *</type>
        <definition>ReturnStmtNode* createReturnStmtNode</definition>
        <argsstring>(ExprNode *)</argsstring>
        <name>createReturnStmtNode</name>
        <param>
          <type><ref refid="struct_expr_node" kindref="compound">ExprNode</ref> *</type>
          <defname>value</defname>
          <briefdescription><para>[in] A pointer to the value to return. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="struct_return_stmt_node" kindref="compound">ReturnStmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>value</emphasis> was created by createExprNode(ExprType, void *).</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_return_stmt_node" kindref="compound">ReturnStmtNode</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteReturnStmtNode(ReturnStmtNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="564" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="872" bodyend="881"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1ae5ff7bc709f1e7dc0ff4c39acfedb38e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteReturnStmtNode</definition>
        <argsstring>(ReturnStmtNode *)</argsstring>
        <name>deleteReturnStmtNode</name>
        <param>
          <type><ref refid="struct_return_stmt_node" kindref="compound">ReturnStmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_return_stmt_node" kindref="compound">ReturnStmtNode</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a <ref refid="struct_return_stmt_node" kindref="compound">ReturnStmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createReturnStmtNode(ExprNode *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>node</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createReturnStmtNode(ExprNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="565" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="891" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1aeea35c9baa9e391c23b4b4076fa4a353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_loop_stmt_node" kindref="compound">LoopStmtNode</ref> *</type>
        <definition>LoopStmtNode* createLoopStmtNode</definition>
        <argsstring>(IdentifierNode *, IdentifierNode *, ExprNode *, ExprNode *, BlockNode *)</argsstring>
        <name>createLoopStmtNode</name>
        <param>
          <type><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> *</type>
          <defname>name</defname>
          <briefdescription><para>[in] A pointer to the name of the loop. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> *</type>
          <defname>var</defname>
          <briefdescription><para>[in] A pointer to the name of the variable to be updated by <emphasis>update</emphasis>. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_expr_node" kindref="compound">ExprNode</ref> *</type>
          <defname>guard</defname>
          <briefdescription><para>[in] A pointer to the expression to determine if the loop will continue. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_expr_node" kindref="compound">ExprNode</ref> *</type>
          <defname>update</defname>
          <briefdescription><para>[in] A pointer to the expression to evaluate to update <emphasis>var</emphasis>. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_block_node" kindref="compound">BlockNode</ref> *</type>
          <defname>body</defname>
          <briefdescription><para>[in] A pointer to the block of code to be executed with each iteration of the loop. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="struct_loop_stmt_node" kindref="compound">LoopStmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>name</emphasis> was created by createIdentifierNode(char *, const char *, unsigned int). </para><simplesectsep/><para><emphasis>var</emphasis> was created by createIdentifierNode(char *, const char *, unsigned int). </para><simplesectsep/><para><emphasis>guard</emphasis> was created by createExprNode(ExprType, void *). </para><simplesectsep/><para><emphasis>update</emphasis> was created by createExprNode(ExprType, void *). </para><simplesectsep/><para><emphasis>body</emphasis> was created by createBlockNode(StmtNodeList *).</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_loop_stmt_node" kindref="compound">LoopStmtNode</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteLoopStmtNode(LoopStmtNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="567" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="911" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1af692617245a1b2f39c06b4a4b1f283e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteLoopStmtNode</definition>
        <argsstring>(LoopStmtNode *)</argsstring>
        <name>deleteLoopStmtNode</name>
        <param>
          <type><ref refid="struct_loop_stmt_node" kindref="compound">LoopStmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_loop_stmt_node" kindref="compound">LoopStmtNode</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a <ref refid="struct_loop_stmt_node" kindref="compound">LoopStmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createLoopStmtNode(IdentifierNode *, IdentifierNode *, ExprNode *, ExprNode *, BlockNode *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>node</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createLoopStmtNode(IdentifierNode *, IdentifierNode *, ExprNode *, ExprNode *, BlockNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="568" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="938" bodyend="947"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1aa359a8e66fa49e328db4786b5d3b83ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref> *</type>
        <definition>FuncDefStmtNode* createFuncDefStmtNode</definition>
        <argsstring>(IdentifierNode *, IdentifierNode *, IdentifierNodeList *, BlockNode *)</argsstring>
        <name>createFuncDefStmtNode</name>
        <param>
          <type><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> *</type>
          <defname>scope</defname>
          <briefdescription><para>[in] A pointer to the scope to define the function in. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> *</type>
          <defname>name</defname>
          <briefdescription><para>[in] A pointer to the name of the function. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_identifier_node_list" kindref="compound">IdentifierNodeList</ref> *</type>
          <defname>args</defname>
          <briefdescription><para>[in] A pointer to an array of the names of the arguments of the function. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_block_node" kindref="compound">BlockNode</ref> *</type>
          <defname>body</defname>
          <briefdescription><para>[in] A pointer to the block of code defined by the function. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>scope</emphasis> was created by createIdentifierNode(char *, const char *, unsigned int). </para><simplesectsep/><para><emphasis>name</emphasis> was created by createIdentifierNode(char *, const char *, unsigned int). </para><simplesectsep/><para><emphasis>args</emphasis> was created by createIdentifierNodeList(void) and contains items added by addIdentifierNode(IdentifierNodeList *, IdentifierNode *). </para><simplesectsep/><para><emphasis>body</emphasis> was created by createBlockNode(StmtNodeList *).</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteFuncDefStmtNode(FuncDefStmtNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="570" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="963" bodyend="978"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a3a0ab84d7da1e9843bae68013f70e201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteFuncDefStmtNode</definition>
        <argsstring>(FuncDefStmtNode *)</argsstring>
        <name>deleteFuncDefStmtNode</name>
        <param>
          <type><ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a <ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createFuncDefStmtNode(IdentifierNode *, IdentifierNode *, IdentifierNodeList *, BlockNode *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>node</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createFuncDefStmtNode(IdentifierNode *, IdentifierNode *, IdentifierNodeList *, BlockNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="571" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="988" bodyend="996"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a86d41d96b7c824417033514e15375c7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_expr_node" kindref="compound">ExprNode</ref> *</type>
        <definition>ExprNode* createExprNode</definition>
        <argsstring>(ExprType, void *)</argsstring>
        <name>createExprNode</name>
        <param>
          <type>ExprType</type>
          <defname>type</defname>
          <briefdescription><para>[in] The type of expression stored in <emphasis>expr</emphasis>. </para></briefdescription>
        </param>
        <param>
          <type>void *</type>
          <defname>expr</defname>
          <briefdescription><para>[in] A pointer to the particular expression structure. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>expr</emphasis> contains a structure created corresponding to <emphasis>type:</emphasis> <itemizedlist>
<listitem><para>ET_CAST: createCastExprNode(ExprNode *, TypeNode *)</para></listitem><listitem><para>ET_CONSTANT: createBooleanConstantNode(int), createIntegerConstantNode(int), createFloatConstantNode(float), or createStringConstantNode(char *).</para></listitem><listitem><para>ET_IDENTIFIER: createIdentifierNode(char *, const char *, unsigned int)</para></listitem><listitem><para>ET_FUNCCALL: createFuncCallExprNode(FuncDefStmtNode *, ExprNodeList *)</para></listitem><listitem><para>ET_OP: createOpExprNode(OpType, ExprNodeList *)</para></listitem><listitem><para>ET_IMPVAR: (for the <ref refid="impvar" kindref="compound">implicit variable</ref>) no structure needed, use <computeroutput>NULL</computeroutput> </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="return"><para>A pointer to an <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteExprNode(ExprNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="573" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1014" bodyend="1025"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a977f506aaf34143ed3d39537c423331d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteExprNode</definition>
        <argsstring>(ExprNode *)</argsstring>
        <name>deleteExprNode</name>
        <param>
          <type><ref refid="struct_expr_node" kindref="compound">ExprNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes an <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createExprNode(ExprType, void *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>node</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createExprNode(ExprType, void *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="574" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1035" bodyend="1061"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a976d79408740dce7ba2723415f9180b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref> *</type>
        <definition>ExprNodeList* createExprNodeList</definition>
        <argsstring>(void)</argsstring>
        <name>createExprNodeList</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an <ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref> structure.</para><para><simplesect kind="return"><para>A pointer to an <ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteExprNodeList(ExprNodeList *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="575" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1070" bodyend="1080"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1aca3e20be1208ff3d8c02c0cbfbee4333" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_expr_node" kindref="compound">ExprNode</ref> *</type>
        <definition>ExprNode* addExprNode</definition>
        <argsstring>(ExprNodeList *, ExprNode *)</argsstring>
        <name>addExprNode</name>
        <param>
          <type><ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref> *</type>
          <defname>list</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref> structure to add <emphasis>node</emphasis> to. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_expr_node" kindref="compound">ExprNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in] A pointer to the <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure to add to <emphasis>list</emphasis>. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds an <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure to an <ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>list</emphasis> was created by createExprNodeList(void). </para><simplesectsep/><para><emphasis>node</emphasis> was created by createExprNode(ExprType, void *).</para></simplesect>
<simplesect kind="post"><para><emphasis>node</emphasis> will be added on to the end of <emphasis>list</emphasis> and the size of <emphasis>list</emphasis> will be updated accordingly.</para></simplesect>
<simplesect kind="return"><para>A pointer to the added <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure (will be the same as <emphasis>node</emphasis>).</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>realloc was unable to allocate memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="576" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1094" bodyend="1107"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1acfc7f97a162f8af2c7e2720c3564efac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteExprNodeList</definition>
        <argsstring>(ExprNodeList *)</argsstring>
        <name>deleteExprNodeList</name>
        <param>
          <type><ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref> *</type>
          <defname>list</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref> structure to delete. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes an <ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>list</emphasis> was created by createExprNodeList(void) and contains items added by addExprNode(ExprNodeList *, ExprNode *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>list</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createExprNodeList(void) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="577" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1118" bodyend="1126"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1af22de93fc03249d6ea35fb9dc162cb6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_cast_expr_node" kindref="compound">CastExprNode</ref> *</type>
        <definition>CastExprNode* createCastExprNode</definition>
        <argsstring>(ExprNode *, TypeNode *)</argsstring>
        <name>createCastExprNode</name>
        <param>
          <type><ref refid="struct_expr_node" kindref="compound">ExprNode</ref> *</type>
          <defname>target</defname>
          <briefdescription><para>[in] A pointer to the expression to cast. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_type_node" kindref="compound">TypeNode</ref> *</type>
          <defname>newtype</defname>
          <briefdescription><para>[in] A pointer to the type to cast the copy of <emphasis>target</emphasis> to. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="struct_cast_expr_node" kindref="compound">CastExprNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>target</emphasis> was created by createExprNode(ExprType, void *). </para><simplesectsep/><para><emphasis>newtype</emphasis> was created by createTypeNode(ConstantType).</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_cast_expr_node" kindref="compound">CastExprNode</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteCastExprNode(CastExprNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="579" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1138" bodyend="1149"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a273678c168bffcb8e7d9346deaa5d7bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteCastExprNode</definition>
        <argsstring>(CastExprNode *)</argsstring>
        <name>deleteCastExprNode</name>
        <param>
          <type><ref refid="struct_cast_expr_node" kindref="compound">CastExprNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_cast_expr_node" kindref="compound">CastExprNode</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a <ref refid="struct_cast_expr_node" kindref="compound">CastExprNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createCastExprNode(ExprNode *, TypeNode *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>node</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createCastExprNode(ExprNode *, TypeNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="580" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1159" bodyend="1165"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a0eabd33815315aac8c56ee722efaa542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_func_call_expr_node" kindref="compound">FuncCallExprNode</ref> *</type>
        <definition>FuncCallExprNode* createFuncCallExprNode</definition>
        <argsstring>(FuncDefStmtNode *, ExprNodeList *)</argsstring>
        <name>createFuncCallExprNode</name>
        <param>
          <type><ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref> *</type>
          <defname>def</defname>
          <briefdescription><para>[in] A pointer to the function definition to call. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref> *</type>
          <defname>args</defname>
          <briefdescription><para>[in] A pointer to an <ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref> structure of arguments to be supplied to the function defined by <emphasis>def</emphasis>. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="struct_func_call_expr_node" kindref="compound">FuncCallExprNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>def</emphasis> was created by createFuncDefStmtNode(IdentifierNode *, IdentifierNode *, IdentifierNodeList *, BlockNode *). </para><simplesectsep/><para><emphasis>args</emphasis> was created by createExprNodeList(void) and contains items added by addExprNode(ExprNodeList *, ExprNode *).</para></simplesect>
<simplesect kind="return"><para>A pointer to a <ref refid="struct_func_call_expr_node" kindref="compound">FuncCallExprNode</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteFuncCallExprNode(FuncCallExprNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="582" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1179" bodyend="1190"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1ad80ddf037dd5a1d1b7107323c3f39e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteFuncCallExprNode</definition>
        <argsstring>(FuncCallExprNode *)</argsstring>
        <name>deleteFuncCallExprNode</name>
        <param>
          <type><ref refid="struct_func_call_expr_node" kindref="compound">FuncCallExprNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_func_call_expr_node" kindref="compound">FuncCallExprNode</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a <ref refid="struct_func_call_expr_node" kindref="compound">FuncCallExprNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createFuncCallExprNode(FuncDefStmtNode *, ExprNodeList *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>node</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createFuncCallExprNode(FuncDefStmtNode *, ExprNodeList *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="583" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1200" bodyend="1205"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a29061f987619e3306da8fc82929d2058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref> *</type>
        <definition>OpExprNode* createOpExprNode</definition>
        <argsstring>(OpType, ExprNodeList *)</argsstring>
        <name>createOpExprNode</name>
        <param>
          <type>OpType</type>
          <defname>type</defname>
          <briefdescription><para>[in] The type of operation to perform on <emphasis>args</emphasis>. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref> *</type>
          <defname>args</defname>
          <briefdescription><para>[in] A pointer to the arguments to perform the operation on. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an <ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>args</emphasis> was created by createExprNodeList(void) and contains items added by addExprNode(ExprNodeList *, ExprNode *).</para></simplesect>
<simplesect kind="return"><para>A pointer to an <ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteOpExprNode(OpExprNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="585" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1217" bodyend="1228"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a7255469099b2c0d3f87ed6fe4e2c0034" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteOpExprNode</definition>
        <argsstring>(OpExprNode *)</argsstring>
        <name>deleteOpExprNode</name>
        <param>
          <type><ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes an <ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by createOpExprNode(OpType, ExprNodeList *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>node</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createOpExprNode(OpType, ExprNodeList *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="586" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1238" bodyend="1243"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a9c514111216208f96820a3362fa12baa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_function_table" kindref="compound">FunctionTable</ref> *</type>
        <definition>FunctionTable* createFunctionTable</definition>
        <argsstring>(void)</argsstring>
        <name>createFunctionTable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="struct_function_table" kindref="compound">FunctionTable</ref> structure.</para><para><simplesect kind="return"><para>A pointer to a <ref refid="struct_function_table" kindref="compound">FunctionTable</ref> structure with no elements.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteFunctionTable(FunctionTable *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="588" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1252" bodyend="1262"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a9fba04eb0e7beb94e0a16c72d10686f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref> *</type>
        <definition>FuncDefStmtNode* addFuncDefStmtNode</definition>
        <argsstring>(FunctionTable *, FuncDefStmtNode *)</argsstring>
        <name>addFuncDefStmtNode</name>
        <param>
          <type><ref refid="struct_function_table" kindref="compound">FunctionTable</ref> *</type>
          <defname>table</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_function_table" kindref="compound">FunctionTable</ref> structure to add <emphasis>node</emphasis> to. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in] A pointer to the <ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref> structure to add to <emphasis>table</emphasis>. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a <ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref> to a <ref refid="struct_function_table" kindref="compound">FunctionTable</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>table</emphasis> was created by createFunctionTable(void). </para><simplesectsep/><para><emphasis>node</emphasis> was created by createFuncDefStmtNode(IdentifierNode *, IdentifierNode *, IdentifierNodeList *, BlockNode *).</para></simplesect>
<simplesect kind="post"><para><emphasis>node</emphasis> will be added on to the end of <emphasis>table</emphasis> and the size of <emphasis>table</emphasis> will be updated accordingly.</para></simplesect>
<simplesect kind="return"><para>A pointer to the added <ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref> structure (will be the same as <emphasis>node</emphasis>).</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>realloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>lookupFuncDefStmtNode(FunctionTable *, const char *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="589" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1278" bodyend="1291"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a7c65e4f90f1a60f4c2366a987ce07bf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteFunctionTable</definition>
        <argsstring>(FunctionTable *)</argsstring>
        <name>deleteFunctionTable</name>
        <param>
          <type><ref refid="struct_function_table" kindref="compound">FunctionTable</ref> *</type>
          <defname>table</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_function_table" kindref="compound">FunctionTable</ref> structure to delete. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a <ref refid="struct_function_table" kindref="compound">FunctionTable</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>table</emphasis> was created by createFunctionTable(void).</para></simplesect>
<simplesect kind="post"><para>The memory of the function table and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createFunctionTable(void) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="590" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1301" bodyend="1308"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1ac67be7927b7e20cd1c702c8ca9ae4196" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref> *</type>
        <definition>FuncDefStmtNode* lookupFuncDefStmtNode</definition>
        <argsstring>(FunctionTable *, const char *)</argsstring>
        <name>lookupFuncDefStmtNode</name>
        <param>
          <type><ref refid="struct_function_table" kindref="compound">FunctionTable</ref> *</type>
          <defname>table</defname>
          <briefdescription><para>[in] A pointer to the <ref refid="struct_function_table" kindref="compound">FunctionTable</ref> structure to search for <emphasis>name</emphasis>. </para></briefdescription>
        </param>
        <param>
          <type>const char *</type>
          <defname>name</defname>
          <briefdescription><para>[in] The name of the function to look up. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Looks up a function definition by its name.</para><para><simplesect kind="pre"><para><emphasis>table</emphasis> was created by createFunctionTable(void) and contains items added by addFuncDefStmtNode(FunctionTable *, FuncDefStmtNode *).</para></simplesect>
<simplesect kind="return"><para>A pointer to the <ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref> structure named <emphasis>name</emphasis>.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>No such <ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref> structure exists.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>addFuncDefStmtNode(FunctionTable *, FuncDefStmtNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="591" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1320" bodyend="1329"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a0571084247683388718103a374868a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int acceptToken</definition>
        <argsstring>(Token ***, TokenType)</argsstring>
        <name>acceptToken</name>
        <param>
          <type><ref refid="struct_token" kindref="compound">Token</ref> ***</type>
          <defname>tokenp</defname>
          <briefdescription><para>[in,out] A pointer to the position of the next token to parse in an array of <ref refid="struct_token" kindref="compound">Token</ref> structures. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="tokenizer_8h_1aa520fbf142ba1e7e659590c07da31921" kindref="member">TokenType</ref></type>
          <defname>token</defname>
          <briefdescription><para>[in] The type of token to match. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if the token pointed to by <emphasis>tokenp</emphasis> matches <emphasis>token</emphasis> and if it does, advances the token pointer to the next token in the array.</para><para><simplesect kind="note"><para>Unlike peekToken(Token ***, TokenType) and nextToken(Token ***, TokenType), this function <bold>does</bold> modify <emphasis>tokenp</emphasis>.</para></simplesect>
<simplesect kind="pre"><para><emphasis>tokenp</emphasis> points to a position in an array of tokens created by tokenizeLexemes(Lexeme **).</para></simplesect>
<simplesect kind="post"><para>If the token pointed to by <emphasis>tokenp</emphasis> does not match <emphasis>token</emphasis>, <emphasis>tokenp</emphasis> will point to the same token as when the function was called. </para><simplesectsep/><para>If the token pointed to by <emphasis>tokenp</emphasis> matches <emphasis>token</emphasis>, <emphasis>tokenp</emphasis> will point to the next token <bold>after</bold> the one matched.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>The token does not match <emphasis>token</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>The token matches <emphasis>token</emphasis>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>peekToken(Token ***, TokenType) </para><simplesectsep/><para>nextToken(Token ***, TokenType) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="593" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1351" bodyend="1359"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a94add089355e1f1902b468358ca10e27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int peekToken</definition>
        <argsstring>(Token ***, TokenType)</argsstring>
        <name>peekToken</name>
        <param>
          <type><ref refid="struct_token" kindref="compound">Token</ref> ***</type>
          <defname>tokenp</defname>
          <briefdescription><para>[in] A pointer to the position of the next token to parse in an array of <ref refid="struct_token" kindref="compound">Token</ref> structures. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="tokenizer_8h_1aa520fbf142ba1e7e659590c07da31921" kindref="member">TokenType</ref></type>
          <defname>token</defname>
          <briefdescription><para>[in] The type of token to match. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if the token pointed to by <emphasis>tokenp</emphasis> matches <emphasis>token</emphasis>.</para><para><simplesect kind="note"><para>Unlike acceptToken(Token ***, TokenType), this function does not modify <emphasis>tokenp</emphasis>.</para></simplesect>
<simplesect kind="pre"><para><emphasis>tokenp</emphasis> points to a position in an array of tokens created by tokenizeLexemes(Lexeme **).</para></simplesect>
<simplesect kind="post"><para><emphasis>tokenp</emphasis> will point to the same token as when the function was called.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>The token does not match <emphasis>token</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>The token matches <emphasis>token</emphasis>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>acceptToken(Token ***, TokenType) </para><simplesectsep/><para>nextToken(Token ***, TokenType) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="594" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1377" bodyend="1383"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a3feb2a004cce026c678ec986f40fef49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nextToken</definition>
        <argsstring>(Token ***, TokenType)</argsstring>
        <name>nextToken</name>
        <param>
          <type><ref refid="struct_token" kindref="compound">Token</ref> ***</type>
          <defname>tokenp</defname>
          <briefdescription><para>[in] A pointer to the position of the next token to parse in an array of <ref refid="struct_token" kindref="compound">Token</ref> structures. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="tokenizer_8h_1aa520fbf142ba1e7e659590c07da31921" kindref="member">TokenType</ref></type>
          <defname>token</defname>
          <briefdescription><para>[in] The type of token to match. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if the token <bold>after</bold> the one pointed to by <emphasis>tokenp</emphasis> matches <emphasis>token</emphasis>.</para><para><simplesect kind="note"><para>Unlike acceptToken(Token ***, TokenType), this function does not modify <emphasis>tokenp</emphasis>.</para></simplesect>
<simplesect kind="pre"><para><emphasis>tokenp</emphasis> points to a position in an array of tokens created by tokenizeLexemes(Lexeme **).</para></simplesect>
<simplesect kind="post"><para><emphasis>tokenp</emphasis> will point to the same token as when the function was called.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>The next token does not match <emphasis>token</emphasis>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>The next token matches <emphasis>token</emphasis>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>acceptToken(Token ***, TokenType) </para><simplesectsep/><para>peekToken(Token ***, TokenType) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="595" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1402" bodyend="1408"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a1908ce12a3ad5f07e80bc556835bd808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void error</definition>
        <argsstring>(const char *, Token **)</argsstring>
        <name>error</name>
        <param>
          <type>const char *</type>
          <defname>info</defname>
          <briefdescription><para>[in] The array of characters to print. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_token" kindref="compound">Token</ref> **</type>
          <defname>tokens</defname>
          <briefdescription><para>[in] A pointer to an array of tokens to parse. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints an error message of the form &quot;LINE: INFO before: NEXT.\n&quot;, where LINE is the line the next token appears on, INFO is <emphasis>info</emphasis> and NEXT is the image of the next token.</para><para><simplesect kind="pre"><para><emphasis>tokens</emphasis> was created by tokenizeLexemes(Lexeme **). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="597" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1415" bodyend="1419"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a1ac3bc288eaa10a7ac4bdf8dd5c34c3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> *</type>
        <definition>ConstantNode* parseConstantNode</definition>
        <argsstring>(Token ***)</argsstring>
        <name>parseConstantNode</name>
        <param>
          <type><ref refid="struct_token" kindref="compound">Token</ref> ***</type>
          <defname>tokenp</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parses a set of tokens into a <ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> structure. Parsing begins at the token pointed to by <emphasis>tokenp</emphasis>.</para><para><simplesect kind="pre"><para><emphasis>tokenp</emphasis> points to a position in an array of tokens created by tokenizeLexemes(Lexeme **).</para></simplesect>
<simplesect kind="post"><para><emphasis>tokenp</emphasis> will point to the next <bold>unparsed</bold> token in the array.</para></simplesect>
<simplesect kind="return"><para>A pointer to the generated <ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> structure.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during parsing.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>parseTypeNode(Token ***) </para><simplesectsep/><para>parseIdentifierNode(Token ***) </para><simplesectsep/><para>parseExprNode(Token ***, FunctionTable *) </para><simplesectsep/><para>parseStmtNode(Token ***, FunctionTable *) </para><simplesectsep/><para>parseBlockNode(Token ***, FunctionTable *) </para><simplesectsep/><para>parseMainNode(Token **, FunctionTable *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="599" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1439" bodyend="1499"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a2937540334a287abe54092bb9c15ca82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_type_node" kindref="compound">TypeNode</ref> *</type>
        <definition>TypeNode* parseTypeNode</definition>
        <argsstring>(Token ***)</argsstring>
        <name>parseTypeNode</name>
        <param>
          <type><ref refid="struct_token" kindref="compound">Token</ref> ***</type>
          <defname>tokenp</defname>
          <briefdescription><para>[in,out] A pointer to the position of the next token to parse. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parses a set of tokens into a <ref refid="struct_type_node" kindref="compound">TypeNode</ref> structure. Parsing begins at the token pointed to by <emphasis>tokenp</emphasis>.</para><para><simplesect kind="pre"><para><emphasis>tokenp</emphasis> points to a position in an array of tokens created by tokenizeLexemes(Lexeme **).</para></simplesect>
<simplesect kind="post"><para><emphasis>tokenp</emphasis> will point to the next <bold>unparsed</bold> token in the array.</para></simplesect>
<simplesect kind="return"><para>A pointer to the generated <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during parsing.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>parseConstantNode(Token ***) </para><simplesectsep/><para>parseIdentifierNode(Token ***) </para><simplesectsep/><para>parseExprNode(Token ***, FunctionTable *) </para><simplesectsep/><para>parseStmtNode(Token ***, FunctionTable *) </para><simplesectsep/><para>parseBlockNode(Token ***, FunctionTable *) </para><simplesectsep/><para>parseMainNode(Token **, FunctionTable *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="600" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1519" bodyend="1572"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1abda4fd9ff0ec7e0467a381807ef31ebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> *</type>
        <definition>IdentifierNode* parseIdentifierNode</definition>
        <argsstring>(Token ***)</argsstring>
        <name>parseIdentifierNode</name>
        <param>
          <type><ref refid="struct_token" kindref="compound">Token</ref> ***</type>
          <defname>tokenp</defname>
          <briefdescription><para>[in,out] A pointer to the position of the next token to parse. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parses a set of tokens into an <ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> structure. Parsing begins at the token pointed to by <emphasis>tokenp</emphasis>.</para><para><simplesect kind="pre"><para><emphasis>tokenp</emphasis> points to a position in an array of tokens created by tokenizeLexemes(Lexeme **).</para></simplesect>
<simplesect kind="post"><para><emphasis>tokenp</emphasis> will point to the next <bold>unparsed</bold> token in the array.</para></simplesect>
<simplesect kind="return"><para>A pointer to the generated <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during parsing.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>parseConstantNode(Token ***) </para><simplesectsep/><para>parseTypeNode(Token ***) </para><simplesectsep/><para>parseExprNode(Token ***, FunctionTable *) </para><simplesectsep/><para>parseStmtNode(Token ***, FunctionTable *) </para><simplesectsep/><para>parseBlockNode(Token ***, FunctionTable *) </para><simplesectsep/><para>parseMainNode(Token **, FunctionTable *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="601" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1592" bodyend="1613"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a5e7be18e5debd8a7ffdb90e068ffb6f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_expr_node" kindref="compound">ExprNode</ref> *</type>
        <definition>ExprNode* parseExprNode</definition>
        <argsstring>(Token ***, FunctionTable *)</argsstring>
        <name>parseExprNode</name>
        <param>
          <type><ref refid="struct_token" kindref="compound">Token</ref> ***</type>
          <defname>tokenp</defname>
          <briefdescription><para>[in,out] A pointer to the position of the next token to parse. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_function_table" kindref="compound">FunctionTable</ref> *</type>
          <defname>functab</defname>
          <briefdescription><para>[in,out] A pointer to the table of defined functions. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parses a set of tokens into an <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure. Parsing begins at the token pointed to by <emphasis>tokenp</emphasis>.</para><para><simplesect kind="pre"><para><emphasis>tokenp</emphasis> points to a position in an array of tokens created by tokenizeLexemes(Lexeme **).</para></simplesect>
<simplesect kind="post"><para><emphasis>tokenp</emphasis> will point to the next <bold>unparsed</bold> token in the array.</para></simplesect>
<simplesect kind="return"><para>A pointer to the generated <ref refid="struct_expr_node" kindref="compound">ExprNode</ref> structure.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during parsing.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>parseConstantNode(Token ***) </para><simplesectsep/><para>parseTypeNode(Token ***) </para><simplesectsep/><para>parseIdentifierNode(Token ***) </para><simplesectsep/><para>parseStmtNode(Token ***, FunctionTable *) </para><simplesectsep/><para>parseBlockNode(Token ***, FunctionTable *) </para><simplesectsep/><para>parseMainNode(Token **, FunctionTable *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="602" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="1633" bodyend="1983"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a90384e303312f4d768db77a96d3a686d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> *</type>
        <definition>StmtNode* parseStmtNode</definition>
        <argsstring>(Token ***, FunctionTable *)</argsstring>
        <name>parseStmtNode</name>
        <param>
          <type><ref refid="struct_token" kindref="compound">Token</ref> ***</type>
          <defname>tokenp</defname>
          <briefdescription><para>[in,out] A pointer to the position of the next token to parse. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_function_table" kindref="compound">FunctionTable</ref> *</type>
          <defname>functab</defname>
          <briefdescription><para>[in,out] A pointer to the table of defined functions. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parses a set of tokens into a <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> structure. Parsing begins at the token pointed to by <emphasis>tokenp</emphasis>.</para><para><simplesect kind="pre"><para><emphasis>tokenp</emphasis> points to a position in an array of tokens created by tokenizeLexemes(Lexeme **).</para></simplesect>
<simplesect kind="post"><para><emphasis>tokenp</emphasis> will point to the next <bold>unparsed</bold> token in the array.</para></simplesect>
<simplesect kind="return"><para>A pointer to the generated <ref refid="struct_stmt_node" kindref="compound">StmtNode</ref> structure.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during parsing.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>parseConstantNode(Token ***) </para><simplesectsep/><para>parseTypeNode(Token ***) </para><simplesectsep/><para>parseIdentifierNode(Token ***) </para><simplesectsep/><para>parseExprNode(Token ***, FunctionTable *) </para><simplesectsep/><para>parseBlockNode(Token ***, FunctionTable *) </para><simplesectsep/><para>parseMainNode(Token **, FunctionTable *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para><simplesect kind="note"><para>The 1.2 specification only allows constant values for OMG guards thus this function explicitly checks for them. </para></simplesect>
</para>        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="603" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="2003" bodyend="2872"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a0def6d0885f5a3bc5c5cf9728569a7df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_block_node" kindref="compound">BlockNode</ref> *</type>
        <definition>BlockNode* parseBlockNode</definition>
        <argsstring>(Token ***, FunctionTable *)</argsstring>
        <name>parseBlockNode</name>
        <param>
          <type><ref refid="struct_token" kindref="compound">Token</ref> ***</type>
          <defname>tokenp</defname>
          <briefdescription><para>[in,out] A pointer to the position of the next token to parse. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_function_table" kindref="compound">FunctionTable</ref> *</type>
          <defname>functab</defname>
          <briefdescription><para>[in,out] A pointer to the table of defined functions. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parses a set of tokens into a <ref refid="struct_block_node" kindref="compound">BlockNode</ref> structure. Parsing begins at the token pointed to by <emphasis>tokenp</emphasis>.</para><para><simplesect kind="pre"><para><emphasis>tokenp</emphasis> points to a position in an array of tokens created by tokenizeLexemes(Lexeme **).</para></simplesect>
<simplesect kind="post"><para><emphasis>tokenp</emphasis> will point to the next <bold>unparsed</bold> token in the array.</para></simplesect>
<simplesect kind="return"><para>A pointer to the generated <ref refid="struct_block_node" kindref="compound">BlockNode</ref> structure.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during parsing.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>parseConstantNode(Token ***) </para><simplesectsep/><para>parseTypeNode(Token ***) </para><simplesectsep/><para>parseIdentifierNode(Token ***) </para><simplesectsep/><para>parseExprNode(Token ***, FunctionTable *) </para><simplesectsep/><para>parseStmtNode(Token ***, FunctionTable *) </para><simplesectsep/><para>parseMainNode(Token **, FunctionTable *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="604" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="2892" bodyend="2928"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a62a8e457d490424c663de8059e84c1f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_main_node" kindref="compound">MainNode</ref> *</type>
        <definition>MainNode* parseMainNode</definition>
        <argsstring>(Token **, FunctionTable *)</argsstring>
        <name>parseMainNode</name>
        <param>
          <type><ref refid="struct_token" kindref="compound">Token</ref> **</type>
          <defname>tokens</defname>
          <briefdescription><para>[in] A pointer to an array of tokens to parse. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_function_table" kindref="compound">FunctionTable</ref> *</type>
          <defname>functab</defname>
          <briefdescription><para>[in,out] A pointer to a table of function prototypes. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parses <emphasis>tokens</emphasis> into a <ref refid="struct_main_node" kindref="compound">MainNode</ref> structure, an intermediary form to be passed along to a later stage of processing such as, for example, an interpreter.</para><para><simplesect kind="pre"><para><emphasis>tokens</emphasis> was created by tokenizeLexemes(Lexeme **). </para><simplesectsep/><para><emphasis>functab</emphasis> was created by setupFunctionTable(Token **).</para></simplesect>
<simplesect kind="return"><para>A pointer to the generated <ref refid="struct_main_node" kindref="compound">MainNode</ref> structure.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during parsing.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>parseConstantNode(Token ***) </para><simplesectsep/><para>parseTypeNode(Token ***) </para><simplesectsep/><para>parseIdentifierNode(Token ***) </para><simplesectsep/><para>parseExprNode(Token ***, FunctionTable *) </para><simplesectsep/><para>parseStmtNode(Token ***, FunctionTable *) </para><simplesectsep/><para>parseBlockNode(Token ***, FunctionTable *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="605" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="2947" bodyend="2979"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a2f03ca022291c4b938f2b6f8fa3592bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_function_table" kindref="compound">FunctionTable</ref> *</type>
        <definition>FunctionTable* setupFunctionTable</definition>
        <argsstring>(Token **)</argsstring>
        <name>setupFunctionTable</name>
        <param>
          <type><ref refid="struct_token" kindref="compound">Token</ref> **</type>
          <defname>tokens</defname>
          <briefdescription><para>[in] A pointer to an array of tokens to scan for function prototypes. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets up a <ref refid="struct_function_table" kindref="compound">FunctionTable</ref> structure filled with the prototypes of all declared functions. This structure is then passed as an argument to parseMainNode(Token **, FunctionTable *) so that functions may be called before their definition as well as recursively.</para><para><simplesect kind="pre"><para><emphasis>tokens</emphasis> was created by tokenizeLexemes(Lexeme **).</para></simplesect>
<simplesect kind="return"><para>A pointer to the generated <ref refid="struct_function_table" kindref="compound">FunctionTable</ref> structure.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>An error occurred during setup. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="606" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="2990" bodyend="3076"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a5a65bb9266d6307b4aff0c757d5f27ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> *</type>
        <definition>ConstantNode* createBooleanConstantNode</definition>
        <argsstring>(int)</argsstring>
        <name>createBooleanConstantNode</name>
        <param>
          <type>int</type>
          <defname>data</defname>
          <briefdescription><para>[in] The constant boolean data. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a boolean type <ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> structure.</para><para><simplesect kind="return"><para>A pointer to a boolean type <ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> structure with value <computeroutput>0</computeroutput> if <emphasis>data</emphasis> equals 0 and <computeroutput>1</computeroutput> otherwise.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteConstantNode(ConstantNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="608" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="164" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1aa2401c6f7c0f0b70f37e76afa33f19db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> *</type>
        <definition>ConstantNode* createIntegerConstantNode</definition>
        <argsstring>(int)</argsstring>
        <name>createIntegerConstantNode</name>
        <param>
          <type>int</type>
          <defname>data</defname>
          <briefdescription><para>[in] The constant integer data. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an integer type <ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> structure.</para><para><simplesect kind="return"><para>A pointer to an integer type <ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> storing the desired value.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteConstantNode(ConstantNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="609" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="183" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a007b2246ca4ac47d4ead833f556b9f8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> *</type>
        <definition>ConstantNode* createFloatConstantNode</definition>
        <argsstring>(float)</argsstring>
        <name>createFloatConstantNode</name>
        <param>
          <type>float</type>
          <defname>data</defname>
          <briefdescription><para>[in] The constant floating point decimal data. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a floating point decimal type <ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> structure.</para><para><simplesect kind="return"><para>A pointer to a floating point decimal type <ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> storing the desired value.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteConstantNode(ConstantNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="610" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="203" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1ab236e30935527e631bd70632d82e4a26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> *</type>
        <definition>ConstantNode* createStringConstantNode</definition>
        <argsstring>(char *)</argsstring>
        <name>createStringConstantNode</name>
        <param>
          <type>char *</type>
          <defname>data</defname>
          <briefdescription><para>[in] The constant character string data. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a string type <ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> structure.</para><para><simplesect kind="return"><para>A pointer to a string type <ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> storing the desired value.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteConstantNode(ConstantNode *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="611" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="222" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1aaaad8bdf4ce25fd43931cea74c4b5fd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteConstantNode</definition>
        <argsstring>(ConstantNode *)</argsstring>
        <name>deleteConstantNode</name>
        <param>
          <type><ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> structure to be deleted. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a <ref refid="struct_constant_node" kindref="compound">ConstantNode</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>node</emphasis> was created by either createBooleanConstantNode(int), createIntegerConstantNode(int), createFloatConstantNode(float), or createStringConstantNode(char *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>node</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createBooleanConstantNode(int) </para><simplesectsep/><para>createIntegerConstantNode(int) </para><simplesectsep/><para>createFloatConstantNode(float) </para><simplesectsep/><para>createStringConstantNode(char *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="612" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="246" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a071185a9419aa55306ef21a2b51a6c0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_identifier_node_list" kindref="compound">IdentifierNodeList</ref> *</type>
        <definition>IdentifierNodeList* createIdentifierNodeList</definition>
        <argsstring>(void)</argsstring>
        <name>createIdentifierNodeList</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an <ref refid="struct_identifier_node_list" kindref="compound">IdentifierNodeList</ref> structure.</para><para><simplesect kind="return"><para>A pointer to a <ref refid="struct_identifier_node_list" kindref="compound">IdentifierNodeList</ref> structure with the desired properties.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>malloc was unable to allocate memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>deleteIdentifierNodeList(IdentifierNodeList *) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="614" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="308" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1a27170278f27ceb396ca02acffb965dca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> *</type>
        <definition>IdentifierNode* addIdentifierNode</definition>
        <argsstring>(IdentifierNodeList *, IdentifierNode *)</argsstring>
        <name>addIdentifierNode</name>
        <param>
          <type><ref refid="struct_identifier_node_list" kindref="compound">IdentifierNodeList</ref> *</type>
          <defname>list</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_identifier_node_list" kindref="compound">IdentifierNodeList</ref> structure to add <emphasis>node</emphasis> to. </para></briefdescription>
        </param>
        <param>
          <type><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> *</type>
          <defname>node</defname>
          <briefdescription><para>[in] A pointer to the <ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> structure to add to <emphasis>list</emphasis>. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds an <ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> structure to an <ref refid="struct_identifier_node_list" kindref="compound">IdentifierNodeList</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>list</emphasis> was created by createIdentifierNodeList(void). </para><simplesectsep/><para><emphasis>node</emphasis> was created by createIdentifierNode(char *, const char *, unsigned int).</para></simplesect>
<simplesect kind="post"><para><emphasis>node</emphasis> will be added on to the end of <emphasis>list</emphasis> and the size of <emphasis>list</emphasis> will be updated accordingly.</para></simplesect>
<simplesect kind="return"><para>A pointer to the added <ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref> structure (will be the same as <emphasis>node</emphasis>).</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NULL</parametername>
</parameternamelist>
<parameterdescription>
<para>realloc was unable to allocate memory. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="615" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="332" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="tools_2lci_2lciframework_2parser_8h_1aa715c02f1399a129b3f2c6faf86e1e85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deleteIdentifierNodeList</definition>
        <argsstring>(IdentifierNodeList *)</argsstring>
        <name>deleteIdentifierNodeList</name>
        <param>
          <type><ref refid="struct_identifier_node_list" kindref="compound">IdentifierNodeList</ref> *</type>
          <defname>list</defname>
          <briefdescription><para>[in,out] A pointer to the <ref refid="struct_identifier_node_list" kindref="compound">IdentifierNodeList</ref> structure to delete. </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes an <ref refid="struct_identifier_node_list" kindref="compound">IdentifierNodeList</ref> structure.</para><para><simplesect kind="pre"><para><emphasis>list</emphasis> was created by createIdentifierNodeList(void) and contains items added by addIdentifierNode(IdentifierNodeList *, IdentifierNode *).</para></simplesect>
<simplesect kind="post"><para>The memory at <emphasis>list</emphasis> and any of its associated members will be freed.</para></simplesect>
<simplesect kind="see"><para>createIdentifierNodeList(void) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h" line="616" bodyfile="/Users/ericgallager/uscode/tools/lci/lciframework/parser.c" bodystart="356" bodyend="364"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="168"><highlight class="preprocessor">#ifndef<sp/>__PARSER_H__</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__PARSER_H__</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tokenizer_8h" kindref="compound">tokenizer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DEBUG</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="184" refid="struct_identifier_node" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="185" refid="struct_identifier_node_1a3e2473c7676f22d1f3beebe66f0a7688" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="struct_identifier_node_1a3e2473c7676f22d1f3beebe66f0a7688" kindref="member">image</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="186" refid="struct_identifier_node_1a3e2e04a380b98e30c1227ae747edbe18" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="struct_identifier_node_1a3e2e04a380b98e30c1227ae747edbe18" kindref="member">fname</ref>;<sp/></highlight></codeline>
<codeline lineno="187" refid="struct_identifier_node_1a64ed52f14bcfabff321d105e0a54648d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_identifier_node_1a64ed52f14bcfabff321d105e0a54648d" kindref="member">line</ref>;<sp/></highlight></codeline>
<codeline lineno="188"><highlight class="normal">}<sp/><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="struct_identifier_node_list" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="197" refid="struct_identifier_node_list_1a7ee19db1c4e05eafe5df277542e01dd1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_identifier_node_list_1a7ee19db1c4e05eafe5df277542e01dd1" kindref="member">num</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="198" refid="struct_identifier_node_list_1a61b371619c07f89846ae0780d5403dc0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>**<ref refid="struct_identifier_node_list_1a61b371619c07f89846ae0780d5403dc0" kindref="member">ids</ref>;<sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal">}<sp/><ref refid="struct_identifier_node_list" kindref="compound">IdentifierNodeList</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ST_CAST,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ST_PRINT,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ST_INPUT,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ST_ASSIGNMENT,<sp/><sp/></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ST_DECLARATION,<sp/></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ST_IFTHENELSE,<sp/><sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ST_SWITCH,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ST_BREAK,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ST_RETURN,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ST_LOOP,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ST_FUNCDEF,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ST_EXPR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="215"><highlight class="normal">}<sp/>StmtType;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="struct_stmt_node" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="223" refid="struct_stmt_node_1a1a1a8ff13773a99c9344f5392cabfa13" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StmtType<sp/><ref refid="struct_stmt_node_1a1a1a8ff13773a99c9344f5392cabfa13" kindref="member">type</ref>;<sp/></highlight></codeline>
<codeline lineno="224" refid="struct_stmt_node_1abe2bb8927d8a9a26b83d855fb14837e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_stmt_node_1abe2bb8927d8a9a26b83d855fb14837e6" kindref="member">stmt</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal">}<sp/><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref>;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="struct_stmt_node_list" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="234" refid="struct_stmt_node_list_1a9036accbc55ef84c8f35058c6536fcd9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_stmt_node_list_1a9036accbc55ef84c8f35058c6536fcd9" kindref="member">num</ref>;<sp/></highlight></codeline>
<codeline lineno="235" refid="struct_stmt_node_list_1a2e9faa29350794b5434f3e2e59d048a7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref><sp/>**<ref refid="struct_stmt_node_list_1a2e9faa29350794b5434f3e2e59d048a7" kindref="member">stmts</ref>;<sp/></highlight></codeline>
<codeline lineno="236"><highlight class="normal">}<sp/><ref refid="struct_stmt_node_list" kindref="compound">StmtNodeList</ref>;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ET_CAST,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ET_CONSTANT,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ET_IDENTIFIER,<sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ET_FUNCCALL,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ET_OP,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ET_IMPVAR<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="246"><highlight class="normal">}<sp/>ExprType;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="struct_expr_node" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="254" refid="struct_expr_node_1ab5f285d791068c69dbca0610d8c36c99" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExprType<sp/><ref refid="struct_expr_node_1ab5f285d791068c69dbca0610d8c36c99" kindref="member">type</ref>;<sp/></highlight></codeline>
<codeline lineno="255" refid="struct_expr_node_1a2c6ff3dccfa2e543a46e01763adab3a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="struct_expr_node_1a2c6ff3dccfa2e543a46e01763adab3a8" kindref="member">expr</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="256"><highlight class="normal">}<sp/><ref refid="struct_expr_node" kindref="compound">ExprNode</ref>;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="struct_expr_node_list" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="265" refid="struct_expr_node_list_1a60f9bbe230725287369033df733a2b04" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_expr_node_list_1a60f9bbe230725287369033df733a2b04" kindref="member">num</ref>;<sp/></highlight></codeline>
<codeline lineno="266" refid="struct_expr_node_list_1a10ae95f2facec652ba79e0bb5c9298c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>**<ref refid="struct_expr_node_list_1a10ae95f2facec652ba79e0bb5c9298c1" kindref="member">exprs</ref>;<sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal">}<sp/><ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref>;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="struct_block_node" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="274" refid="struct_block_node_1a5d918092ee6d41f6be62dff435aede89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_stmt_node_list" kindref="compound">StmtNodeList</ref><sp/>*<ref refid="struct_block_node_1a5d918092ee6d41f6be62dff435aede89" kindref="member">stmts</ref>;<sp/></highlight></codeline>
<codeline lineno="275"><highlight class="normal">}<sp/><ref refid="struct_block_node" kindref="compound">BlockNode</ref>;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="struct_block_node_list" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="284" refid="struct_block_node_list_1af36c77e76b73f0fa500ada63aaad2dd7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_block_node_list_1af36c77e76b73f0fa500ada63aaad2dd7" kindref="member">num</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="285" refid="struct_block_node_list_1a97ab8b891f65c2f8152712d59f69be64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_block_node" kindref="compound">BlockNode</ref><sp/>**<ref refid="struct_block_node_list_1a97ab8b891f65c2f8152712d59f69be64" kindref="member">blocks</ref>;<sp/></highlight></codeline>
<codeline lineno="286"><highlight class="normal">}<sp/><ref refid="struct_block_node_list" kindref="compound">BlockNodeList</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CT_INTEGER,<sp/></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CT_FLOAT,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CT_BOOLEAN,<sp/></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CT_STRING,<sp/><sp/></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CT_NIL<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="295"><highlight class="normal">}<sp/>ConstantType;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="union_constant_data" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="299" refid="union_constant_data_1a2bd6e6fb99485a02c81794d2a3fc5a41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="union_constant_data_1a2bd6e6fb99485a02c81794d2a3fc5a41" kindref="member">i</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="300" refid="union_constant_data_1a9c3282f50d2b4fb9752bb55fed6d1ed2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="union_constant_data_1a9c3282f50d2b4fb9752bb55fed6d1ed2" kindref="member">f</ref>;<sp/></highlight></codeline>
<codeline lineno="301" refid="union_constant_data_1aee1ab22b8dd076717f5de146f8939b46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="union_constant_data_1aee1ab22b8dd076717f5de146f8939b46" kindref="member">s</ref>;<sp/></highlight></codeline>
<codeline lineno="302"><highlight class="normal">}<sp/><ref refid="union_constant_data" kindref="compound">ConstantData</ref>;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="struct_constant_node" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="313" refid="struct_constant_node_1ae0c5b58398f2ff9a476628ea34858893" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConstantType<sp/><ref refid="struct_constant_node_1ae0c5b58398f2ff9a476628ea34858893" kindref="member">type</ref>;<sp/></highlight></codeline>
<codeline lineno="314" refid="struct_constant_node_1ae546bb49962906e06a965381014ea7ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="union_constant_data" kindref="compound">ConstantData</ref><sp/><ref refid="struct_constant_node_1ae546bb49962906e06a965381014ea7ae" kindref="member">data</ref>;<sp/></highlight></codeline>
<codeline lineno="315"><highlight class="normal">}<sp/><ref refid="struct_constant_node" kindref="compound">ConstantNode</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="322" refid="struct_func_def_stmt_node" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="323" refid="struct_func_def_stmt_node_1a545e8a727dbe8786ab90afa0a4608d68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*<ref refid="struct_func_def_stmt_node_1a545e8a727dbe8786ab90afa0a4608d68" kindref="member">scope</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="324" refid="struct_func_def_stmt_node_1ab047936127219724532e25ba6890265a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*<ref refid="struct_func_def_stmt_node_1ab047936127219724532e25ba6890265a" kindref="member">name</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="325" refid="struct_func_def_stmt_node_1a2a9f4d580b7252e5576873d2252a187a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_identifier_node_list" kindref="compound">IdentifierNodeList</ref><sp/>*<ref refid="struct_func_def_stmt_node_1a2a9f4d580b7252e5576873d2252a187a" kindref="member">args</ref>;<sp/></highlight></codeline>
<codeline lineno="326" refid="struct_func_def_stmt_node_1a9e50b6a41f7abe43b433fe4fd714b002" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_block_node" kindref="compound">BlockNode</ref><sp/>*<ref refid="struct_func_def_stmt_node_1a9e50b6a41f7abe43b433fe4fd714b002" kindref="member">body</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="327"><highlight class="normal">}<sp/><ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref>;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="333" refid="struct_function_table" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="334" refid="struct_function_table_1a568ae3641aaf56327da625e668c4aa51" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_function_table_1a568ae3641aaf56327da625e668c4aa51" kindref="member">num</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="335" refid="struct_function_table_1a1c1544bb6db2f638619e21fc60ca2ba8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref><sp/>**<ref refid="struct_function_table_1a1c1544bb6db2f638619e21fc60ca2ba8" kindref="member">funcs</ref>;<sp/></highlight></codeline>
<codeline lineno="336"><highlight class="normal">}<sp/><ref refid="struct_function_table" kindref="compound">FunctionTable</ref>;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="struct_main_node" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="346" refid="struct_main_node_1aee302d107abb16c48702c2699a58d49f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_block_node" kindref="compound">BlockNode</ref><sp/>*<ref refid="struct_main_node_1aee302d107abb16c48702c2699a58d49f" kindref="member">block</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="347" refid="struct_main_node_1a1b22e4833219bb71c9ca7f32d3e37241" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_function_table" kindref="compound">FunctionTable</ref><sp/>*<ref refid="struct_main_node_1a1b22e4833219bb71c9ca7f32d3e37241" kindref="member">functab</ref>;<sp/></highlight></codeline>
<codeline lineno="348"><highlight class="normal">}<sp/><ref refid="struct_main_node" kindref="compound">MainNode</ref>;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="struct_type_node" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="355" refid="struct_type_node_1abd5fc196a6f39c15eb33e94eec269ac7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConstantType<sp/><ref refid="struct_type_node_1abd5fc196a6f39c15eb33e94eec269ac7" kindref="member">type</ref>;<sp/></highlight></codeline>
<codeline lineno="356"><highlight class="normal">}<sp/><ref refid="struct_type_node" kindref="compound">TypeNode</ref>;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="363" refid="struct_cast_stmt_node" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="364" refid="struct_cast_stmt_node_1a89d56358f0a8fc4d4fb0df7029ea494e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*<ref refid="struct_cast_stmt_node_1a89d56358f0a8fc4d4fb0df7029ea494e" kindref="member">target</ref>;<sp/></highlight></codeline>
<codeline lineno="365" refid="struct_cast_stmt_node_1adbeebc6cefa4f2cb92079b82cb4f4df8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_type_node" kindref="compound">TypeNode</ref><sp/>*<ref refid="struct_cast_stmt_node_1adbeebc6cefa4f2cb92079b82cb4f4df8" kindref="member">newtype</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="366"><highlight class="normal">}<sp/><ref refid="struct_cast_stmt_node" kindref="compound">CastStmtNode</ref>;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="struct_print_stmt_node" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="374" refid="struct_print_stmt_node_1a9ee87b79d331dc05b6a4bb27462a5f69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref><sp/>*<ref refid="struct_print_stmt_node_1a9ee87b79d331dc05b6a4bb27462a5f69" kindref="member">args</ref>;<sp/></highlight></codeline>
<codeline lineno="375" refid="struct_print_stmt_node_1a147ba34eeda7bcfb39f2846a678d091c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_print_stmt_node_1a147ba34eeda7bcfb39f2846a678d091c" kindref="member">nonl</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="376"><highlight class="normal">}<sp/><ref refid="struct_print_stmt_node" kindref="compound">PrintStmtNode</ref>;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="struct_input_stmt_node" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="385" refid="struct_input_stmt_node_1ad7cb247683faf94a9da01d08055349f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*<ref refid="struct_input_stmt_node_1ad7cb247683faf94a9da01d08055349f2" kindref="member">target</ref>;<sp/></highlight></codeline>
<codeline lineno="386"><highlight class="normal">}<sp/><ref refid="struct_input_stmt_node" kindref="compound">InputStmtNode</ref>;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="struct_assignment_stmt_node" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="394" refid="struct_assignment_stmt_node_1a6bdcf7c297f54d4269849cb96c8161a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*<ref refid="struct_assignment_stmt_node_1a6bdcf7c297f54d4269849cb96c8161a6" kindref="member">target</ref>;<sp/></highlight></codeline>
<codeline lineno="395" refid="struct_assignment_stmt_node_1af25b11d4ed4159da853c540641f0db24" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*<ref refid="struct_assignment_stmt_node_1af25b11d4ed4159da853c540641f0db24" kindref="member">expr</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="396"><highlight class="normal">}<sp/><ref refid="struct_assignment_stmt_node" kindref="compound">AssignmentStmtNode</ref>;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="405" refid="struct_declaration_stmt_node" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="406" refid="struct_declaration_stmt_node_1ab52e3859c15ef8b651f330bcd963c56c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*<ref refid="struct_declaration_stmt_node_1ab52e3859c15ef8b651f330bcd963c56c" kindref="member">scope</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="407" refid="struct_declaration_stmt_node_1a6fed156d07803ffd41487e873bcef98f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*<ref refid="struct_declaration_stmt_node_1a6fed156d07803ffd41487e873bcef98f" kindref="member">target</ref>;<sp/></highlight></codeline>
<codeline lineno="408" refid="struct_declaration_stmt_node_1aba3f89fdd66c4b0264490aa639a6bd6f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*<ref refid="struct_declaration_stmt_node_1aba3f89fdd66c4b0264490aa639a6bd6f" kindref="member">expr</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="409"><highlight class="normal">}<sp/><ref refid="struct_declaration_stmt_node" kindref="compound">DeclarationStmtNode</ref>;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="421" refid="struct_if_then_else_stmt_node" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="422" refid="struct_if_then_else_stmt_node_1ae28470757cf61cab67dd9096114f4710" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_block_node" kindref="compound">BlockNode</ref><sp/>*<ref refid="struct_if_then_else_stmt_node_1ae28470757cf61cab67dd9096114f4710" kindref="member">yes</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="423" refid="struct_if_then_else_stmt_node_1aeb7d6e0fb8dad0d6e894bcdc887306fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_block_node" kindref="compound">BlockNode</ref><sp/>*<ref refid="struct_if_then_else_stmt_node_1aeb7d6e0fb8dad0d6e894bcdc887306fe" kindref="member">no</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="424" refid="struct_if_then_else_stmt_node_1ad94295fb6d16e9815a85e0d8e930f079" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref><sp/>*<ref refid="struct_if_then_else_stmt_node_1ad94295fb6d16e9815a85e0d8e930f079" kindref="member">guards</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="425" refid="struct_if_then_else_stmt_node_1ab4b9831a1e7db13c206997a45ee84a95" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_block_node_list" kindref="compound">BlockNodeList</ref><sp/>*<ref refid="struct_if_then_else_stmt_node_1ab4b9831a1e7db13c206997a45ee84a95" kindref="member">blocks</ref>;<sp/></highlight></codeline>
<codeline lineno="426"><highlight class="normal">}<sp/><ref refid="struct_if_then_else_stmt_node" kindref="compound">IfThenElseStmtNode</ref>;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="436" refid="struct_switch_stmt_node" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="437" refid="struct_switch_stmt_node_1a125319a6fd02d72d96d41193daffb4a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref><sp/>*<ref refid="struct_switch_stmt_node_1a125319a6fd02d72d96d41193daffb4a2" kindref="member">guards</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="438" refid="struct_switch_stmt_node_1a6cdb5c66044261b28302b6ca682d7564" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_block_node_list" kindref="compound">BlockNodeList</ref><sp/>*<ref refid="struct_switch_stmt_node_1a6cdb5c66044261b28302b6ca682d7564" kindref="member">blocks</ref>;<sp/></highlight></codeline>
<codeline lineno="439" refid="struct_switch_stmt_node_1ad75de1632a46c451d251959e56d53d44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_block_node" kindref="compound">BlockNode</ref><sp/>*<ref refid="struct_switch_stmt_node_1ad75de1632a46c451d251959e56d53d44" kindref="member">def</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="440"><highlight class="normal">}<sp/><ref refid="struct_switch_stmt_node" kindref="compound">SwitchStmtNode</ref>;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="447" refid="struct_return_stmt_node" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="448" refid="struct_return_stmt_node_1ac610b54406ae3bc54e3d5c4e9fcb1d2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*<ref refid="struct_return_stmt_node_1ac610b54406ae3bc54e3d5c4e9fcb1d2e" kindref="member">value</ref>;<sp/></highlight></codeline>
<codeline lineno="449"><highlight class="normal">}<sp/><ref refid="struct_return_stmt_node" kindref="compound">ReturnStmtNode</ref>;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="457" refid="struct_loop_stmt_node" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="458" refid="struct_loop_stmt_node_1a36b401d6c4fd2c16a68de026b99187f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*<ref refid="struct_loop_stmt_node_1a36b401d6c4fd2c16a68de026b99187f3" kindref="member">name</ref>;<sp/></highlight></codeline>
<codeline lineno="459" refid="struct_loop_stmt_node_1afb3820072966231fd1d43eea8ebd9234" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*<ref refid="struct_loop_stmt_node_1afb3820072966231fd1d43eea8ebd9234" kindref="member">var</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="460" refid="struct_loop_stmt_node_1a53a86fb7f989cf43f54192b8f3ad6c1a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*<ref refid="struct_loop_stmt_node_1a53a86fb7f989cf43f54192b8f3ad6c1a" kindref="member">guard</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="461" refid="struct_loop_stmt_node_1a0400ab555fff51b09f79c495af20f37f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*<ref refid="struct_loop_stmt_node_1a0400ab555fff51b09f79c495af20f37f" kindref="member">update</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="462" refid="struct_loop_stmt_node_1a6844fd9206ed5d6b4fd48fc1365969aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_block_node" kindref="compound">BlockNode</ref><sp/>*<ref refid="struct_loop_stmt_node_1a6844fd9206ed5d6b4fd48fc1365969aa" kindref="member">body</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal">}<sp/><ref refid="struct_loop_stmt_node" kindref="compound">LoopStmtNode</ref>;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="470" refid="struct_cast_expr_node" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="471" refid="struct_cast_expr_node_1a90d1ac82b5b4a63a6842fc4e33f4e3bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*<ref refid="struct_cast_expr_node_1a90d1ac82b5b4a63a6842fc4e33f4e3bb" kindref="member">target</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="472" refid="struct_cast_expr_node_1a0198b8265e221f2a52609a2d117585ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_type_node" kindref="compound">TypeNode</ref><sp/>*<ref refid="struct_cast_expr_node_1a0198b8265e221f2a52609a2d117585ef" kindref="member">newtype</ref>;<sp/></highlight></codeline>
<codeline lineno="473"><highlight class="normal">}<sp/><ref refid="struct_cast_expr_node" kindref="compound">CastExprNode</ref>;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="486" refid="struct_func_call_expr_node" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="487" refid="struct_func_call_expr_node_1aa2a85cf9427647c0e922221095c00e94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref><sp/>*<ref refid="struct_func_call_expr_node_1aa2a85cf9427647c0e922221095c00e94" kindref="member">def</ref>;<sp/></highlight></codeline>
<codeline lineno="488" refid="struct_func_call_expr_node_1a559b2108d83b11b46584b85f6fd1b12b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref><sp/>*<ref refid="struct_func_call_expr_node_1a559b2108d83b11b46584b85f6fd1b12b" kindref="member">args</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="489"><highlight class="normal">}<sp/><ref refid="struct_func_call_expr_node" kindref="compound">FuncCallExprNode</ref>;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_ADD,<sp/><sp/></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_SUB,<sp/><sp/></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_MULT,<sp/></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_DIV,<sp/><sp/></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_MOD,<sp/><sp/></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_MAX,<sp/><sp/></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_MIN,<sp/><sp/></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_AND,<sp/><sp/></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_OR,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_XOR,<sp/><sp/></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_NOT,<sp/><sp/></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_EQ,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_NEQ,<sp/><sp/></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_CAT<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="510"><highlight class="normal">}<sp/>OpType;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="517" refid="struct_op_expr_node" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="518" refid="struct_op_expr_node_1a69ff4baea505db8ed32f4c4027f24ac6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OpType<sp/><ref refid="struct_op_expr_node_1a69ff4baea505db8ed32f4c4027f24ac6" kindref="member">type</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="519" refid="struct_op_expr_node_1a82d6f2c460a585ee3b0a46ce00ba186f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref><sp/>*<ref refid="struct_op_expr_node_1a82d6f2c460a585ee3b0a46ce00ba186f" kindref="member">args</ref>;<sp/></highlight></codeline>
<codeline lineno="520"><highlight class="normal">}<sp/><ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref>;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><ref refid="struct_main_node" kindref="compound">MainNode</ref><sp/>*createMainNode(<ref refid="struct_block_node" kindref="compound">BlockNode</ref><sp/>*,<sp/><ref refid="struct_function_table" kindref="compound">FunctionTable</ref><sp/>*);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteMainNode(<ref refid="struct_main_node" kindref="compound">MainNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><ref refid="struct_block_node" kindref="compound">BlockNode</ref><sp/>*createBlockNode(<ref refid="struct_stmt_node_list" kindref="compound">StmtNodeList</ref><sp/>*);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteBlockNode(<ref refid="struct_block_node" kindref="compound">BlockNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><ref refid="struct_block_node_list" kindref="compound">BlockNodeList</ref><sp/>*createBlockNodeList(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><ref refid="struct_block_node" kindref="compound">BlockNode</ref><sp/>*addBlockNode(<ref refid="struct_block_node_list" kindref="compound">BlockNodeList</ref><sp/>*,<sp/><ref refid="struct_block_node" kindref="compound">BlockNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteBlockNodeList(<ref refid="struct_block_node_list" kindref="compound">BlockNodeList</ref><sp/>*);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*createIdentifierNode(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteIdentifierNode(<ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><ref refid="struct_type_node" kindref="compound">TypeNode</ref><sp/>*createTypeNode(ConstantType);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteTypeNode(<ref refid="struct_type_node" kindref="compound">TypeNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref><sp/>*createStmtNode(StmtType,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteStmtNode(<ref refid="struct_stmt_node" kindref="compound">StmtNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><ref refid="struct_stmt_node_list" kindref="compound">StmtNodeList</ref><sp/>*createStmtNodeList(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref><sp/>*addStmtNode(<ref refid="struct_stmt_node_list" kindref="compound">StmtNodeList</ref><sp/>*,<sp/><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteStmtNodeList(<ref refid="struct_stmt_node_list" kindref="compound">StmtNodeList</ref><sp/>*);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><ref refid="struct_cast_stmt_node" kindref="compound">CastStmtNode</ref><sp/>*createCastStmtNode(<ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*,<sp/><ref refid="struct_type_node" kindref="compound">TypeNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteCastStmtNode(<ref refid="struct_cast_stmt_node" kindref="compound">CastStmtNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><ref refid="struct_print_stmt_node" kindref="compound">PrintStmtNode</ref><sp/>*createPrintStmtNode(<ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deletePrintStmtNode(<ref refid="struct_print_stmt_node" kindref="compound">PrintStmtNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><ref refid="struct_input_stmt_node" kindref="compound">InputStmtNode</ref><sp/>*createInputStmtNode(<ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteInputStmtNode(<ref refid="struct_input_stmt_node" kindref="compound">InputStmtNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><ref refid="struct_assignment_stmt_node" kindref="compound">AssignmentStmtNode</ref><sp/>*createAssignmentStmtNode(<ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*,<sp/><ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteAssignmentStmtNode(<ref refid="struct_assignment_stmt_node" kindref="compound">AssignmentStmtNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><ref refid="struct_declaration_stmt_node" kindref="compound">DeclarationStmtNode</ref><sp/>*createDeclarationStmtNode(<ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*,<sp/><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*,<sp/><ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteDeclarationStmtNode(<ref refid="struct_declaration_stmt_node" kindref="compound">DeclarationStmtNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><ref refid="struct_if_then_else_stmt_node" kindref="compound">IfThenElseStmtNode</ref><sp/>*createIfThenElseStmtNode(<ref refid="struct_block_node" kindref="compound">BlockNode</ref><sp/>*,<sp/><ref refid="struct_block_node" kindref="compound">BlockNode</ref><sp/>*,<sp/><ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref><sp/>*,<sp/><ref refid="struct_block_node_list" kindref="compound">BlockNodeList</ref><sp/>*);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteIfThenElseStmtNode(<ref refid="struct_if_then_else_stmt_node" kindref="compound">IfThenElseStmtNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><ref refid="struct_switch_stmt_node" kindref="compound">SwitchStmtNode</ref><sp/>*createSwitchStmtNode(<ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref><sp/>*,<sp/><ref refid="struct_block_node_list" kindref="compound">BlockNodeList</ref><sp/>*,<sp/><ref refid="struct_block_node" kindref="compound">BlockNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteSwitchStmtNode(<ref refid="struct_switch_stmt_node" kindref="compound">SwitchStmtNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><ref refid="struct_return_stmt_node" kindref="compound">ReturnStmtNode</ref><sp/>*createReturnStmtNode(<ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteReturnStmtNode(<ref refid="struct_return_stmt_node" kindref="compound">ReturnStmtNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><ref refid="struct_loop_stmt_node" kindref="compound">LoopStmtNode</ref><sp/>*createLoopStmtNode(<ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*,<sp/><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*,<sp/><ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*,<sp/><ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*,<sp/><ref refid="struct_block_node" kindref="compound">BlockNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteLoopStmtNode(<ref refid="struct_loop_stmt_node" kindref="compound">LoopStmtNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref><sp/>*createFuncDefStmtNode(<ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*,<sp/><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*,<sp/><ref refid="struct_identifier_node_list" kindref="compound">IdentifierNodeList</ref><sp/>*,<sp/><ref refid="struct_block_node" kindref="compound">BlockNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteFuncDefStmtNode(<ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*createExprNode(ExprType,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteExprNode(<ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref><sp/>*createExprNodeList(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*addExprNode(<ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref><sp/>*,<sp/><ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteExprNodeList(<ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref><sp/>*);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><ref refid="struct_cast_expr_node" kindref="compound">CastExprNode</ref><sp/>*createCastExprNode(<ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*,<sp/><ref refid="struct_type_node" kindref="compound">TypeNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteCastExprNode(<ref refid="struct_cast_expr_node" kindref="compound">CastExprNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><ref refid="struct_func_call_expr_node" kindref="compound">FuncCallExprNode</ref><sp/>*createFuncCallExprNode(<ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref><sp/>*,<sp/><ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref><sp/>*);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteFuncCallExprNode(<ref refid="struct_func_call_expr_node" kindref="compound">FuncCallExprNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref><sp/>*createOpExprNode(OpType,<sp/><ref refid="struct_expr_node_list" kindref="compound">ExprNodeList</ref><sp/>*);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteOpExprNode(<ref refid="struct_op_expr_node" kindref="compound">OpExprNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><ref refid="struct_function_table" kindref="compound">FunctionTable</ref><sp/>*createFunctionTable(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref><sp/>*addFuncDefStmtNode(<ref refid="struct_function_table" kindref="compound">FunctionTable</ref><sp/>*,<sp/><ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteFunctionTable(<ref refid="struct_function_table" kindref="compound">FunctionTable</ref><sp/>*);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><ref refid="struct_func_def_stmt_node" kindref="compound">FuncDefStmtNode</ref><sp/>*lookupFuncDefStmtNode(<ref refid="struct_function_table" kindref="compound">FunctionTable</ref><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>acceptToken(<ref refid="struct_token" kindref="compound">Token</ref><sp/>***,<sp/><ref refid="tokenizer_8h_1aa520fbf142ba1e7e659590c07da31921" kindref="member">TokenType</ref>);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>peekToken(<ref refid="struct_token" kindref="compound">Token</ref><sp/>***,<sp/><ref refid="tokenizer_8h_1aa520fbf142ba1e7e659590c07da31921" kindref="member">TokenType</ref>);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nextToken(<ref refid="struct_token" kindref="compound">Token</ref><sp/>***,<sp/><ref refid="tokenizer_8h_1aa520fbf142ba1e7e659590c07da31921" kindref="member">TokenType</ref>);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/><ref refid="struct_token" kindref="compound">Token</ref><sp/>**);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><ref refid="struct_constant_node" kindref="compound">ConstantNode</ref><sp/>*parseConstantNode(<ref refid="struct_token" kindref="compound">Token</ref><sp/>***);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><ref refid="struct_type_node" kindref="compound">TypeNode</ref><sp/>*parseTypeNode(<ref refid="struct_token" kindref="compound">Token</ref><sp/>***);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*parseIdentifierNode(<ref refid="struct_token" kindref="compound">Token</ref><sp/>***);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><ref refid="struct_expr_node" kindref="compound">ExprNode</ref><sp/>*parseExprNode(<ref refid="struct_token" kindref="compound">Token</ref><sp/>***,<sp/><ref refid="struct_function_table" kindref="compound">FunctionTable</ref><sp/>*);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><ref refid="struct_stmt_node" kindref="compound">StmtNode</ref><sp/>*parseStmtNode(<ref refid="struct_token" kindref="compound">Token</ref><sp/>***,<sp/><ref refid="struct_function_table" kindref="compound">FunctionTable</ref><sp/>*);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><ref refid="struct_block_node" kindref="compound">BlockNode</ref><sp/>*parseBlockNode(<ref refid="struct_token" kindref="compound">Token</ref><sp/>***,<sp/><ref refid="struct_function_table" kindref="compound">FunctionTable</ref><sp/>*);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><ref refid="struct_main_node" kindref="compound">MainNode</ref><sp/>*parseMainNode(<ref refid="struct_token" kindref="compound">Token</ref><sp/>**,<sp/><ref refid="struct_function_table" kindref="compound">FunctionTable</ref><sp/>*);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><ref refid="struct_function_table" kindref="compound">FunctionTable</ref><sp/>*setupFunctionTable(<ref refid="struct_token" kindref="compound">Token</ref><sp/>**);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><ref refid="struct_constant_node" kindref="compound">ConstantNode</ref><sp/>*createBooleanConstantNode(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><ref refid="struct_constant_node" kindref="compound">ConstantNode</ref><sp/>*createIntegerConstantNode(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><ref refid="struct_constant_node" kindref="compound">ConstantNode</ref><sp/>*createFloatConstantNode(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><ref refid="struct_constant_node" kindref="compound">ConstantNode</ref><sp/>*createStringConstantNode(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteConstantNode(<ref refid="struct_constant_node" kindref="compound">ConstantNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><ref refid="struct_identifier_node_list" kindref="compound">IdentifierNodeList</ref><sp/>*createIdentifierNodeList(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*addIdentifierNode(<ref refid="struct_identifier_node_list" kindref="compound">IdentifierNodeList</ref><sp/>*,<sp/><ref refid="struct_identifier_node" kindref="compound">IdentifierNode</ref><sp/>*);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteIdentifierNodeList(<ref refid="struct_identifier_node_list" kindref="compound">IdentifierNodeList</ref><sp/>*);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__PARSER_H__<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/ericgallager/uscode/tools/lci/lciframework/parser.h"/>
  </compounddef>
</doxygen>
